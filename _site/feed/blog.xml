<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://junlinjing.github.io/jjing-neuro/feed/blog.xml" rel="self" type="application/atom+xml" /><link href="https://junlinjing.github.io/jjing-neuro/" rel="alternate" type="text/html" /><updated>2025-05-08T23:48:06+02:00</updated><id>https://junlinjing.github.io/jjing-neuro/feed/blog.xml</id><title type="html">Jim Jing | Blog</title><subtitle>A personal academic website focusing on neuroscience research and artificial intelligence</subtitle><entry><title type="html">Advanced Neural Signal Processing Techniques</title><link href="https://junlinjing.github.io/jjing-neuro/blog/2024/03/neural-signal-processing" rel="alternate" type="text/html" title="Advanced Neural Signal Processing Techniques" /><published>2024-03-22T00:00:00+01:00</published><updated>2024-03-22T00:00:00+01:00</updated><id>https://junlinjing.github.io/jjing-neuro/blog/2024/03/neural-signal-processing</id><content type="html" xml:base="https://junlinjing.github.io/jjing-neuro/blog/2024/03/neural-signal-processing"><![CDATA[<h1 id="advanced-neural-signal-processing-techniques">Advanced Neural Signal Processing Techniques</h1>

<p>Neural signal processing is fundamental to understanding brain function and developing neural interfaces. This post explores advanced techniques for processing and analyzing neural signals.</p>

<h2 id="wavelet-analysis">Wavelet Analysis</h2>

<p>Wavelets are particularly useful for analyzing time-frequency characteristics of neural signals:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pywt</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="k">def</span> <span class="nf">wavelet_analysis</span><span class="p">(</span><span class="n">signal</span><span class="p">,</span> <span class="n">sampling_rate</span><span class="p">):</span>
    <span class="s">"""Perform wavelet analysis on neural signals"""</span>
    <span class="c1"># Choose wavelet type and levels
</span>    <span class="n">wavelet</span> <span class="o">=</span> <span class="s">'db4'</span>
    <span class="n">levels</span> <span class="o">=</span> <span class="mi">5</span>
    
    <span class="c1"># Perform wavelet decomposition
</span>    <span class="n">coeffs</span> <span class="o">=</span> <span class="n">pywt</span><span class="p">.</span><span class="n">wavedec</span><span class="p">(</span><span class="n">signal</span><span class="p">,</span> <span class="n">wavelet</span><span class="p">,</span> <span class="n">level</span><span class="o">=</span><span class="n">levels</span><span class="p">)</span>
    
    <span class="c1"># Reconstruct signals at each level
</span>    <span class="n">reconstructed</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">levels</span><span class="p">):</span>
        <span class="n">coeff_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="n">zeros_like</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">coeffs</span><span class="p">]</span>
        <span class="n">coeff_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">coeffs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="n">reconstructed</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">pywt</span><span class="p">.</span><span class="n">waverec</span><span class="p">(</span><span class="n">coeff_list</span><span class="p">,</span> <span class="n">wavelet</span><span class="p">))</span>
    
    <span class="k">return</span> <span class="n">reconstructed</span>

<span class="c1"># Example usage
</span><span class="k">def</span> <span class="nf">plot_wavelet_decomposition</span><span class="p">(</span><span class="n">signal</span><span class="p">,</span> <span class="n">sampling_rate</span><span class="p">):</span>
    <span class="n">reconstructed</span> <span class="o">=</span> <span class="n">wavelet_analysis</span><span class="p">(</span><span class="n">signal</span><span class="p">,</span> <span class="n">sampling_rate</span><span class="p">)</span>
    <span class="n">time</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">signal</span><span class="p">))</span> <span class="o">/</span> <span class="n">sampling_rate</span>
    
    <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">rec</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">reconstructed</span><span class="p">):</span>
        <span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">reconstructed</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="n">rec</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="sa">f</span><span class="s">'Level </span><span class="si">{</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s"> Decomposition'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="advanced-filtering-techniques">Advanced Filtering Techniques</h2>

<p>Implementation of advanced filtering methods for neural signals:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">scipy</span> <span class="kn">import</span> <span class="n">signal</span>

<span class="k">def</span> <span class="nf">design_filters</span><span class="p">():</span>
    <span class="s">"""Design various types of filters for neural signal processing"""</span>
    
    <span class="k">def</span> <span class="nf">notch_filter</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">freq</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">fs</span><span class="p">):</span>
        <span class="s">"""Notch filter for removing power line noise"""</span>
        <span class="n">b</span><span class="p">,</span> <span class="n">a</span> <span class="o">=</span> <span class="n">signal</span><span class="p">.</span><span class="n">iirnotch</span><span class="p">(</span><span class="n">freq</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">fs</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">signal</span><span class="p">.</span><span class="n">filtfilt</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">bandpass_filter</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">low_freq</span><span class="p">,</span> <span class="n">high_freq</span><span class="p">,</span> <span class="n">fs</span><span class="p">,</span> <span class="n">order</span><span class="o">=</span><span class="mi">4</span><span class="p">):</span>
        <span class="s">"""Bandpass filter for isolating frequency bands of interest"""</span>
        <span class="n">nyq</span> <span class="o">=</span> <span class="n">fs</span> <span class="o">*</span> <span class="mf">0.5</span>
        <span class="n">low</span> <span class="o">=</span> <span class="n">low_freq</span> <span class="o">/</span> <span class="n">nyq</span>
        <span class="n">high</span> <span class="o">=</span> <span class="n">high_freq</span> <span class="o">/</span> <span class="n">nyq</span>
        <span class="n">b</span><span class="p">,</span> <span class="n">a</span> <span class="o">=</span> <span class="n">signal</span><span class="p">.</span><span class="n">butter</span><span class="p">(</span><span class="n">order</span><span class="p">,</span> <span class="p">[</span><span class="n">low</span><span class="p">,</span> <span class="n">high</span><span class="p">],</span> <span class="n">btype</span><span class="o">=</span><span class="s">'band'</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">signal</span><span class="p">.</span><span class="n">filtfilt</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">savitzky_golay_filter</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">window_length</span><span class="p">,</span> <span class="n">polyorder</span><span class="p">):</span>
        <span class="s">"""Savitzky-Golay filter for smoothing while preserving high moments"""</span>
        <span class="k">return</span> <span class="n">signal</span><span class="p">.</span><span class="n">savgol_filter</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">window_length</span><span class="p">,</span> <span class="n">polyorder</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">notch_filter</span><span class="p">,</span> <span class="n">bandpass_filter</span><span class="p">,</span> <span class="n">savitzky_golay_filter</span>
</code></pre></div></div>

<h2 id="feature-extraction">Feature Extraction</h2>

<p>Common feature extraction methods for neural signals:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">extract_features</span><span class="p">(</span><span class="n">signal</span><span class="p">,</span> <span class="n">fs</span><span class="p">):</span>
    <span class="s">"""Extract common features from neural signals"""</span>
    <span class="n">features</span> <span class="o">=</span> <span class="p">{}</span>
    
    <span class="c1"># Time domain features
</span>    <span class="n">features</span><span class="p">[</span><span class="s">'mean'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">signal</span><span class="p">)</span>
    <span class="n">features</span><span class="p">[</span><span class="s">'std'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">std</span><span class="p">(</span><span class="n">signal</span><span class="p">)</span>
    <span class="n">features</span><span class="p">[</span><span class="s">'var'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">var</span><span class="p">(</span><span class="n">signal</span><span class="p">)</span>
    <span class="n">features</span><span class="p">[</span><span class="s">'rms'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">signal</span><span class="o">**</span><span class="mi">2</span><span class="p">))</span>
    
    <span class="c1"># Frequency domain features
</span>    <span class="n">freqs</span><span class="p">,</span> <span class="n">psd</span> <span class="o">=</span> <span class="n">signal</span><span class="p">.</span><span class="n">welch</span><span class="p">(</span><span class="n">signal</span><span class="p">,</span> <span class="n">fs</span><span class="p">,</span> <span class="n">nperseg</span><span class="o">=</span><span class="mi">256</span><span class="p">)</span>
    <span class="n">features</span><span class="p">[</span><span class="s">'peak_freq'</span><span class="p">]</span> <span class="o">=</span> <span class="n">freqs</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">psd</span><span class="p">)]</span>
    <span class="n">features</span><span class="p">[</span><span class="s">'mean_freq'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">freqs</span> <span class="o">*</span> <span class="n">psd</span><span class="p">)</span> <span class="o">/</span> <span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">psd</span><span class="p">)</span>
    
    <span class="c1"># Entropy
</span>    <span class="n">features</span><span class="p">[</span><span class="s">'sample_entropy'</span><span class="p">]</span> <span class="o">=</span> <span class="n">compute_sample_entropy</span><span class="p">(</span><span class="n">signal</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">features</span>

<span class="k">def</span> <span class="nf">compute_sample_entropy</span><span class="p">(</span><span class="n">signal</span><span class="p">,</span> <span class="n">m</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">r</span><span class="o">=</span><span class="mf">0.2</span><span class="p">):</span>
    <span class="s">"""Compute sample entropy of the signal"""</span>
    <span class="c1"># Implementation of sample entropy calculation
</span>    <span class="n">N</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">signal</span><span class="p">)</span>
    <span class="n">r</span> <span class="o">=</span> <span class="n">r</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">std</span><span class="p">(</span><span class="n">signal</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">count_matches</span><span class="p">(</span><span class="n">template</span><span class="p">,</span> <span class="n">m</span><span class="p">):</span>
        <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span> <span class="o">-</span> <span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">np</span><span class="p">.</span><span class="nb">all</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">signal</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="n">m</span><span class="p">]</span> <span class="o">-</span> <span class="n">template</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">):</span>
                <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">count</span> <span class="o">-</span> <span class="mi">1</span>  <span class="c1"># Subtract self-match
</span>    
    <span class="c1"># Count matches for m and m+1 length templates
</span>    <span class="n">B</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">count_matches</span><span class="p">(</span><span class="n">signal</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="n">m</span><span class="p">],</span> <span class="n">m</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="o">-</span><span class="n">m</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span>
    <span class="n">A</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">count_matches</span><span class="p">(</span><span class="n">signal</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="n">m</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="n">m</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="o">-</span><span class="n">m</span><span class="p">))</span>
    
    <span class="k">return</span> <span class="o">-</span><span class="n">np</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="n">A</span><span class="o">/</span><span class="n">B</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="artifact-removal">Artifact Removal</h2>

<p>Implementation of ICA-based artifact removal:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sklearn.decomposition</span> <span class="kn">import</span> <span class="n">FastICA</span>

<span class="k">def</span> <span class="nf">remove_artifacts_ica</span><span class="p">(</span><span class="n">eeg_data</span><span class="p">,</span> <span class="n">n_components</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="s">"""Remove artifacts using Independent Component Analysis"""</span>
    <span class="c1"># Reshape data if needed
</span>    <span class="k">if</span> <span class="n">eeg_data</span><span class="p">.</span><span class="n">ndim</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>  <span class="c1"># trials x channels x time
</span>        <span class="n">trials</span><span class="p">,</span> <span class="n">channels</span><span class="p">,</span> <span class="n">samples</span> <span class="o">=</span> <span class="n">eeg_data</span><span class="p">.</span><span class="n">shape</span>
        <span class="n">eeg_data</span> <span class="o">=</span> <span class="n">eeg_data</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">trials</span> <span class="o">*</span> <span class="n">samples</span><span class="p">,</span> <span class="n">channels</span><span class="p">)</span>
    
    <span class="c1"># Apply ICA
</span>    <span class="n">ica</span> <span class="o">=</span> <span class="n">FastICA</span><span class="p">(</span><span class="n">n_components</span><span class="o">=</span><span class="n">n_components</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>
    <span class="n">components</span> <span class="o">=</span> <span class="n">ica</span><span class="p">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">eeg_data</span><span class="p">)</span>
    
    <span class="c1"># Here you would typically identify artifact components
</span>    <span class="c1"># This is often done through visual inspection or automated methods
</span>    
    <span class="c1"># Reconstruct signal without artifact components
</span>    <span class="n">cleaned_data</span> <span class="o">=</span> <span class="n">ica</span><span class="p">.</span><span class="n">inverse_transform</span><span class="p">(</span><span class="n">components</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">cleaned_data</span>
</code></pre></div></div>

<h2 id="advanced-connectivity-analysis">Advanced Connectivity Analysis</h2>

<p>Modern neural signal analysis often involves studying connectivity between different brain regions:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">compute_connectivity</span><span class="p">(</span><span class="n">signals</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="s">'plv'</span><span class="p">,</span> <span class="n">fs</span><span class="o">=</span><span class="mi">256</span><span class="p">):</span>
    <span class="s">"""Compute various connectivity measures between signals"""</span>
    <span class="k">if</span> <span class="n">method</span> <span class="o">==</span> <span class="s">'plv'</span><span class="p">:</span>
        <span class="c1"># Phase Locking Value
</span>        <span class="k">def</span> <span class="nf">compute_plv</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
            <span class="n">analytic_x</span> <span class="o">=</span> <span class="n">signal</span><span class="p">.</span><span class="n">hilbert</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
            <span class="n">analytic_y</span> <span class="o">=</span> <span class="n">signal</span><span class="p">.</span><span class="n">hilbert</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
            <span class="n">phase_diff</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">angle</span><span class="p">(</span><span class="n">analytic_x</span><span class="p">)</span> <span class="o">-</span> <span class="n">np</span><span class="p">.</span><span class="n">angle</span><span class="p">(</span><span class="n">analytic_y</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">exp</span><span class="p">(</span><span class="mf">1j</span> <span class="o">*</span> <span class="n">phase_diff</span><span class="p">)))</span>
        
        <span class="n">n_channels</span> <span class="o">=</span> <span class="n">signals</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">connectivity</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">n_channels</span><span class="p">,</span> <span class="n">n_channels</span><span class="p">))</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n_channels</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">n_channels</span><span class="p">):</span>
                <span class="n">plv</span> <span class="o">=</span> <span class="n">compute_plv</span><span class="p">(</span><span class="n">signals</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">signals</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
                <span class="n">connectivity</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">plv</span>
                <span class="n">connectivity</span><span class="p">[</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">plv</span>
                
        <span class="k">return</span> <span class="n">connectivity</span>
    
    <span class="k">elif</span> <span class="n">method</span> <span class="o">==</span> <span class="s">'coherence'</span><span class="p">:</span>
        <span class="c1"># Magnitude Squared Coherence
</span>        <span class="n">n_channels</span> <span class="o">=</span> <span class="n">signals</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">connectivity</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">n_channels</span><span class="p">,</span> <span class="n">n_channels</span><span class="p">))</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n_channels</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">n_channels</span><span class="p">):</span>
                <span class="n">f</span><span class="p">,</span> <span class="n">coh</span> <span class="o">=</span> <span class="n">signal</span><span class="p">.</span><span class="n">coherence</span><span class="p">(</span><span class="n">signals</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">signals</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">fs</span><span class="o">=</span><span class="n">fs</span><span class="p">)</span>
                <span class="n">connectivity</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">coh</span><span class="p">)</span>
                <span class="n">connectivity</span><span class="p">[</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">connectivity</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">]</span>
                
        <span class="k">return</span> <span class="n">connectivity</span>

<span class="k">def</span> <span class="nf">plot_connectivity</span><span class="p">(</span><span class="n">connectivity</span><span class="p">,</span> <span class="n">channel_names</span><span class="p">):</span>
    <span class="s">"""Plot connectivity matrix as a heatmap"""</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">connectivity</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="s">'viridis'</span><span class="p">,</span> <span class="n">aspect</span><span class="o">=</span><span class="s">'equal'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">colorbar</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s">'Connectivity Strength'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">xticks</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">channel_names</span><span class="p">)),</span> <span class="n">channel_names</span><span class="p">,</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">45</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">yticks</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">channel_names</span><span class="p">)),</span> <span class="n">channel_names</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Brain Connectivity Matrix'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="advanced-time-series-analysis">Advanced Time-Series Analysis</h2>

<p>Implementation of advanced time series analysis methods:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">compute_multiscale_entropy</span><span class="p">(</span><span class="n">signal</span><span class="p">,</span> <span class="n">scales</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">m</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">r</span><span class="o">=</span><span class="mf">0.15</span><span class="p">):</span>
    <span class="s">"""Compute Multiscale Entropy"""</span>
    <span class="k">def</span> <span class="nf">coarse_grain</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">scale</span><span class="p">):</span>
        <span class="s">"""Coarse-graining for multiscale entropy"""</span>
        <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="n">coarse</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">n</span> <span class="o">//</span> <span class="n">scale</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">n</span> <span class="o">-</span> <span class="n">scale</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">scale</span><span class="p">):</span>
            <span class="n">coarse</span><span class="p">[</span><span class="n">i</span> <span class="o">//</span> <span class="n">scale</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="n">scale</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">coarse</span>
    
    <span class="c1"># Normalize signal
</span>    <span class="n">signal</span> <span class="o">=</span> <span class="p">(</span><span class="n">signal</span> <span class="o">-</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">signal</span><span class="p">))</span> <span class="o">/</span> <span class="n">np</span><span class="p">.</span><span class="n">std</span><span class="p">(</span><span class="n">signal</span><span class="p">)</span>
    <span class="n">mse</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">scales</span><span class="p">)</span>
    
    <span class="k">for</span> <span class="n">scale</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">scales</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
        <span class="n">coarse_signal</span> <span class="o">=</span> <span class="n">coarse_grain</span><span class="p">(</span><span class="n">signal</span><span class="p">,</span> <span class="n">scale</span><span class="p">)</span>
        <span class="n">mse</span><span class="p">[</span><span class="n">scale</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">compute_sample_entropy</span><span class="p">(</span><span class="n">coarse_signal</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">mse</span>

<span class="k">def</span> <span class="nf">detrended_fluctuation_analysis</span><span class="p">(</span><span class="n">signal</span><span class="p">,</span> <span class="n">scales</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="s">"""Perform Detrended Fluctuation Analysis"""</span>
    <span class="k">if</span> <span class="n">scales</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">scales</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">logspace</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">log10</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">signal</span><span class="p">)</span><span class="o">//</span><span class="mi">4</span><span class="p">),</span> <span class="mi">20</span><span class="p">).</span><span class="n">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
    
    <span class="c1"># Calculate profile
</span>    <span class="n">profile</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">cumsum</span><span class="p">(</span><span class="n">signal</span> <span class="o">-</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">signal</span><span class="p">))</span>
    
    <span class="n">fluctuations</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">scales</span><span class="p">))</span>
    
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">scale</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">scales</span><span class="p">):</span>
        <span class="c1"># Split signal into windows
</span>        <span class="n">n_windows</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">profile</span><span class="p">)</span> <span class="o">//</span> <span class="n">scale</span>
        <span class="n">windows</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array_split</span><span class="p">(</span><span class="n">profile</span><span class="p">[:</span><span class="n">n_windows</span><span class="o">*</span><span class="n">scale</span><span class="p">],</span> <span class="n">n_windows</span><span class="p">)</span>
        
        <span class="c1"># Calculate local trend and fluctuation
</span>        <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="n">scale</span><span class="p">)</span>
        <span class="n">fluct</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">n_windows</span><span class="p">)</span>
        
        <span class="k">for</span> <span class="n">j</span><span class="p">,</span> <span class="n">window</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">windows</span><span class="p">):</span>
            <span class="n">coef</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">polyfit</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">window</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
            <span class="n">trend</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">polyval</span><span class="p">(</span><span class="n">coef</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
            <span class="n">fluct</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">((</span><span class="n">window</span> <span class="o">-</span> <span class="n">trend</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">))</span>
            
        <span class="n">fluctuations</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">fluct</span><span class="p">)</span>
    
    <span class="c1"># Calculate scaling exponent
</span>    <span class="n">coef</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">polyfit</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="n">scales</span><span class="p">),</span> <span class="n">np</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="n">fluctuations</span><span class="p">),</span> <span class="mi">1</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">scales</span><span class="p">,</span> <span class="n">fluctuations</span><span class="p">,</span> <span class="n">coef</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div></div>

<h2 id="non-linear-dynamics-analysis">Non-linear Dynamics Analysis</h2>

<p>Tools for analyzing non-linear dynamics in neural signals:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">recurrence_plot</span><span class="p">(</span><span class="n">signal</span><span class="p">,</span> <span class="n">dimension</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">delay</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">threshold</span><span class="o">=</span><span class="mf">0.1</span><span class="p">):</span>
    <span class="s">"""Generate a recurrence plot from time series data"""</span>
    <span class="c1"># Time delay embedding
</span>    <span class="n">N</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">signal</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="n">dimension</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">delay</span>
    <span class="n">phase_space</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">N</span><span class="p">,</span> <span class="n">dimension</span><span class="p">))</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">dimension</span><span class="p">):</span>
        <span class="n">phase_space</span><span class="p">[:,</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">signal</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="n">delay</span><span class="p">:</span><span class="n">i</span><span class="o">*</span><span class="n">delay</span> <span class="o">+</span> <span class="n">N</span><span class="p">]</span>
    
    <span class="c1"># Calculate distances
</span>    <span class="n">distances</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">N</span><span class="p">,</span> <span class="n">N</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
            <span class="n">distances</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">((</span><span class="n">phase_space</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">phase_space</span><span class="p">[</span><span class="n">j</span><span class="p">])</span><span class="o">**</span><span class="mi">2</span><span class="p">))</span>
    
    <span class="c1"># Create recurrence matrix
</span>    <span class="n">recurrence</span> <span class="o">=</span> <span class="n">distances</span> <span class="o">&lt;</span> <span class="n">threshold</span>
    
    <span class="k">return</span> <span class="n">recurrence</span>

<span class="k">def</span> <span class="nf">lyapunov_exponent</span><span class="p">(</span><span class="n">signal</span><span class="p">,</span> <span class="n">dimension</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">delay</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">dt</span><span class="o">=</span><span class="mf">1.0</span><span class="p">):</span>
    <span class="s">"""Estimate the largest Lyapunov exponent"""</span>
    <span class="c1"># Phase space reconstruction
</span>    <span class="n">N</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">signal</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="n">dimension</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">delay</span>
    <span class="n">phase_space</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">N</span><span class="p">,</span> <span class="n">dimension</span><span class="p">))</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">dimension</span><span class="p">):</span>
        <span class="n">phase_space</span><span class="p">[:,</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">signal</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="n">delay</span><span class="p">:</span><span class="n">i</span><span class="o">*</span><span class="n">delay</span> <span class="o">+</span> <span class="n">N</span><span class="p">]</span>
    
    <span class="c1"># Find nearest neighbors
</span>    <span class="n">divergences</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">N</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
        <span class="n">distances</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">((</span><span class="n">phase_space</span> <span class="o">-</span> <span class="n">phase_space</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
        <span class="n">nearest</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">argsort</span><span class="p">(</span><span class="n">distances</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>  <span class="c1"># Exclude self
</span>        
        <span class="c1"># Track divergence
</span>        <span class="n">divergences</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">signal</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">signal</span><span class="p">[</span><span class="n">nearest</span><span class="p">]))</span> <span class="o">/</span> <span class="n">dt</span>
    
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">divergences</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>These advanced signal processing techniques form the foundation for modern neural signal analysis. They enable researchers to extract meaningful information from complex neural recordings and develop more sophisticated brain-computer interfaces.</p>

<h2 id="references">References</h2>

<ol>
  <li>Cohen, M. X. (2014). Analyzing Neural Time Series Data: Theory and Practice.</li>
  <li>Makeig, S., et al. (2004). Mining event-related brain dynamics.</li>
  <li>Quiroga, R. Q., et al. (2004). Independent component analysis for neural signal processing.</li>
</ol>]]></content><author><name></name></author><category term="blog" /><category term="Signal Processing" /><category term="Neuroscience" /><category term="Python" /><summary type="html"><![CDATA[A deep dive into modern neural signal processing methods with practical Python implementations]]></summary></entry><entry><title type="html">Recent Advances in Brain-Computer Interfaces</title><link href="https://junlinjing.github.io/jjing-neuro/blog/2024/03/brain-computer-interfaces" rel="alternate" type="text/html" title="Recent Advances in Brain-Computer Interfaces" /><published>2024-03-21T00:00:00+01:00</published><updated>2024-03-21T00:00:00+01:00</updated><id>https://junlinjing.github.io/jjing-neuro/blog/2024/03/brain-computer-interfaces</id><content type="html" xml:base="https://junlinjing.github.io/jjing-neuro/blog/2024/03/brain-computer-interfaces"><![CDATA[<h1 id="recent-advances-in-brain-computer-interfaces">Recent Advances in Brain-Computer Interfaces</h1>

<p>Brain-Computer Interfaces (BCIs) represent one of the most exciting frontiers in neuroscience and neural engineering. This post explores recent developments and their implications for research and clinical applications.</p>

<h2 id="modern-bci-architectures">Modern BCI Architectures</h2>

<p>Here’s a simple example of a modern BCI classification pipeline using Python:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="nn">sklearn.pipeline</span> <span class="kn">import</span> <span class="n">Pipeline</span>
<span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
<span class="kn">from</span> <span class="nn">sklearn.discriminant_analysis</span> <span class="kn">import</span> <span class="n">LinearDiscriminantAnalysis</span>

<span class="k">def</span> <span class="nf">create_bci_pipeline</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">Pipeline</span><span class="p">([</span>
        <span class="p">(</span><span class="s">'scaler'</span><span class="p">,</span> <span class="n">StandardScaler</span><span class="p">()),</span>
        <span class="p">(</span><span class="s">'classifier'</span><span class="p">,</span> <span class="n">LinearDiscriminantAnalysis</span><span class="p">())</span>
    <span class="p">])</span>

<span class="c1"># Example usage with EEG features
</span><span class="k">def</span> <span class="nf">process_eeg_data</span><span class="p">(</span><span class="n">eeg_data</span><span class="p">,</span> <span class="n">labels</span><span class="p">):</span>
    <span class="c1"># Assume eeg_data is a matrix of shape (n_trials, n_channels, n_timepoints)
</span>    <span class="c1"># Extract features (e.g., band powers)
</span>    <span class="n">features</span> <span class="o">=</span> <span class="n">extract_features</span><span class="p">(</span><span class="n">eeg_data</span><span class="p">)</span>
    
    <span class="c1"># Create and train the pipeline
</span>    <span class="n">bci_pipeline</span> <span class="o">=</span> <span class="n">create_bci_pipeline</span><span class="p">()</span>
    <span class="n">bci_pipeline</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">features</span><span class="p">,</span> <span class="n">labels</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">bci_pipeline</span>
</code></pre></div></div>

<h2 id="deep-learning-in-bci">Deep Learning in BCI</h2>

<p>Modern BCIs increasingly utilize deep learning approaches:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">torch</span>
<span class="kn">import</span> <span class="nn">torch.nn</span> <span class="k">as</span> <span class="n">nn</span>

<span class="k">class</span> <span class="nc">EEGNet</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n_channels</span><span class="p">,</span> <span class="n">n_classes</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">EEGNet</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">__init__</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">conv1</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">64</span><span class="p">),</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">conv2</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="p">(</span><span class="n">n_channels</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">padding</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">bn</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">BatchNorm2d</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">pool</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">AvgPool2d</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">fc</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">32</span> <span class="o">*</span> <span class="mi">61</span><span class="p">,</span> <span class="n">n_classes</span><span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">relu</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">conv1</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">relu</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">conv2</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">bn</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">pool</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">view</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">fc</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="real-time-signal-processing">Real-time Signal Processing</h2>

<p>Essential components of real-time BCI systems:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">scipy</span> <span class="kn">import</span> <span class="n">signal</span>

<span class="k">def</span> <span class="nf">real_time_preprocessing</span><span class="p">(</span><span class="n">eeg_chunk</span><span class="p">,</span> <span class="n">sfreq</span><span class="o">=</span><span class="mi">250</span><span class="p">):</span>
    <span class="s">"""Real-time preprocessing of EEG data"""</span>
    <span class="c1"># Notch filter
</span>    <span class="n">notch_freq</span> <span class="o">=</span> <span class="mf">50.0</span>  <span class="c1"># Hz
</span>    <span class="n">quality_factor</span> <span class="o">=</span> <span class="mf">30.0</span>
    <span class="n">b</span><span class="p">,</span> <span class="n">a</span> <span class="o">=</span> <span class="n">signal</span><span class="p">.</span><span class="n">iirnotch</span><span class="p">(</span><span class="n">notch_freq</span><span class="p">,</span> <span class="n">quality_factor</span><span class="p">,</span> <span class="n">sfreq</span><span class="p">)</span>
    <span class="n">eeg_notched</span> <span class="o">=</span> <span class="n">signal</span><span class="p">.</span><span class="n">filtfilt</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">eeg_chunk</span><span class="p">)</span>
    
    <span class="c1"># Bandpass filter
</span>    <span class="n">b</span><span class="p">,</span> <span class="n">a</span> <span class="o">=</span> <span class="n">signal</span><span class="p">.</span><span class="n">butter</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">40</span><span class="p">],</span> <span class="n">btype</span><span class="o">=</span><span class="s">'bandpass'</span><span class="p">,</span> <span class="n">fs</span><span class="o">=</span><span class="n">sfreq</span><span class="p">)</span>
    <span class="n">eeg_filtered</span> <span class="o">=</span> <span class="n">signal</span><span class="p">.</span><span class="n">filtfilt</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">eeg_notched</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">eeg_filtered</span>
</code></pre></div></div>

<h2 id="future-directions">Future Directions</h2>

<p>The field of BCI is rapidly evolving with new developments in:</p>
<ul>
  <li>High-resolution neural interfaces</li>
  <li>Adaptive learning algorithms</li>
  <li>Wireless and portable systems</li>
  <li>Enhanced user feedback mechanisms</li>
</ul>

<h2 id="clinical-applications">Clinical Applications</h2>

<p>BCIs are increasingly being used in clinical settings for:</p>
<ul>
  <li>Motor rehabilitation</li>
  <li>Communication aids</li>
  <li>Prosthetic control</li>
  <li>Neurological disorder treatment</li>
</ul>

<h2 id="recent-research-breakthroughs">Recent Research Breakthroughs</h2>

<h3 id="closed-loop-systems">Closed-Loop Systems</h3>
<p>Modern BCIs are moving towards closed-loop systems that provide real-time feedback:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ClosedLoopBCI</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sampling_rate</span><span class="o">=</span><span class="mi">256</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">sampling_rate</span> <span class="o">=</span> <span class="n">sampling_rate</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">buffer_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sampling_rate</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>  <span class="c1"># 2-second buffer
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">signal_buffer</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="mi">32</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">buffer_size</span><span class="p">))</span>  <span class="c1"># 32 channels
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">feedback_threshold</span> <span class="o">=</span> <span class="mf">0.75</span>
        
    <span class="k">def</span> <span class="nf">process_chunk</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">new_data</span><span class="p">):</span>
        <span class="s">"""Process new data chunk and provide feedback"""</span>
        <span class="c1"># Update buffer
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">signal_buffer</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">roll</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">signal_buffer</span><span class="p">,</span> <span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">new_data</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">signal_buffer</span><span class="p">[:,</span> <span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">new_data</span><span class="p">):]</span> <span class="o">=</span> <span class="n">new_data</span>
        
        <span class="c1"># Extract features
</span>        <span class="n">features</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">extract_features</span><span class="p">()</span>
        
        <span class="c1"># Classify and generate feedback
</span>        <span class="n">prediction</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">classify</span><span class="p">(</span><span class="n">features</span><span class="p">)</span>
        <span class="n">feedback</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">generate_feedback</span><span class="p">(</span><span class="n">prediction</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">feedback</span>
    
    <span class="k">def</span> <span class="nf">extract_features</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"""Extract relevant features from the buffer"""</span>
        <span class="c1"># Example feature extraction
</span>        <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">var</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">signal_buffer</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">classify</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">features</span><span class="p">):</span>
        <span class="s">"""Classify current state"""</span>
        <span class="c1"># Example classification
</span>        <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">features</span><span class="p">)</span> <span class="o">&gt;</span> <span class="bp">self</span><span class="p">.</span><span class="n">feedback_threshold</span>
    
    <span class="k">def</span> <span class="nf">generate_feedback</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">prediction</span><span class="p">):</span>
        <span class="s">"""Generate appropriate feedback based on classification"""</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="s">'stimulation'</span><span class="p">:</span> <span class="n">prediction</span> <span class="o">*</span> <span class="mf">0.5</span><span class="p">,</span>  <span class="c1"># Example: 50% stimulation if positive
</span>            <span class="s">'visual_feedback'</span><span class="p">:</span> <span class="s">'green'</span> <span class="k">if</span> <span class="n">prediction</span> <span class="k">else</span> <span class="s">'red'</span><span class="p">,</span>
            <span class="s">'timestamp'</span><span class="p">:</span> <span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span>
        <span class="p">}</span>
</code></pre></div></div>

<h3 id="advanced-decoding-algorithms">Advanced Decoding Algorithms</h3>

<p>Recent advances in deep learning have enabled more sophisticated decoding:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TransformerBCI</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n_channels</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span> <span class="n">n_timepoints</span><span class="o">=</span><span class="mi">512</span><span class="p">,</span> <span class="n">n_classes</span><span class="o">=</span><span class="mi">4</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">n_channels</span> <span class="o">=</span> <span class="n">n_channels</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">n_timepoints</span> <span class="o">=</span> <span class="n">n_timepoints</span>
        
        <span class="c1"># Temporal embedding
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">temporal_embed</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="n">n_timepoints</span><span class="p">,</span> <span class="mi">128</span><span class="p">)</span>
        
        <span class="c1"># Transformer encoder
</span>        <span class="n">encoder_layer</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">TransformerEncoderLayer</span><span class="p">(</span>
            <span class="n">d_model</span><span class="o">=</span><span class="mi">128</span><span class="p">,</span>
            <span class="n">nhead</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span>
            <span class="n">dim_feedforward</span><span class="o">=</span><span class="mi">512</span><span class="p">,</span>
            <span class="n">dropout</span><span class="o">=</span><span class="mf">0.1</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">transformer</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">TransformerEncoder</span><span class="p">(</span><span class="n">encoder_layer</span><span class="p">,</span> <span class="n">num_layers</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
        
        <span class="c1"># Classification head
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">classifier</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">128</span> <span class="o">*</span> <span class="n">n_channels</span><span class="p">,</span> <span class="mi">256</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.5</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">256</span><span class="p">,</span> <span class="n">n_classes</span><span class="p">)</span>
        <span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="c1"># x shape: (batch, channels, timepoints)
</span>        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">temporal_embed</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>  <span class="c1"># (batch, channels, 128)
</span>        <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">permute</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>  <span class="c1"># (channels, batch, 128)
</span>        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">transformer</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>  <span class="c1"># (channels, batch, 128)
</span>        <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">permute</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>  <span class="c1"># (batch, channels, 128)
</span>        <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># (batch, channels * 128)
</span>        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">classifier</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="multimodal-integration">Multimodal Integration</h3>

<p>Modern BCIs often combine multiple signal types:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MultimodalBCI</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">eeg_model</span> <span class="o">=</span> <span class="n">EEGNet</span><span class="p">(</span><span class="n">n_channels</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span> <span class="n">n_classes</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">emg_model</span> <span class="o">=</span> <span class="n">EMGNet</span><span class="p">(</span><span class="n">n_channels</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">n_classes</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">fusion_model</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">create_fusion_model</span><span class="p">()</span>
        
    <span class="k">def</span> <span class="nf">create_fusion_model</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">nn</span><span class="p">.</span><span class="n">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span>  <span class="c1"># 4 classes from each modality
</span>            <span class="n">nn</span><span class="p">.</span><span class="n">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Softmax</span><span class="p">(</span><span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">eeg_data</span><span class="p">,</span> <span class="n">emg_data</span><span class="p">):</span>
        <span class="n">eeg_pred</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">eeg_model</span><span class="p">(</span><span class="n">eeg_data</span><span class="p">)</span>
        <span class="n">emg_pred</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">emg_model</span><span class="p">(</span><span class="n">emg_data</span><span class="p">)</span>
        <span class="n">combined</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">cat</span><span class="p">([</span><span class="n">eeg_pred</span><span class="p">,</span> <span class="n">emg_pred</span><span class="p">],</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">fusion_model</span><span class="p">(</span><span class="n">combined</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="future-perspectives">Future Perspectives</h2>

<p>The field continues to evolve with promising developments in:</p>
<ul>
  <li>High-density neural interfaces</li>
  <li>Wireless and miniaturized systems</li>
  <li>Advanced machine learning algorithms</li>
  <li>Enhanced user experience and feedback</li>
  <li>Integration with other assistive technologies</li>
</ul>

<h2 id="references">References</h2>

<ol>
  <li>Wolpaw, J., &amp; Wolpaw, E. W. (Eds.). (2012). Brain-computer interfaces: principles and practice.</li>
  <li>Craik, A., et al. (2019). Deep learning for electroencephalogram (EEG) classification tasks: a review.</li>
  <li>Schwemmer, M. A., et al. (2018). Meeting brain–computer interface user performance expectations.</li>
</ol>]]></content><author><name></name></author><category term="blog" /><category term="BCI" /><category term="Neural Engineering" /><category term="Machine Learning" /><summary type="html"><![CDATA[An overview of recent developments in BCI technology and their applications in neuroscience research]]></summary></entry><entry><title type="html">Introduction to EEG Analysis with Python</title><link href="https://junlinjing.github.io/jjing-neuro/blog/2024/03/introduction-to-eeg-analysis" rel="alternate" type="text/html" title="Introduction to EEG Analysis with Python" /><published>2024-03-20T00:00:00+01:00</published><updated>2024-03-20T00:00:00+01:00</updated><id>https://junlinjing.github.io/jjing-neuro/blog/2024/03/introduction-to-eeg-analysis</id><content type="html" xml:base="https://junlinjing.github.io/jjing-neuro/blog/2024/03/introduction-to-eeg-analysis"><![CDATA[<h1 id="introduction-to-eeg-analysis-with-python">Introduction to EEG Analysis with Python</h1>

<p>Electroencephalography (EEG) is a powerful tool for studying brain activity. In this tutorial, we’ll explore how to analyze EEG data using Python and the popular MNE library.</p>

<h2 id="setting-up-your-environment">Setting Up Your Environment</h2>

<p>First, let’s set up our Python environment with the necessary packages:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">mne</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="c1"># For data visualization
</span><span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
</code></pre></div></div>

<h2 id="loading-and-preprocessing-eeg-data">Loading and Preprocessing EEG Data</h2>

<p>Here’s a basic example of loading and preprocessing EEG data:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Load example data
</span><span class="n">sample_data_folder</span> <span class="o">=</span> <span class="n">mne</span><span class="p">.</span><span class="n">datasets</span><span class="p">.</span><span class="n">sample</span><span class="p">.</span><span class="n">data_path</span><span class="p">()</span>
<span class="n">raw_fname</span> <span class="o">=</span> <span class="n">sample_data_folder</span> <span class="o">+</span> <span class="s">'/MEG/sample/sample_audvis_raw.fif'</span>
<span class="n">raw</span> <span class="o">=</span> <span class="n">mne</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="n">read_raw_fif</span><span class="p">(</span><span class="n">raw_fname</span><span class="p">,</span> <span class="n">preload</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># Basic preprocessing
</span><span class="n">raw</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">40</span><span class="p">)</span>  <span class="c1"># Band-pass filter from 1-40 Hz
</span><span class="n">raw</span><span class="p">.</span><span class="n">notch_filter</span><span class="p">(</span><span class="mi">60</span><span class="p">)</span>  <span class="c1"># Remove power line noise
</span></code></pre></div></div>

<h2 id="analyzing-eeg-data">Analyzing EEG Data</h2>

<p>Let’s look at some basic analysis techniques:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Create epochs
</span><span class="n">events</span> <span class="o">=</span> <span class="n">mne</span><span class="p">.</span><span class="n">find_events</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span>
<span class="n">epochs</span> <span class="o">=</span> <span class="n">mne</span><span class="p">.</span><span class="n">Epochs</span><span class="p">(</span><span class="n">raw</span><span class="p">,</span> <span class="n">events</span><span class="p">,</span> <span class="n">event_id</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">tmin</span><span class="o">=-</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">tmax</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>

<span class="c1"># Calculate and plot evoked response
</span><span class="n">evoked</span> <span class="o">=</span> <span class="n">epochs</span><span class="p">.</span><span class="n">average</span><span class="p">()</span>
<span class="n">evoked</span><span class="p">.</span><span class="n">plot</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="time-frequency-analysis">Time-Frequency Analysis</h2>

<p>Here’s how to perform time-frequency analysis:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">frequencies</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">power</span> <span class="o">=</span> <span class="n">mne</span><span class="p">.</span><span class="n">time_frequency</span><span class="p">.</span><span class="n">tfr_morlet</span><span class="p">(</span><span class="n">epochs</span><span class="p">,</span> <span class="n">frequencies</span><span class="p">,</span> 
                                    <span class="n">n_cycles</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">return_itc</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">power</span><span class="p">.</span><span class="n">plot</span><span class="p">([</span><span class="mi">0</span><span class="p">])</span>
</code></pre></div></div>

<h2 id="eeg-band-analysis">EEG Band Analysis</h2>

<p>A crucial part of EEG analysis is examining different frequency bands:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">analyze_frequency_bands</span><span class="p">(</span><span class="n">raw</span><span class="p">,</span> <span class="n">picks</span><span class="o">=</span><span class="p">[</span><span class="s">'Fz'</span><span class="p">,</span> <span class="s">'Cz'</span><span class="p">,</span> <span class="s">'Pz'</span><span class="p">]):</span>
    <span class="s">"""Analyze standard EEG frequency bands"""</span>
    <span class="c1"># Define frequency bands
</span>    <span class="n">bands</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s">'Delta'</span><span class="p">:</span> <span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span>
        <span class="s">'Theta'</span><span class="p">:</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span>
        <span class="s">'Alpha'</span><span class="p">:</span> <span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">),</span>
        <span class="s">'Beta'</span><span class="p">:</span> <span class="p">(</span><span class="mi">13</span><span class="p">,</span> <span class="mi">30</span><span class="p">),</span>
        <span class="s">'Gamma'</span><span class="p">:</span> <span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="mi">45</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1"># Calculate power spectral density
</span>    <span class="n">psds</span><span class="p">,</span> <span class="n">freqs</span> <span class="o">=</span> <span class="n">mne</span><span class="p">.</span><span class="n">time_frequency</span><span class="p">.</span><span class="n">psd_welch</span><span class="p">(</span><span class="n">raw</span><span class="p">,</span> 
                                              <span class="n">fmin</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span>
                                              <span class="n">fmax</span><span class="o">=</span><span class="mi">45</span><span class="p">,</span>
                                              <span class="n">picks</span><span class="o">=</span><span class="n">picks</span><span class="p">)</span>
    
    <span class="c1"># Calculate band power
</span>    <span class="n">band_powers</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">band</span><span class="p">,</span> <span class="p">(</span><span class="n">fmin</span><span class="p">,</span> <span class="n">fmax</span><span class="p">)</span> <span class="ow">in</span> <span class="n">bands</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
        <span class="n">freq_mask</span> <span class="o">=</span> <span class="p">(</span><span class="n">freqs</span> <span class="o">&gt;=</span> <span class="n">fmin</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">freqs</span> <span class="o">&lt;=</span> <span class="n">fmax</span><span class="p">)</span>
        <span class="n">band_powers</span><span class="p">[</span><span class="n">band</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">psds</span><span class="p">[:,</span> <span class="n">freq_mask</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">band_powers</span>

<span class="c1"># Example visualization
</span><span class="k">def</span> <span class="nf">plot_band_powers</span><span class="p">(</span><span class="n">band_powers</span><span class="p">,</span> <span class="n">channel_names</span><span class="p">):</span>
    <span class="s">"""Plot power in different frequency bands"""</span>
    <span class="n">bands</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">band_powers</span><span class="p">.</span><span class="n">keys</span><span class="p">())</span>
    <span class="n">channels</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">channel_names</span><span class="p">)</span>
    
    <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">bands</span><span class="p">))</span>
    <span class="n">width</span> <span class="o">=</span> <span class="mf">0.8</span> <span class="o">/</span> <span class="n">channels</span>
    
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">channel</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">channel_names</span><span class="p">):</span>
        <span class="n">powers</span> <span class="o">=</span> <span class="p">[</span><span class="n">band_powers</span><span class="p">[</span><span class="n">band</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">band</span> <span class="ow">in</span> <span class="n">bands</span><span class="p">]</span>
        <span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="n">width</span><span class="p">,</span> <span class="n">powers</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="n">channel</span><span class="p">)</span>
    
    <span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Frequency Bands'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Power (µV²/Hz)'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'EEG Band Powers'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">xticks</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">width</span> <span class="o">*</span> <span class="p">(</span><span class="n">channels</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">bands</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="data-quality-assessment">Data Quality Assessment</h2>

<p>Before detailed analysis, it’s important to assess data quality:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">check_data_quality</span><span class="p">(</span><span class="n">raw</span><span class="p">):</span>
    <span class="s">"""Basic data quality checks"""</span>
    <span class="c1"># Check for flat signals
</span>    <span class="n">flat_channels</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">ch_idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">raw</span><span class="p">.</span><span class="n">ch_names</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">np</span><span class="p">.</span><span class="n">std</span><span class="p">(</span><span class="n">raw</span><span class="p">.</span><span class="n">_data</span><span class="p">[</span><span class="n">ch_idx</span><span class="p">])</span> <span class="o">&lt;</span> <span class="mf">1e-6</span><span class="p">:</span>
            <span class="n">flat_channels</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">raw</span><span class="p">.</span><span class="n">ch_names</span><span class="p">[</span><span class="n">ch_idx</span><span class="p">])</span>
    
    <span class="c1"># Check for noisy channels
</span>    <span class="n">noisy_channels</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">zscore_thresh</span> <span class="o">=</span> <span class="mf">4.0</span>
    <span class="k">for</span> <span class="n">ch_idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">raw</span><span class="p">.</span><span class="n">ch_names</span><span class="p">)):</span>
        <span class="n">z_scores</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">stats</span><span class="p">.</span><span class="n">zscore</span><span class="p">(</span><span class="n">raw</span><span class="p">.</span><span class="n">_data</span><span class="p">[</span><span class="n">ch_idx</span><span class="p">]))</span>
        <span class="k">if</span> <span class="n">np</span><span class="p">.</span><span class="nb">any</span><span class="p">(</span><span class="n">z_scores</span> <span class="o">&gt;</span> <span class="n">zscore_thresh</span><span class="p">):</span>
            <span class="n">noisy_channels</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">raw</span><span class="p">.</span><span class="n">ch_names</span><span class="p">[</span><span class="n">ch_idx</span><span class="p">])</span>
    
    <span class="k">return</span> <span class="p">{</span>
        <span class="s">'flat_channels'</span><span class="p">:</span> <span class="n">flat_channels</span><span class="p">,</span>
        <span class="s">'noisy_channels'</span><span class="p">:</span> <span class="n">noisy_channels</span><span class="p">,</span>
        <span class="s">'total_channels'</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">raw</span><span class="p">.</span><span class="n">ch_names</span><span class="p">),</span>
        <span class="s">'duration'</span><span class="p">:</span> <span class="n">raw</span><span class="p">.</span><span class="n">times</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span>
        <span class="s">'sampling_rate'</span><span class="p">:</span> <span class="n">raw</span><span class="p">.</span><span class="n">info</span><span class="p">[</span><span class="s">'sfreq'</span><span class="p">]</span>
    <span class="p">}</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>This introduction covers the basics of EEG analysis with Python. In future posts, we’ll explore more advanced topics like source localization and connectivity analysis.</p>

<h2 id="references">References</h2>

<ol>
  <li>Gramfort, A., et al. (2013). MEG and EEG data analysis with MNE-Python. Frontiers in Neuroscience.</li>
  <li>Cohen, M. X. (2014). Analyzing Neural Time Series Data: Theory and Practice.</li>
</ol>]]></content><author><name></name></author><category term="blog" /><category term="EEG" /><category term="Python" /><category term="Neuroscience" /><summary type="html"><![CDATA[A comprehensive guide to getting started with EEG data analysis using Python and MNE library]]></summary></entry><entry><title type="html">Advanced EEG Data Analysis with Python: From Preprocessing to Machine Learning</title><link href="https://junlinjing.github.io/jjing-neuro/blog/2024/02/eeg-python-tutorial" rel="alternate" type="text/html" title="Advanced EEG Data Analysis with Python: From Preprocessing to Machine Learning" /><published>2024-02-20T10:00:00+01:00</published><updated>2024-02-20T10:00:00+01:00</updated><id>https://junlinjing.github.io/jjing-neuro/blog/2024/02/eeg-python-tutorial</id><content type="html" xml:base="https://junlinjing.github.io/jjing-neuro/blog/2024/02/eeg-python-tutorial"><![CDATA[<h1 id="advanced-eeg-data-analysis-with-python-from-preprocessing-to-machine-learning">Advanced EEG Data Analysis with Python: From Preprocessing to Machine Learning</h1>

<p>Electroencephalography (EEG) data analysis is a crucial skill in modern neuroscience research. This comprehensive tutorial will guide you through advanced techniques for EEG data processing, analysis, and machine learning applications using Python.</p>

<h2 id="prerequisites">Prerequisites</h2>

<ul>
  <li>Basic understanding of Python programming</li>
  <li>Familiarity with signal processing concepts</li>
  <li>Basic knowledge of neuroscience and EEG</li>
</ul>

<h2 id="environment-setup">Environment Setup</h2>

<p>First, create a clean Python environment and install the required packages:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create and activate a new conda environment</span>
conda create <span class="nt">-n</span> eeg_analysis <span class="nv">python</span><span class="o">=</span>3.9
conda activate eeg_analysis

<span class="c"># Install required packages</span>
pip <span class="nb">install </span><span class="nv">mne</span><span class="o">==</span>1.5.1 <span class="nv">numpy</span><span class="o">==</span>1.24.3 <span class="nv">scipy</span><span class="o">==</span>1.11.3 
pip <span class="nb">install </span><span class="nv">matplotlib</span><span class="o">==</span>3.8.0 <span class="nv">pandas</span><span class="o">==</span>2.1.1 <span class="nv">seaborn</span><span class="o">==</span>0.13.0
pip <span class="nb">install </span>scikit-learn<span class="o">==</span>1.3.1 <span class="nv">antropy</span><span class="o">==</span>0.1.6
</code></pre></div></div>

<h2 id="data-acquisition-and-initial-processing">Data Acquisition and Initial Processing</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">mne</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
<span class="kn">from</span> <span class="nn">scipy</span> <span class="kn">import</span> <span class="n">signal</span>
<span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
<span class="kn">import</span> <span class="nn">antropy</span> <span class="k">as</span> <span class="n">ant</span>

<span class="c1"># Set random seed for reproducibility
</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">load_and_prepare_data</span><span class="p">(</span><span class="n">raw_file</span><span class="p">):</span>
    <span class="s">"""
    Load and prepare EEG data with proper documentation
    
    Parameters:
    -----------
    raw_file : str
        Path to the raw EEG data file
        
    Returns:
    --------
    raw : mne.io.Raw
        Loaded and preprocessed EEG data
    """</span>
    <span class="n">raw</span> <span class="o">=</span> <span class="n">mne</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="n">read_raw_fif</span><span class="p">(</span><span class="n">raw_file</span><span class="p">,</span> <span class="n">preload</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">raw</span><span class="p">.</span><span class="n">pick_types</span><span class="p">(</span><span class="n">meg</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">eeg</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">eog</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">raw</span>

<span class="c1"># Example usage
</span><span class="n">raw</span> <span class="o">=</span> <span class="n">load_and_prepare_data</span><span class="p">(</span><span class="s">'sample_audvis_raw.fif'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="advanced-preprocessing-pipeline">Advanced Preprocessing Pipeline</h2>

<h3 id="1-noise-reduction-and-filtering">1. Noise Reduction and Filtering</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">preprocess_eeg</span><span class="p">(</span><span class="n">raw</span><span class="p">,</span> <span class="n">l_freq</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">h_freq</span><span class="o">=</span><span class="mi">40</span><span class="p">,</span> <span class="n">notch_freq</span><span class="o">=</span><span class="mi">50</span><span class="p">):</span>
    <span class="s">"""
    Comprehensive EEG preprocessing pipeline
    
    Parameters:
    -----------
    raw : mne.io.Raw
        Raw EEG data
    l_freq : float
        Lower frequency bound for bandpass filter
    h_freq : float
        Upper frequency bound for bandpass filter
    notch_freq : float
        Frequency for notch filter (usually power line frequency)
    
    Returns:
    --------
    raw : mne.io.Raw
        Preprocessed EEG data
    """</span>
    <span class="c1"># Apply notch filter for power line interference
</span>    <span class="n">raw</span><span class="p">.</span><span class="n">notch_filter</span><span class="p">(</span><span class="n">freqs</span><span class="o">=</span><span class="n">notch_freq</span><span class="p">)</span>
    
    <span class="c1"># Apply bandpass filter
</span>    <span class="n">raw</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">l_freq</span><span class="o">=</span><span class="n">l_freq</span><span class="p">,</span> <span class="n">h_freq</span><span class="o">=</span><span class="n">h_freq</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">raw</span>
</code></pre></div></div>

<h3 id="2-advanced-artifact-removal">2. Advanced Artifact Removal</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">remove_artifacts</span><span class="p">(</span><span class="n">raw</span><span class="p">,</span> <span class="n">n_components</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">):</span>
    <span class="s">"""
    Advanced artifact removal using ICA and automated component selection
    """</span>
    <span class="c1"># Prepare ICA
</span>    <span class="n">ica</span> <span class="o">=</span> <span class="n">mne</span><span class="p">.</span><span class="n">preprocessing</span><span class="p">.</span><span class="n">ICA</span><span class="p">(</span>
        <span class="n">n_components</span><span class="o">=</span><span class="n">n_components</span><span class="p">,</span>
        <span class="n">random_state</span><span class="o">=</span><span class="n">random_state</span><span class="p">,</span>
        <span class="n">method</span><span class="o">=</span><span class="s">'fastica'</span>
    <span class="p">)</span>
    
    <span class="c1"># Fit ICA
</span>    <span class="n">ica</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span>
    
    <span class="c1"># Automatically detect eye blink components
</span>    <span class="n">eog_indices</span><span class="p">,</span> <span class="n">eog_scores</span> <span class="o">=</span> <span class="n">ica</span><span class="p">.</span><span class="n">find_bads_eog</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span>
    
    <span class="c1"># Detect and remove additional artifact components
</span>    <span class="n">ica</span><span class="p">.</span><span class="n">exclude</span> <span class="o">=</span> <span class="n">eog_indices</span>
    
    <span class="c1"># Apply ICA
</span>    <span class="n">raw_clean</span> <span class="o">=</span> <span class="n">raw</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
    <span class="n">ica</span><span class="p">.</span><span class="nb">apply</span><span class="p">(</span><span class="n">raw_clean</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">raw_clean</span><span class="p">,</span> <span class="n">ica</span>
</code></pre></div></div>

<h2 id="feature-engineering">Feature Engineering</h2>

<h3 id="1-advanced-time-frequency-analysis">1. Advanced Time-Frequency Analysis</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">extract_advanced_features</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">fs</span><span class="p">,</span> <span class="n">bands</span><span class="p">):</span>
    <span class="s">"""
    Extract comprehensive EEG features including:
    - Band powers
    - Spectral entropy
    - Hjorth parameters
    - Sample entropy
    """</span>
    <span class="n">features</span> <span class="o">=</span> <span class="p">{}</span>
    
    <span class="c1"># Compute band powers
</span>    <span class="k">for</span> <span class="n">band_name</span><span class="p">,</span> <span class="p">(</span><span class="n">fmin</span><span class="p">,</span> <span class="n">fmax</span><span class="p">)</span> <span class="ow">in</span> <span class="n">bands</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
        <span class="n">freqs</span><span class="p">,</span> <span class="n">psd</span> <span class="o">=</span> <span class="n">signal</span><span class="p">.</span><span class="n">welch</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">fs</span><span class="p">,</span> <span class="n">nperseg</span><span class="o">=</span><span class="n">fs</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>
        <span class="n">idx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">logical_and</span><span class="p">(</span><span class="n">freqs</span> <span class="o">&gt;=</span> <span class="n">fmin</span><span class="p">,</span> <span class="n">freqs</span> <span class="o">&lt;=</span> <span class="n">fmax</span><span class="p">)</span>
        <span class="n">features</span><span class="p">[</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">band_name</span><span class="si">}</span><span class="s">_power'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">psd</span><span class="p">[:,</span> <span class="n">idx</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    
    <span class="c1"># Compute spectral entropy
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
        <span class="n">features</span><span class="p">[</span><span class="sa">f</span><span class="s">'spectral_entropy_ch</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">ant</span><span class="p">.</span><span class="n">spectral_entropy</span><span class="p">(</span>
            <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">fs</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="s">'welch'</span>
        <span class="p">)</span>
    
    <span class="c1"># Compute Hjorth parameters
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
        <span class="n">activity</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">var</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="n">mobility</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">var</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">diff</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span> <span class="o">/</span> <span class="n">activity</span><span class="p">)</span>
        <span class="n">complexity</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span>
            <span class="n">np</span><span class="p">.</span><span class="n">var</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">diff</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">diff</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">])))</span> <span class="o">*</span> <span class="n">activity</span> <span class="o">/</span>
            <span class="n">np</span><span class="p">.</span><span class="n">var</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">diff</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>
        <span class="p">)</span>
        <span class="n">features</span><span class="p">[</span><span class="sa">f</span><span class="s">'hjorth_activity_ch</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">activity</span>
        <span class="n">features</span><span class="p">[</span><span class="sa">f</span><span class="s">'hjorth_mobility_ch</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">mobility</span>
        <span class="n">features</span><span class="p">[</span><span class="sa">f</span><span class="s">'hjorth_complexity_ch</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">complexity</span>
    
    <span class="k">return</span> <span class="n">features</span>
</code></pre></div></div>

<h3 id="2-connectivity-analysis">2. Connectivity Analysis</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">compute_connectivity</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">sfreq</span><span class="p">,</span> <span class="n">fmin</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">fmax</span><span class="o">=</span><span class="mi">13</span><span class="p">):</span>
    <span class="s">"""
    Compute advanced connectivity metrics
    """</span>
    <span class="kn">from</span> <span class="nn">mne.connectivity</span> <span class="kn">import</span> <span class="n">spectral_connectivity</span>
    
    <span class="c1"># Compute WPLI connectivity
</span>    <span class="n">con</span> <span class="o">=</span> <span class="n">spectral_connectivity</span><span class="p">(</span>
        <span class="n">data</span><span class="p">,</span>
        <span class="n">method</span><span class="o">=</span><span class="s">'wpli'</span><span class="p">,</span>
        <span class="n">mode</span><span class="o">=</span><span class="s">'multitaper'</span><span class="p">,</span>
        <span class="n">sfreq</span><span class="o">=</span><span class="n">sfreq</span><span class="p">,</span>
        <span class="n">fmin</span><span class="o">=</span><span class="n">fmin</span><span class="p">,</span>
        <span class="n">fmax</span><span class="o">=</span><span class="n">fmax</span><span class="p">,</span>
        <span class="n">faverage</span><span class="o">=</span><span class="bp">True</span>
    <span class="p">)</span>
    
    <span class="c1"># Compute additional connectivity metrics
</span>    <span class="n">con_pli</span> <span class="o">=</span> <span class="n">spectral_connectivity</span><span class="p">(</span>
        <span class="n">data</span><span class="p">,</span>
        <span class="n">method</span><span class="o">=</span><span class="s">'pli'</span><span class="p">,</span>
        <span class="n">mode</span><span class="o">=</span><span class="s">'multitaper'</span><span class="p">,</span>
        <span class="n">sfreq</span><span class="o">=</span><span class="n">sfreq</span><span class="p">,</span>
        <span class="n">fmin</span><span class="o">=</span><span class="n">fmin</span><span class="p">,</span>
        <span class="n">fmax</span><span class="o">=</span><span class="n">fmax</span><span class="p">,</span>
        <span class="n">faverage</span><span class="o">=</span><span class="bp">True</span>
    <span class="p">)</span>
    
    <span class="k">return</span> <span class="n">con</span><span class="p">,</span> <span class="n">con_pli</span>
</code></pre></div></div>

<h2 id="advanced-visualization">Advanced Visualization</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create_advanced_visualization</span><span class="p">(</span><span class="n">raw</span><span class="p">,</span> <span class="n">features</span><span class="p">,</span> <span class="n">bands</span><span class="p">):</span>
    <span class="s">"""
    Create comprehensive EEG visualizations
    """</span>
    <span class="c1"># Create figure with subplots
</span>    <span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>
    
    <span class="c1"># Plot 1: Time series
</span>    <span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">221</span><span class="p">)</span>
    <span class="n">raw</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">duration</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">n_channels</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">)</span>
    
    <span class="c1"># Plot 2: Topographic map
</span>    <span class="n">ax2</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">222</span><span class="p">)</span>
    <span class="n">mne</span><span class="p">.</span><span class="n">viz</span><span class="p">.</span><span class="n">plot_topomap</span><span class="p">(</span><span class="n">features</span><span class="p">[</span><span class="s">'alpha_power'</span><span class="p">],</span> <span class="n">raw</span><span class="p">.</span><span class="n">info</span><span class="p">,</span> <span class="n">axes</span><span class="o">=</span><span class="n">ax2</span><span class="p">)</span>
    
    <span class="c1"># Plot 3: Connectivity matrix
</span>    <span class="n">ax3</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">223</span><span class="p">)</span>
    <span class="n">sns</span><span class="p">.</span><span class="n">heatmap</span><span class="p">(</span><span class="n">features</span><span class="p">[</span><span class="s">'connectivity'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax3</span><span class="p">)</span>
    
    <span class="c1"># Plot 4: Band powers
</span>    <span class="n">ax4</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">224</span><span class="p">)</span>
    <span class="n">plot_band_powers</span><span class="p">(</span><span class="n">features</span><span class="p">,</span> <span class="n">bands</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax4</span><span class="p">)</span>
    
    <span class="n">plt</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">fig</span>
</code></pre></div></div>

<h2 id="machine-learning-pipeline">Machine Learning Pipeline</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sklearn.pipeline</span> <span class="kn">import</span> <span class="n">Pipeline</span>
<span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
<span class="kn">from</span> <span class="nn">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">RandomForestClassifier</span>
<span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">cross_val_score</span>

<span class="k">def</span> <span class="nf">create_ml_pipeline</span><span class="p">(</span><span class="n">features</span><span class="p">,</span> <span class="n">labels</span><span class="p">):</span>
    <span class="s">"""
    Create and evaluate a machine learning pipeline for EEG classification
    """</span>
    <span class="c1"># Create pipeline
</span>    <span class="n">pipeline</span> <span class="o">=</span> <span class="n">Pipeline</span><span class="p">([</span>
        <span class="p">(</span><span class="s">'scaler'</span><span class="p">,</span> <span class="n">StandardScaler</span><span class="p">()),</span>
        <span class="p">(</span><span class="s">'classifier'</span><span class="p">,</span> <span class="n">RandomForestClassifier</span><span class="p">(</span>
            <span class="n">n_estimators</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span>
            <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">,</span>
            <span class="n">class_weight</span><span class="o">=</span><span class="s">'balanced'</span>
        <span class="p">))</span>
    <span class="p">])</span>
    
    <span class="c1"># Perform cross-validation
</span>    <span class="n">scores</span> <span class="o">=</span> <span class="n">cross_val_score</span><span class="p">(</span>
        <span class="n">pipeline</span><span class="p">,</span>
        <span class="n">features</span><span class="p">,</span>
        <span class="n">labels</span><span class="p">,</span>
        <span class="n">cv</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>
        <span class="n">scoring</span><span class="o">=</span><span class="s">'balanced_accuracy'</span>
    <span class="p">)</span>
    
    <span class="k">return</span> <span class="n">pipeline</span><span class="p">,</span> <span class="n">scores</span>
</code></pre></div></div>

<h2 id="example-application-motor-imagery-classification">Example Application: Motor Imagery Classification</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">motor_imagery_analysis</span><span class="p">():</span>
    <span class="s">"""
    Complete example of motor imagery classification
    """</span>
    <span class="c1"># Load motor imagery data
</span>    <span class="n">raw</span> <span class="o">=</span> <span class="n">mne</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="n">read_raw_fif</span><span class="p">(</span><span class="s">'motor_imagery_data.fif'</span><span class="p">,</span> <span class="n">preload</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    
    <span class="c1"># Preprocess data
</span>    <span class="n">raw_clean</span> <span class="o">=</span> <span class="n">preprocess_eeg</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span>
    
    <span class="c1"># Extract features
</span>    <span class="n">features</span> <span class="o">=</span> <span class="n">extract_advanced_features</span><span class="p">(</span><span class="n">raw_clean</span><span class="p">.</span><span class="n">get_data</span><span class="p">(),</span> <span class="n">raw</span><span class="p">.</span><span class="n">info</span><span class="p">[</span><span class="s">'sfreq'</span><span class="p">])</span>
    
    <span class="c1"># Create and evaluate ML pipeline
</span>    <span class="n">pipeline</span><span class="p">,</span> <span class="n">scores</span> <span class="o">=</span> <span class="n">create_ml_pipeline</span><span class="p">(</span><span class="n">features</span><span class="p">,</span> <span class="n">labels</span><span class="p">)</span>
    
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Cross-validation scores: </span><span class="si">{</span><span class="n">scores</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span><span class="si">:</span><span class="p">.</span><span class="mi">3</span><span class="n">f</span><span class="si">}</span><span class="s"> (+/- </span><span class="si">{</span><span class="n">scores</span><span class="p">.</span><span class="n">std</span><span class="p">()</span><span class="o">*</span><span class="mi">2</span><span class="si">:</span><span class="p">.</span><span class="mi">3</span><span class="n">f</span><span class="si">}</span><span class="s">)"</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">pipeline</span><span class="p">,</span> <span class="n">scores</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>This advanced tutorial has covered:</p>
<ol>
  <li>Professional-grade preprocessing techniques</li>
  <li>Advanced feature extraction methods</li>
  <li>Comprehensive visualization approaches</li>
  <li>Robust machine learning pipeline development</li>
  <li>Real-world application example</li>
</ol>

<p>The complete implementation, including additional examples and datasets, is available in our <a href="https://github.com/research-lab/advanced-eeg-analysis">GitHub repository</a>.</p>

<h2 id="references">References</h2>

<ol>
  <li>Gramfort, A., et al. (2023). “MNE-Python: State-of-the-art MEG/EEG analysis in Python”</li>
  <li>Cohen, M. X. (2022). “A deep dive into neural time series analysis”</li>
  <li>Makeig, S., et al. (2021). “Advanced methods in EEG/MEG analysis”</li>
  <li>Lotte, F., et al. (2023). “A review of classification algorithms for EEG-based brain-computer interfaces”</li>
</ol>]]></content><author><name>researcher</name></author><category term="blog" /><category term="python" /><category term="neuroscience" /><category term="EEG" /><category term="tutorial" /><category term="machine learning" /><category term="signal processing" /><summary type="html"><![CDATA[A comprehensive guide to analyzing EEG data using Python, covering advanced preprocessing techniques, feature extraction, and machine learning applications]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://junlinjing.github.io/jjing-neuro/assets/images/blog/2024/eeg-python-tutorial.jpg" /><media:content medium="image" url="https://junlinjing.github.io/jjing-neuro/assets/images/blog/2024/eeg-python-tutorial.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Applications of Deep Learning in EEG Signal Processing</title><link href="https://junlinjing.github.io/jjing-neuro/blog/2024/01/deep-learning-eeg" rel="alternate" type="text/html" title="Applications of Deep Learning in EEG Signal Processing" /><published>2024-01-15T00:00:00+01:00</published><updated>2024-01-15T00:00:00+01:00</updated><id>https://junlinjing.github.io/jjing-neuro/blog/2024/01/deep-learning-eeg</id><content type="html" xml:base="https://junlinjing.github.io/jjing-neuro/blog/2024/01/deep-learning-eeg"><![CDATA[<h1 id="applications-of-deep-learning-in-eeg-signal-processing">Applications of Deep Learning in EEG Signal Processing</h1>

<p>Deep learning has revolutionized how we process and analyze EEG signals. This article explores various deep learning approaches for EEG analysis.</p>

<h2 id="introduction-to-deep-learning-for-eeg">Introduction to Deep Learning for EEG</h2>

<p>Deep learning models can automatically learn hierarchical features from raw EEG data, often outperforming traditional methods that rely on hand-crafted features.</p>

<h2 id="convolutional-neural-networks-for-eeg">Convolutional Neural Networks for EEG</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">torch</span>
<span class="kn">import</span> <span class="nn">torch.nn</span> <span class="k">as</span> <span class="n">nn</span>

<span class="k">class</span> <span class="nc">EEGConvNet</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n_channels</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span> <span class="n">n_classes</span><span class="o">=</span><span class="mi">4</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">EEGConvNet</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">__init__</span><span class="p">()</span>
        
        <span class="c1"># Temporal convolution
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">temporal_conv</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">64</span><span class="p">),</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">BatchNorm2d</span><span class="p">(</span><span class="mi">16</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)</span>
        <span class="p">)</span>
        
        <span class="c1"># Spatial convolution
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">spatial_conv</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="p">(</span><span class="n">n_channels</span><span class="p">,</span> <span class="mi">1</span><span class="p">)),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">BatchNorm2d</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)</span>
        <span class="p">)</span>
        
        <span class="c1"># Classification head
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">classifier</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">AdaptiveAvgPool2d</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">120</span><span class="p">)),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Flatten</span><span class="p">(),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">32</span> <span class="o">*</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">64</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.5</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="n">n_classes</span><span class="p">)</span>
        <span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="c1"># x shape: (batch, 1, channels, time)
</span>        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">temporal_conv</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">spatial_conv</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">classifier</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="recurrent-neural-networks-for-eeg">Recurrent Neural Networks for EEG</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">EEGlstm</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">input_size</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span> <span class="n">hidden_size</span><span class="o">=</span><span class="mi">64</span><span class="p">,</span> <span class="n">num_layers</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">n_classes</span><span class="o">=</span><span class="mi">4</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">EEGlstm</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">__init__</span><span class="p">()</span>
        
        <span class="bp">self</span><span class="p">.</span><span class="n">lstm</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">LSTM</span><span class="p">(</span>
            <span class="n">input_size</span><span class="o">=</span><span class="n">input_size</span><span class="p">,</span>
            <span class="n">hidden_size</span><span class="o">=</span><span class="n">hidden_size</span><span class="p">,</span>
            <span class="n">num_layers</span><span class="o">=</span><span class="n">num_layers</span><span class="p">,</span>
            <span class="n">batch_first</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
            <span class="n">dropout</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span>
            <span class="n">bidirectional</span><span class="o">=</span><span class="bp">True</span>
        <span class="p">)</span>
        
        <span class="bp">self</span><span class="p">.</span><span class="n">classifier</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="n">hidden_size</span> <span class="o">*</span> <span class="mi">2</span><span class="p">,</span> <span class="n">hidden_size</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.5</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="n">hidden_size</span><span class="p">,</span> <span class="n">n_classes</span><span class="p">)</span>
        <span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="c1"># x shape: (batch, time, channels)
</span>        <span class="n">lstm_out</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">lstm</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="c1"># Use last time step output
</span>        <span class="n">last_hidden</span> <span class="o">=</span> <span class="n">lstm_out</span><span class="p">[:,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">:]</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">classifier</span><span class="p">(</span><span class="n">last_hidden</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="transformer-models-for-eeg">Transformer Models for EEG</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">EEGTransformer</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n_channels</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span> <span class="n">n_timepoints</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span> <span class="n">n_classes</span><span class="o">=</span><span class="mi">4</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">EEGTransformer</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">__init__</span><span class="p">()</span>
        
        <span class="c1"># Positional encoding
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">pos_encoder</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Parameter</span><span class="p">(</span>
            <span class="n">torch</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n_timepoints</span><span class="p">,</span> <span class="n">n_channels</span><span class="p">)</span>
        <span class="p">)</span>
        
        <span class="c1"># Transformer encoder
</span>        <span class="n">encoder_layer</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">TransformerEncoderLayer</span><span class="p">(</span>
            <span class="n">d_model</span><span class="o">=</span><span class="n">n_channels</span><span class="p">,</span>
            <span class="n">nhead</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span>
            <span class="n">dim_feedforward</span><span class="o">=</span><span class="mi">128</span><span class="p">,</span>
            <span class="n">dropout</span><span class="o">=</span><span class="mf">0.1</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">transformer</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">TransformerEncoder</span><span class="p">(</span>
            <span class="n">encoder_layer</span><span class="p">,</span>
            <span class="n">num_layers</span><span class="o">=</span><span class="mi">4</span>
        <span class="p">)</span>
        
        <span class="c1"># Classification head
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">classifier</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="n">n_channels</span> <span class="o">*</span> <span class="n">n_timepoints</span><span class="p">,</span> <span class="mi">256</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.5</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">256</span><span class="p">,</span> <span class="n">n_classes</span><span class="p">)</span>
        <span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="c1"># Add positional encoding
</span>        <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="bp">self</span><span class="p">.</span><span class="n">pos_encoder</span>
        <span class="c1"># Transform
</span>        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">transformer</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="c1"># Classify
</span>        <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">classifier</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="data-preprocessing-for-deep-learning">Data Preprocessing for Deep Learning</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">preprocess_eeg</span><span class="p">(</span><span class="n">raw_eeg</span><span class="p">,</span> <span class="n">sfreq</span><span class="o">=</span><span class="mi">250</span><span class="p">):</span>
    <span class="s">"""Preprocess EEG data for deep learning"""</span>
    <span class="c1"># Bandpass filter
</span>    <span class="n">filtered</span> <span class="o">=</span> <span class="n">mne</span><span class="p">.</span><span class="nb">filter</span><span class="p">.</span><span class="n">filter_data</span><span class="p">(</span>
        <span class="n">raw_eeg</span><span class="p">,</span>
        <span class="n">sfreq</span><span class="o">=</span><span class="n">sfreq</span><span class="p">,</span>
        <span class="n">l_freq</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
        <span class="n">h_freq</span><span class="o">=</span><span class="mi">40</span>
    <span class="p">)</span>
    
    <span class="c1"># Normalize
</span>    <span class="n">normalized</span> <span class="o">=</span> <span class="p">(</span><span class="n">filtered</span> <span class="o">-</span> <span class="n">filtered</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">keepdims</span><span class="o">=</span><span class="bp">True</span><span class="p">))</span> <span class="o">/</span> \
                 <span class="n">filtered</span><span class="p">.</span><span class="n">std</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">keepdims</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    
    <span class="c1"># Segment into epochs
</span>    <span class="n">epochs</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">window_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">sfreq</span><span class="p">)</span>  <span class="c1"># 2-second windows
</span>    <span class="n">stride</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mf">0.5</span> <span class="o">*</span> <span class="n">sfreq</span><span class="p">)</span>     <span class="c1"># 0.5-second stride
</span>    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">normalized</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">window_size</span><span class="p">,</span> <span class="n">stride</span><span class="p">):</span>
        <span class="n">epochs</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalized</span><span class="p">[:,</span> <span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="n">window_size</span><span class="p">])</span>
    
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">epochs</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="training-pipeline">Training Pipeline</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">train_eeg_model</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">train_loader</span><span class="p">,</span> <span class="n">val_loader</span><span class="p">,</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">100</span><span class="p">):</span>
    <span class="s">"""Train deep learning model on EEG data"""</span>
    <span class="n">criterion</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">CrossEntropyLoss</span><span class="p">()</span>
    <span class="n">optimizer</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">optim</span><span class="p">.</span><span class="n">Adam</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="n">parameters</span><span class="p">(),</span> <span class="n">lr</span><span class="o">=</span><span class="mf">0.001</span><span class="p">)</span>
    <span class="n">scheduler</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">optim</span><span class="p">.</span><span class="n">lr_scheduler</span><span class="p">.</span><span class="n">ReduceLROnPlateau</span><span class="p">(</span>
        <span class="n">optimizer</span><span class="p">,</span>
        <span class="n">mode</span><span class="o">=</span><span class="s">'min'</span><span class="p">,</span>
        <span class="n">factor</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span>
        <span class="n">patience</span><span class="o">=</span><span class="mi">5</span>
    <span class="p">)</span>
    
    <span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">epochs</span><span class="p">):</span>
        <span class="c1"># Training
</span>        <span class="n">model</span><span class="p">.</span><span class="n">train</span><span class="p">()</span>
        <span class="n">train_loss</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">data</span><span class="p">,</span> <span class="n">labels</span> <span class="ow">in</span> <span class="n">train_loader</span><span class="p">:</span>
            <span class="n">optimizer</span><span class="p">.</span><span class="n">zero_grad</span><span class="p">()</span>
            <span class="n">outputs</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="n">loss</span> <span class="o">=</span> <span class="n">criterion</span><span class="p">(</span><span class="n">outputs</span><span class="p">,</span> <span class="n">labels</span><span class="p">)</span>
            <span class="n">loss</span><span class="p">.</span><span class="n">backward</span><span class="p">()</span>
            <span class="n">optimizer</span><span class="p">.</span><span class="n">step</span><span class="p">()</span>
            <span class="n">train_loss</span> <span class="o">+=</span> <span class="n">loss</span><span class="p">.</span><span class="n">item</span><span class="p">()</span>
            
        <span class="c1"># Validation
</span>        <span class="n">model</span><span class="p">.</span><span class="nb">eval</span><span class="p">()</span>
        <span class="n">val_loss</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">correct</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">with</span> <span class="n">torch</span><span class="p">.</span><span class="n">no_grad</span><span class="p">():</span>
            <span class="k">for</span> <span class="n">data</span><span class="p">,</span> <span class="n">labels</span> <span class="ow">in</span> <span class="n">val_loader</span><span class="p">:</span>
                <span class="n">outputs</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
                <span class="n">loss</span> <span class="o">=</span> <span class="n">criterion</span><span class="p">(</span><span class="n">outputs</span><span class="p">,</span> <span class="n">labels</span><span class="p">)</span>
                <span class="n">val_loss</span> <span class="o">+=</span> <span class="n">loss</span><span class="p">.</span><span class="n">item</span><span class="p">()</span>
                <span class="n">_</span><span class="p">,</span> <span class="n">predicted</span> <span class="o">=</span> <span class="n">outputs</span><span class="p">.</span><span class="nb">max</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
                <span class="n">total</span> <span class="o">+=</span> <span class="n">labels</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
                <span class="n">correct</span> <span class="o">+=</span> <span class="n">predicted</span><span class="p">.</span><span class="n">eq</span><span class="p">(</span><span class="n">labels</span><span class="p">).</span><span class="nb">sum</span><span class="p">().</span><span class="n">item</span><span class="p">()</span>
                
        <span class="c1"># Update learning rate
</span>        <span class="n">scheduler</span><span class="p">.</span><span class="n">step</span><span class="p">(</span><span class="n">val_loss</span><span class="p">)</span>
        
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Epoch </span><span class="si">{</span><span class="n">epoch</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">epochs</span><span class="si">}</span><span class="s">:'</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Train Loss: </span><span class="si">{</span><span class="n">train_loss</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">train_loader</span><span class="p">)</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Val Loss: </span><span class="si">{</span><span class="n">val_loss</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">val_loader</span><span class="p">)</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Val Accuracy: </span><span class="si">{</span><span class="mf">100.</span><span class="o">*</span><span class="n">correct</span><span class="o">/</span><span class="n">total</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s">%'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="best-practices">Best Practices</h2>

<ol>
  <li><strong>Data Augmentation</strong>
    <ul>
      <li>Time shifting</li>
      <li>Adding noise</li>
      <li>Channel dropout</li>
      <li>Frequency warping</li>
    </ul>
  </li>
  <li><strong>Model Selection</strong>
    <ul>
      <li>CNNs for spatial-temporal patterns</li>
      <li>RNNs for sequential dependencies</li>
      <li>Transformers for long-range dependencies</li>
    </ul>
  </li>
  <li><strong>Training Tips</strong>
    <ul>
      <li>Use appropriate batch size</li>
      <li>Apply learning rate scheduling</li>
      <li>Implement early stopping</li>
      <li>Use proper validation strategy</li>
    </ul>
  </li>
</ol>

<h2 id="future-directions">Future Directions</h2>

<ol>
  <li><strong>Self-supervised Learning</strong>
    <ul>
      <li>Contrastive learning</li>
      <li>Masked signal modeling</li>
      <li>Signal reconstruction</li>
    </ul>
  </li>
  <li><strong>Transfer Learning</strong>
    <ul>
      <li>Cross-subject adaptation</li>
      <li>Cross-dataset generalization</li>
      <li>Domain adaptation</li>
    </ul>
  </li>
  <li><strong>Interpretability</strong>
    <ul>
      <li>Attention visualization</li>
      <li>Layer-wise relevance propagation</li>
      <li>Saliency mapping</li>
    </ul>
  </li>
</ol>

<h2 id="references">References</h2>

<ol>
  <li>Craik, A., et al. (2019). “Deep learning for electroencephalogram (EEG) classification tasks: a review.”</li>
  <li>Roy, Y., et al. (2019). “Deep learning-based electroencephalography analysis: a systematic review.”</li>
  <li>Zhang, X., et al. (2021). “Deep learning for EEG-based brain-computer interfaces: A review.”</li>
</ol>]]></content><author><name>jimjing</name></author><category term="blog" /><category term="Deep Learning" /><category term="EEG" /><category term="Neural Networks" /><category term="Signal Processing" /><summary type="html"><![CDATA[Exploring how to use deep learning models to process and analyze EEG signal data, including signal preprocessing, feature extraction, and classification methods.]]></summary></entry><entry><title type="html">Cognitive Modeling: From Theory to Practice</title><link href="https://junlinjing.github.io/jjing-neuro/blog/2023/12/cognitive-modeling" rel="alternate" type="text/html" title="Cognitive Modeling: From Theory to Practice" /><published>2023-12-20T00:00:00+01:00</published><updated>2023-12-20T00:00:00+01:00</updated><id>https://junlinjing.github.io/jjing-neuro/blog/2023/12/cognitive-modeling</id><content type="html" xml:base="https://junlinjing.github.io/jjing-neuro/blog/2023/12/cognitive-modeling"><![CDATA[<h1 id="cognitive-modeling-from-theory-to-practice">Cognitive Modeling: From Theory to Practice</h1>

<p>Cognitive modeling is a powerful approach to understanding human cognition by creating computational models that simulate cognitive processes.</p>

<h2 id="introduction-to-cognitive-modeling">Introduction to Cognitive Modeling</h2>

<p>Cognitive models aim to explain and predict human behavior by implementing theoretical frameworks in computational form. These models help bridge the gap between cognitive theory and empirical data.</p>

<h2 id="basic-modeling-approaches">Basic Modeling Approaches</h2>

<h3 id="1-production-systems">1. Production Systems</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ProductionSystem</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">working_memory</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">production_rules</span> <span class="o">=</span> <span class="p">[]</span>
        
    <span class="k">def</span> <span class="nf">add_rule</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">condition</span><span class="p">,</span> <span class="n">action</span><span class="p">):</span>
        <span class="s">"""Add a production rule"""</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">production_rules</span><span class="p">.</span><span class="n">append</span><span class="p">({</span>
            <span class="s">'condition'</span><span class="p">:</span> <span class="n">condition</span><span class="p">,</span>
            <span class="s">'action'</span><span class="p">:</span> <span class="n">action</span>
        <span class="p">})</span>
        
    <span class="k">def</span> <span class="nf">match_rules</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"""Find matching rules based on working memory"""</span>
        <span class="n">matches</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">rule</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">production_rules</span><span class="p">:</span>
            <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">evaluate_condition</span><span class="p">(</span><span class="n">rule</span><span class="p">[</span><span class="s">'condition'</span><span class="p">]):</span>
                <span class="n">matches</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">rule</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">matches</span>
    
    <span class="k">def</span> <span class="nf">evaluate_condition</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">condition</span><span class="p">):</span>
        <span class="s">"""Evaluate if a condition matches working memory"""</span>
        <span class="k">return</span> <span class="nb">all</span><span class="p">(</span>
            <span class="n">key</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">working_memory</span> <span class="ow">and</span> 
            <span class="bp">self</span><span class="p">.</span><span class="n">working_memory</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">==</span> <span class="n">value</span>
            <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">condition</span><span class="p">.</span><span class="n">items</span><span class="p">()</span>
        <span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">execute_action</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">action</span><span class="p">):</span>
        <span class="s">"""Execute the action of a production rule"""</span>
        <span class="k">for</span> <span class="n">operation</span><span class="p">,</span> <span class="n">params</span> <span class="ow">in</span> <span class="n">action</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">operation</span> <span class="o">==</span> <span class="s">'add'</span><span class="p">:</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">working_memory</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
            <span class="k">elif</span> <span class="n">operation</span> <span class="o">==</span> <span class="s">'remove'</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">params</span><span class="p">:</span>
                    <span class="bp">self</span><span class="p">.</span><span class="n">working_memory</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="2-neural-networks-for-cognitive-modeling">2. Neural Networks for Cognitive Modeling</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">torch</span>
<span class="kn">import</span> <span class="nn">torch.nn</span> <span class="k">as</span> <span class="n">nn</span>

<span class="k">class</span> <span class="nc">CognitiveNetwork</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">input_size</span><span class="p">,</span> <span class="n">hidden_size</span><span class="p">,</span> <span class="n">output_size</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">CognitiveNetwork</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">__init__</span><span class="p">()</span>
        
        <span class="bp">self</span><span class="p">.</span><span class="n">encoder</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="n">input_size</span><span class="p">,</span> <span class="n">hidden_size</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.3</span><span class="p">)</span>
        <span class="p">)</span>
        
        <span class="bp">self</span><span class="p">.</span><span class="n">memory</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">LSTM</span><span class="p">(</span>
            <span class="n">hidden_size</span><span class="p">,</span>
            <span class="n">hidden_size</span><span class="p">,</span>
            <span class="n">num_layers</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
            <span class="n">batch_first</span><span class="o">=</span><span class="bp">True</span>
        <span class="p">)</span>
        
        <span class="bp">self</span><span class="p">.</span><span class="n">decoder</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="n">hidden_size</span><span class="p">,</span> <span class="n">hidden_size</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="n">hidden_size</span><span class="p">,</span> <span class="n">output_size</span><span class="p">)</span>
        <span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">hidden</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="c1"># Encode input
</span>        <span class="n">encoded</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">encoder</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        
        <span class="c1"># Process through memory
</span>        <span class="k">if</span> <span class="n">hidden</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">memory_out</span><span class="p">,</span> <span class="n">hidden</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">memory</span><span class="p">(</span><span class="n">encoded</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">memory_out</span><span class="p">,</span> <span class="n">hidden</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">memory</span><span class="p">(</span><span class="n">encoded</span><span class="p">,</span> <span class="n">hidden</span><span class="p">)</span>
            
        <span class="c1"># Decode output
</span>        <span class="n">output</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">decoder</span><span class="p">(</span><span class="n">memory_out</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">output</span><span class="p">,</span> <span class="n">hidden</span>
</code></pre></div></div>

<h2 id="decision-making-models">Decision Making Models</h2>

<h3 id="drift-diffusion-model">Drift Diffusion Model</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="k">def</span> <span class="nf">drift_diffusion_model</span><span class="p">(</span><span class="n">drift_rate</span><span class="p">,</span> <span class="n">threshold</span><span class="p">,</span> <span class="n">noise_std</span><span class="p">,</span> <span class="n">max_steps</span><span class="p">):</span>
    <span class="s">"""Simulate decision making using drift diffusion"""</span>
    <span class="n">evidence</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">step</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_steps</span><span class="p">):</span>
        <span class="c1"># Add evidence and noise
</span>        <span class="n">evidence</span> <span class="o">+=</span> <span class="n">drift_rate</span> <span class="o">+</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">noise_std</span><span class="p">)</span>
        
        <span class="c1"># Check if threshold is reached
</span>        <span class="k">if</span> <span class="nb">abs</span><span class="p">(</span><span class="n">evidence</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">threshold</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span>
                <span class="s">'decision'</span><span class="p">:</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">evidence</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span><span class="p">,</span>
                <span class="s">'reaction_time'</span><span class="p">:</span> <span class="n">step</span><span class="p">,</span>
                <span class="s">'final_evidence'</span><span class="p">:</span> <span class="n">evidence</span>
            <span class="p">}</span>
    
    <span class="c1"># No decision reached
</span>    <span class="k">return</span> <span class="p">{</span>
        <span class="s">'decision'</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
        <span class="s">'reaction_time'</span><span class="p">:</span> <span class="n">max_steps</span><span class="p">,</span>
        <span class="s">'final_evidence'</span><span class="p">:</span> <span class="n">evidence</span>
    <span class="p">}</span>
</code></pre></div></div>

<h2 id="learning-and-memory-models">Learning and Memory Models</h2>

<h3 id="working-memory-model">Working Memory Model</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">WorkingMemoryModel</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">capacity</span><span class="o">=</span><span class="mi">4</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">capacity</span> <span class="o">=</span> <span class="n">capacity</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">items</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">activation</span> <span class="o">=</span> <span class="p">{}</span>
        
    <span class="k">def</span> <span class="nf">add_item</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="mf">1.0</span><span class="p">):</span>
        <span class="s">"""Add item to working memory"""</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">items</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="bp">self</span><span class="p">.</span><span class="n">capacity</span><span class="p">:</span>
            <span class="c1"># Remove least active item
</span>            <span class="n">min_item</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">activation</span><span class="p">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">min_item</span><span class="p">)</span>
            <span class="k">del</span> <span class="bp">self</span><span class="p">.</span><span class="n">activation</span><span class="p">[</span><span class="n">min_item</span><span class="p">]</span>
            
        <span class="bp">self</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">activation</span><span class="p">[</span><span class="n">item</span><span class="p">]</span> <span class="o">=</span> <span class="n">activation</span>
        
    <span class="k">def</span> <span class="nf">decay_activation</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">decay_rate</span><span class="o">=</span><span class="mf">0.1</span><span class="p">):</span>
        <span class="s">"""Apply activation decay"""</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">items</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">activation</span><span class="p">[</span><span class="n">item</span><span class="p">]</span> <span class="o">*=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">decay_rate</span><span class="p">)</span>
            
    <span class="k">def</span> <span class="nf">retrieve_item</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
        <span class="s">"""Attempt to retrieve item from memory"""</span>
        <span class="k">if</span> <span class="n">item</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">items</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">activation</span><span class="p">[</span><span class="n">item</span><span class="p">]</span>
        <span class="k">return</span> <span class="mi">0</span>
</code></pre></div></div>

<h2 id="model-evaluation">Model Evaluation</h2>

<h3 id="parameter-fitting">Parameter Fitting</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fit_model_parameters</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">param_ranges</span><span class="p">,</span> <span class="n">n_iterations</span><span class="o">=</span><span class="mi">1000</span><span class="p">):</span>
    <span class="s">"""Fit model parameters to empirical data"""</span>
    <span class="n">best_params</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">best_fit</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s">'inf'</span><span class="p">)</span>
    
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n_iterations</span><span class="p">):</span>
        <span class="c1"># Sample parameters
</span>        <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
            <span class="n">param</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">uniform</span><span class="p">(</span><span class="n">range_</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">range_</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
            <span class="k">for</span> <span class="n">param</span><span class="p">,</span> <span class="n">range_</span> <span class="ow">in</span> <span class="n">param_ranges</span><span class="p">.</span><span class="n">items</span><span class="p">()</span>
        <span class="p">}</span>
        
        <span class="c1"># Run model
</span>        <span class="n">predictions</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">simulate</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
        
        <span class="c1"># Calculate fit
</span>        <span class="n">fit</span> <span class="o">=</span> <span class="n">calculate_fit</span><span class="p">(</span><span class="n">predictions</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
        
        <span class="c1"># Update best parameters
</span>        <span class="k">if</span> <span class="n">fit</span> <span class="o">&lt;</span> <span class="n">best_fit</span><span class="p">:</span>
            <span class="n">best_fit</span> <span class="o">=</span> <span class="n">fit</span>
            <span class="n">best_params</span> <span class="o">=</span> <span class="n">params</span>
            
    <span class="k">return</span> <span class="n">best_params</span><span class="p">,</span> <span class="n">best_fit</span>

<span class="k">def</span> <span class="nf">calculate_fit</span><span class="p">(</span><span class="n">predictions</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="s">"""Calculate goodness of fit between model predictions and data"""</span>
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">((</span><span class="n">predictions</span> <span class="o">-</span> <span class="n">data</span><span class="p">)</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="applications">Applications</h2>

<ol>
  <li><strong>Learning and Memory</strong>
    <ul>
      <li>Skill acquisition</li>
      <li>Knowledge representation</li>
      <li>Memory retrieval</li>
    </ul>
  </li>
  <li><strong>Decision Making</strong>
    <ul>
      <li>Choice behavior</li>
      <li>Response times</li>
      <li>Risk assessment</li>
    </ul>
  </li>
  <li><strong>Language Processing</strong>
    <ul>
      <li>Sentence comprehension</li>
      <li>Word recognition</li>
      <li>Language production</li>
    </ul>
  </li>
</ol>

<h2 id="best-practices">Best Practices</h2>

<ol>
  <li><strong>Model Development</strong>
    <ul>
      <li>Start simple</li>
      <li>Incremental complexity</li>
      <li>Clear assumptions</li>
    </ul>
  </li>
  <li><strong>Model Validation</strong>
    <ul>
      <li>Multiple datasets</li>
      <li>Cross-validation</li>
      <li>Parameter recovery</li>
    </ul>
  </li>
  <li><strong>Model Comparison</strong>
    <ul>
      <li>Quantitative metrics</li>
      <li>Qualitative assessment</li>
      <li>Theoretical implications</li>
    </ul>
  </li>
</ol>

<h2 id="future-directions">Future Directions</h2>

<ol>
  <li><strong>Integration with Neuroscience</strong>
    <ul>
      <li>Neural constraints</li>
      <li>Brain-behavior mapping</li>
      <li>Multi-level modeling</li>
    </ul>
  </li>
  <li><strong>Advanced Methods</strong>
    <ul>
      <li>Bayesian approaches</li>
      <li>Deep learning integration</li>
      <li>Real-time modeling</li>
    </ul>
  </li>
  <li><strong>Applications</strong>
    <ul>
      <li>Educational technology</li>
      <li>Clinical assessment</li>
      <li>Human-AI interaction</li>
    </ul>
  </li>
</ol>

<h2 id="references">References</h2>

<ol>
  <li>Anderson, J. R. (2009). “How Can the Human Mind Occur in the Physical Universe?”</li>
  <li>Sun, R. (2008). “The Cambridge Handbook of Computational Psychology”</li>
  <li>Busemeyer, J. R., &amp; Diederich, A. (2010). “Cognitive Modeling”</li>
</ol>]]></content><author><name>jimjing</name></author><category term="blog" /><category term="Cognitive Modeling" /><category term="Neural Networks" /><category term="Machine Learning" /><category term="Psychology" /><summary type="html"><![CDATA[Introduction to basic concepts, common methods, and practical applications of cognitive modeling, helping readers understand how to formalize cognitive processes.]]></summary></entry><entry><title type="html">Current State and Future of Brain-Computer Interface Technology</title><link href="https://junlinjing.github.io/jjing-neuro/blog/2023/11/bci-future" rel="alternate" type="text/html" title="Current State and Future of Brain-Computer Interface Technology" /><published>2023-11-30T00:00:00+01:00</published><updated>2023-11-30T00:00:00+01:00</updated><id>https://junlinjing.github.io/jjing-neuro/blog/2023/11/bci-future</id><content type="html" xml:base="https://junlinjing.github.io/jjing-neuro/blog/2023/11/bci-future"><![CDATA[<h1 id="current-state-and-future-of-brain-computer-interface-technology">Current State and Future of Brain-Computer Interface Technology</h1>

<p>Brain-Computer Interface (BCI) technology has made remarkable progress in recent years. This article explores current developments and future prospects in this rapidly evolving field.</p>

<h2 id="current-state-of-bci-technology">Current State of BCI Technology</h2>

<h3 id="1-signal-acquisition-methods">1. Signal Acquisition Methods</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">BCISignalAcquisition</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="s">'EEG'</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">method</span> <span class="o">=</span> <span class="n">method</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">supported_methods</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">'EEG'</span><span class="p">:</span> <span class="p">{</span>
                <span class="s">'spatial_resolution'</span><span class="p">:</span> <span class="s">'low'</span><span class="p">,</span>
                <span class="s">'temporal_resolution'</span><span class="p">:</span> <span class="s">'high'</span><span class="p">,</span>
                <span class="s">'invasiveness'</span><span class="p">:</span> <span class="s">'non-invasive'</span><span class="p">,</span>
                <span class="s">'cost'</span><span class="p">:</span> <span class="s">'low'</span>
            <span class="p">},</span>
            <span class="s">'ECoG'</span><span class="p">:</span> <span class="p">{</span>
                <span class="s">'spatial_resolution'</span><span class="p">:</span> <span class="s">'medium'</span><span class="p">,</span>
                <span class="s">'temporal_resolution'</span><span class="p">:</span> <span class="s">'high'</span><span class="p">,</span>
                <span class="s">'invasiveness'</span><span class="p">:</span> <span class="s">'semi-invasive'</span><span class="p">,</span>
                <span class="s">'cost'</span><span class="p">:</span> <span class="s">'medium'</span>
            <span class="p">},</span>
            <span class="s">'Microelectrode'</span><span class="p">:</span> <span class="p">{</span>
                <span class="s">'spatial_resolution'</span><span class="p">:</span> <span class="s">'high'</span><span class="p">,</span>
                <span class="s">'temporal_resolution'</span><span class="p">:</span> <span class="s">'high'</span><span class="p">,</span>
                <span class="s">'invasiveness'</span><span class="p">:</span> <span class="s">'invasive'</span><span class="p">,</span>
                <span class="s">'cost'</span><span class="p">:</span> <span class="s">'high'</span>
            <span class="p">}</span>
        <span class="p">}</span>
        
    <span class="k">def</span> <span class="nf">get_characteristics</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">supported_methods</span><span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">method</span><span class="p">]</span>
    
    <span class="k">def</span> <span class="nf">compare_methods</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">method1</span><span class="p">,</span> <span class="n">method2</span><span class="p">):</span>
        <span class="s">"""Compare two signal acquisition methods"""</span>
        <span class="n">char1</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">supported_methods</span><span class="p">[</span><span class="n">method1</span><span class="p">]</span>
        <span class="n">char2</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">supported_methods</span><span class="p">[</span><span class="n">method2</span><span class="p">]</span>
        
        <span class="n">comparison</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">char1</span><span class="p">.</span><span class="n">keys</span><span class="p">():</span>
            <span class="n">comparison</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                <span class="s">'method1'</span><span class="p">:</span> <span class="n">char1</span><span class="p">[</span><span class="n">key</span><span class="p">],</span>
                <span class="s">'method2'</span><span class="p">:</span> <span class="n">char2</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
            <span class="p">}</span>
        <span class="k">return</span> <span class="n">comparison</span>
</code></pre></div></div>

<h3 id="2-signal-processing-pipeline">2. Signal Processing Pipeline</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ModernBCIPipeline</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sampling_rate</span><span class="o">=</span><span class="mi">1000</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">sampling_rate</span> <span class="o">=</span> <span class="n">sampling_rate</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">signal_buffer</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">features</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">decoder</span> <span class="o">=</span> <span class="bp">None</span>
        
    <span class="k">def</span> <span class="nf">preprocess_signal</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">raw_signal</span><span class="p">):</span>
        <span class="s">"""Advanced signal preprocessing"""</span>
        <span class="c1"># Artifact removal
</span>        <span class="n">cleaned</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">remove_artifacts</span><span class="p">(</span><span class="n">raw_signal</span><span class="p">)</span>
        
        <span class="c1"># Filtering
</span>        <span class="n">filtered</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">apply_filters</span><span class="p">(</span><span class="n">cleaned</span><span class="p">)</span>
        
        <span class="c1"># Normalization
</span>        <span class="n">normalized</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">normalize_signal</span><span class="p">(</span><span class="n">filtered</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">normalized</span>
    
    <span class="k">def</span> <span class="nf">extract_features</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">signal</span><span class="p">):</span>
        <span class="s">"""Extract relevant features for decoding"""</span>
        <span class="n">features</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">'temporal'</span><span class="p">:</span> <span class="bp">self</span><span class="p">.</span><span class="n">temporal_features</span><span class="p">(</span><span class="n">signal</span><span class="p">),</span>
            <span class="s">'spectral'</span><span class="p">:</span> <span class="bp">self</span><span class="p">.</span><span class="n">spectral_features</span><span class="p">(</span><span class="n">signal</span><span class="p">),</span>
            <span class="s">'spatial'</span><span class="p">:</span> <span class="bp">self</span><span class="p">.</span><span class="n">spatial_features</span><span class="p">(</span><span class="n">signal</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">features</span>
    
    <span class="k">def</span> <span class="nf">decode_intent</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">features</span><span class="p">):</span>
        <span class="s">"""Decode user intent from features"""</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">decoder</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">initialize_decoder</span><span class="p">()</span>
            
        <span class="n">prediction</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">decoder</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">features</span><span class="p">)</span>
        <span class="n">confidence</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">decoder</span><span class="p">.</span><span class="n">confidence</span><span class="p">(</span><span class="n">features</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">prediction</span><span class="p">,</span> <span class="n">confidence</span>
</code></pre></div></div>

<h2 id="recent-breakthroughs">Recent Breakthroughs</h2>

<h3 id="1-high-resolution-neural-interfaces">1. High-Resolution Neural Interfaces</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">HighResolutionBCI</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n_channels</span><span class="o">=</span><span class="mi">1024</span><span class="p">,</span> <span class="n">sampling_rate</span><span class="o">=</span><span class="mi">30000</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">n_channels</span> <span class="o">=</span> <span class="n">n_channels</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">sampling_rate</span> <span class="o">=</span> <span class="n">sampling_rate</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">spatial_map</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">create_spatial_map</span><span class="p">()</span>
        
    <span class="k">def</span> <span class="nf">create_spatial_map</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"""Create high-resolution spatial mapping"""</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="s">'resolution'</span><span class="p">:</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">n_channels</span><span class="si">}</span><span class="s"> channels'</span><span class="p">,</span>
            <span class="s">'coverage'</span><span class="p">:</span> <span class="s">'Multiple brain regions'</span><span class="p">,</span>
            <span class="s">'precision'</span><span class="p">:</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="mi">1000</span><span class="o">/</span><span class="bp">self</span><span class="p">.</span><span class="n">sampling_rate</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s">ms temporal'</span><span class="p">,</span>
            <span class="s">'features'</span><span class="p">:</span> <span class="p">[</span>
                <span class="s">'Single neuron recording'</span><span class="p">,</span>
                <span class="s">'Local field potentials'</span><span class="p">,</span>
                <span class="s">'Population dynamics'</span>
            <span class="p">]</span>
        <span class="p">}</span>
    
    <span class="k">def</span> <span class="nf">process_neural_data</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">raw_data</span><span class="p">):</span>
        <span class="s">"""Process high-resolution neural data"""</span>
        <span class="c1"># Implementation of advanced processing
</span>        <span class="k">pass</span>
</code></pre></div></div>

<h3 id="2-adaptive-decoding-algorithms">2. Adaptive Decoding Algorithms</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">AdaptiveDecoder</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n_classes</span><span class="p">,</span> <span class="n">adaptation_rate</span><span class="o">=</span><span class="mf">0.1</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">n_classes</span> <span class="o">=</span> <span class="n">n_classes</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">adaptation_rate</span> <span class="o">=</span> <span class="n">adaptation_rate</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">initialize_model</span><span class="p">()</span>
        
    <span class="k">def</span> <span class="nf">initialize_model</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"""Initialize adaptive decoding model"""</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="s">'base_model'</span><span class="p">:</span> <span class="bp">self</span><span class="p">.</span><span class="n">create_base_model</span><span class="p">(),</span>
            <span class="s">'adaptation_layer'</span><span class="p">:</span> <span class="bp">self</span><span class="p">.</span><span class="n">create_adaptation_layer</span><span class="p">(),</span>
            <span class="s">'calibration'</span><span class="p">:</span> <span class="bp">self</span><span class="p">.</span><span class="n">create_calibration_module</span><span class="p">()</span>
        <span class="p">}</span>
    
    <span class="k">def</span> <span class="nf">adapt_to_user</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">feedback</span><span class="p">):</span>
        <span class="s">"""Adapt decoder based on user feedback"""</span>
        <span class="c1"># Implementation of online adaptation
</span>        <span class="k">pass</span>
    
    <span class="k">def</span> <span class="nf">update_model</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">new_data</span><span class="p">):</span>
        <span class="s">"""Update model with new data"""</span>
        <span class="c1"># Implementation of model updating
</span>        <span class="k">pass</span>
</code></pre></div></div>

<h2 id="future-directions">Future Directions</h2>

<h3 id="1-advanced-neural-interfaces">1. Advanced Neural Interfaces</h3>

<ul>
  <li>High-density electrode arrays</li>
  <li>Wireless transmission</li>
  <li>Long-term stability</li>
  <li>Minimal tissue response</li>
</ul>

<h3 id="2-improved-signal-processing">2. Improved Signal Processing</h3>

<ul>
  <li>Real-time artifact removal</li>
  <li>Adaptive filtering</li>
  <li>Advanced feature extraction</li>
  <li>Robust decoding</li>
</ul>

<h3 id="3-novel-applications">3. Novel Applications</h3>

<ul>
  <li>Rehabilitation systems</li>
  <li>Augmented communication</li>
  <li>Neural prosthetics</li>
  <li>Cognitive enhancement</li>
</ul>

<h2 id="technical-challenges">Technical Challenges</h2>

<h3 id="1-hardware-limitations">1. Hardware Limitations</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">assess_hardware_limitations</span><span class="p">():</span>
    <span class="s">"""Assess current hardware limitations"""</span>
    <span class="n">limitations</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s">'power_consumption'</span><span class="p">:</span> <span class="p">{</span>
            <span class="s">'challenge'</span><span class="p">:</span> <span class="s">'High power requirements'</span><span class="p">,</span>
            <span class="s">'solutions'</span><span class="p">:</span> <span class="p">[</span>
                <span class="s">'Efficient circuit design'</span><span class="p">,</span>
                <span class="s">'Energy harvesting'</span><span class="p">,</span>
                <span class="s">'Optimized processing'</span>
            <span class="p">]</span>
        <span class="p">},</span>
        <span class="s">'biocompatibility'</span><span class="p">:</span> <span class="p">{</span>
            <span class="s">'challenge'</span><span class="p">:</span> <span class="s">'Long-term stability'</span><span class="p">,</span>
            <span class="s">'solutions'</span><span class="p">:</span> <span class="p">[</span>
                <span class="s">'Novel materials'</span><span class="p">,</span>
                <span class="s">'Coating technologies'</span><span class="p">,</span>
                <span class="s">'Adaptive interfaces'</span>
            <span class="p">]</span>
        <span class="p">},</span>
        <span class="s">'bandwidth'</span><span class="p">:</span> <span class="p">{</span>
            <span class="s">'challenge'</span><span class="p">:</span> <span class="s">'Data transmission'</span><span class="p">,</span>
            <span class="s">'solutions'</span><span class="p">:</span> <span class="p">[</span>
                <span class="s">'Compression algorithms'</span><span class="p">,</span>
                <span class="s">'Wireless protocols'</span><span class="p">,</span>
                <span class="s">'Edge processing'</span>
            <span class="p">]</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">limitations</span>
</code></pre></div></div>

<h3 id="2-software-challenges">2. Software Challenges</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">analyze_software_challenges</span><span class="p">():</span>
    <span class="s">"""Analyze software-related challenges"""</span>
    <span class="n">challenges</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s">'real_time_processing'</span><span class="p">:</span> <span class="p">{</span>
            <span class="s">'issue'</span><span class="p">:</span> <span class="s">'Processing latency'</span><span class="p">,</span>
            <span class="s">'solutions'</span><span class="p">:</span> <span class="p">[</span>
                <span class="s">'Optimized algorithms'</span><span class="p">,</span>
                <span class="s">'Parallel processing'</span><span class="p">,</span>
                <span class="s">'Hardware acceleration'</span>
            <span class="p">]</span>
        <span class="p">},</span>
        <span class="s">'reliability'</span><span class="p">:</span> <span class="p">{</span>
            <span class="s">'issue'</span><span class="p">:</span> <span class="s">'Decoding accuracy'</span><span class="p">,</span>
            <span class="s">'solutions'</span><span class="p">:</span> <span class="p">[</span>
                <span class="s">'Robust algorithms'</span><span class="p">,</span>
                <span class="s">'Error correction'</span><span class="p">,</span>
                <span class="s">'Adaptive systems'</span>
            <span class="p">]</span>
        <span class="p">},</span>
        <span class="s">'calibration'</span><span class="p">:</span> <span class="p">{</span>
            <span class="s">'issue'</span><span class="p">:</span> <span class="s">'User adaptation'</span><span class="p">,</span>
            <span class="s">'solutions'</span><span class="p">:</span> <span class="p">[</span>
                <span class="s">'Auto-calibration'</span><span class="p">,</span>
                <span class="s">'Transfer learning'</span><span class="p">,</span>
                <span class="s">'Online adaptation'</span>
            <span class="p">]</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">challenges</span>
</code></pre></div></div>

<h2 id="future-applications">Future Applications</h2>

<h3 id="1-medical-applications">1. Medical Applications</h3>

<ul>
  <li>Neural rehabilitation</li>
  <li>Prosthetic control</li>
  <li>Communication aids</li>
  <li>Therapeutic interventions</li>
</ul>

<h3 id="2-consumer-applications">2. Consumer Applications</h3>

<ul>
  <li>Gaming and entertainment</li>
  <li>Productivity enhancement</li>
  <li>Learning and education</li>
  <li>Emotional regulation</li>
</ul>

<h3 id="3-research-applications">3. Research Applications</h3>

<ul>
  <li>Neuroscience research</li>
  <li>Cognitive studies</li>
  <li>Brain mapping</li>
  <li>Neural development</li>
</ul>

<h2 id="ethical-considerations">Ethical Considerations</h2>

<ol>
  <li><strong>Privacy and Security</strong>
    <ul>
      <li>Neural data protection</li>
      <li>Unauthorized access prevention</li>
      <li>Identity protection</li>
    </ul>
  </li>
  <li><strong>Safety and Risk</strong>
    <ul>
      <li>Long-term effects</li>
      <li>System reliability</li>
      <li>User safety</li>
    </ul>
  </li>
  <li><strong>Access and Equity</strong>
    <ul>
      <li>Cost considerations</li>
      <li>Availability</li>
      <li>Training requirements</li>
    </ul>
  </li>
</ol>

<h2 id="conclusion">Conclusion</h2>

<p>The field of BCI technology is rapidly evolving, with promising developments in both hardware and software. Future advances will likely lead to more practical and powerful applications, while addressing current limitations and ethical concerns.</p>

<h2 id="references">References</h2>

<ol>
  <li>Wolpaw, J., &amp; Wolpaw, E. W. (2012). “Brain-Computer Interfaces: Principles and Practice”</li>
  <li>Lebedev, M. A., &amp; Nicolelis, M. A. L. (2017). “Brain-Machine Interfaces: From Basic Science to Neuroprostheses and Neurorehabilitation”</li>
  <li>Ramadan, R. A., &amp; Vasilakos, A. V. (2017). “Brain Computer Interface: Control Signals Review”</li>
</ol>]]></content><author><name>jimjing</name></author><category term="blog" /><category term="Neural Engineering" /><category term="Brain-Computer Interface" /><category term="Future Technology" /><category term="Neuroscience" /><summary type="html"><![CDATA[Analysis of current developments in brain-computer interface technology, discussing potential breakthrough directions and application scenarios.]]></summary></entry><entry><title type="html">Introduction to Neural Data Analysis with Python</title><link href="https://junlinjing.github.io/jjing-neuro/blog/2023/10/neural-data-python" rel="alternate" type="text/html" title="Introduction to Neural Data Analysis with Python" /><published>2023-10-25T10:00:00+02:00</published><updated>2023-10-25T10:00:00+02:00</updated><id>https://junlinjing.github.io/jjing-neuro/blog/2023/10/neural-data-python</id><content type="html" xml:base="https://junlinjing.github.io/jjing-neuro/blog/2023/10/neural-data-python"><![CDATA[<h1 id="introduction-to-neural-data-analysis-with-python">Introduction to Neural Data Analysis with Python</h1>

<p>Neural data analysis is a crucial skill in modern neuroscience research. This tutorial provides a comprehensive introduction to analyzing neural data using Python, focusing on practical examples and common analysis techniques.</p>

<h2 id="setting-up-your-environment">Setting Up Your Environment</h2>

<p>First, let’s set up a Python environment with the necessary packages:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Required packages
</span><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">mne</span>
<span class="kn">import</span> <span class="nn">scipy.signal</span> <span class="k">as</span> <span class="n">signal</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="n">sns</span>

<span class="c1"># Set plotting style
</span><span class="n">plt</span><span class="p">.</span><span class="n">style</span><span class="p">.</span><span class="n">use</span><span class="p">(</span><span class="s">'seaborn'</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="n">set_context</span><span class="p">(</span><span class="s">"paper"</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="loading-and-preprocessing-data">Loading and Preprocessing Data</h2>

<h3 id="reading-neural-data">Reading Neural Data</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">load_neural_data</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
    <span class="s">"""Load neural data from various formats."""</span>
    <span class="k">if</span> <span class="n">file_path</span><span class="p">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">'.edf'</span><span class="p">):</span>
        <span class="n">raw</span> <span class="o">=</span> <span class="n">mne</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="n">read_raw_edf</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="n">preload</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">file_path</span><span class="p">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">'.fif'</span><span class="p">):</span>
        <span class="n">raw</span> <span class="o">=</span> <span class="n">mne</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="n">read_raw_fif</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="n">preload</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">"Unsupported file format"</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">raw</span>

<span class="c1"># Example usage
</span><span class="n">raw_data</span> <span class="o">=</span> <span class="n">load_neural_data</span><span class="p">(</span><span class="s">'sample_data.edf'</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="basic-preprocessing">Basic Preprocessing</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">preprocess_data</span><span class="p">(</span><span class="n">raw</span><span class="p">):</span>
    <span class="s">"""Basic preprocessing pipeline."""</span>
    <span class="c1"># Filter data
</span>    <span class="n">raw</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">l_freq</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">h_freq</span><span class="o">=</span><span class="mi">40</span><span class="p">)</span>
    
    <span class="c1"># Remove power line noise
</span>    <span class="n">raw</span><span class="p">.</span><span class="n">notch_filter</span><span class="p">(</span><span class="n">freqs</span><span class="o">=</span><span class="p">[</span><span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">])</span>
    
    <span class="c1"># Detect and remove bad channels
</span>    <span class="n">raw</span><span class="p">.</span><span class="n">interpolate_bads</span><span class="p">()</span>
    
    <span class="k">return</span> <span class="n">raw</span>
</code></pre></div></div>

<h2 id="feature-extraction">Feature Extraction</h2>

<h3 id="time-domain-features">Time-domain Features</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">extract_time_features</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="s">"""Extract common time-domain features."""</span>
    <span class="n">features</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s">'mean'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">data</span><span class="p">),</span>
        <span class="s">'std'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">std</span><span class="p">(</span><span class="n">data</span><span class="p">),</span>
        <span class="s">'max'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="nb">max</span><span class="p">(</span><span class="n">data</span><span class="p">),</span>
        <span class="s">'min'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="nb">min</span><span class="p">(</span><span class="n">data</span><span class="p">),</span>
        <span class="s">'rms'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">square</span><span class="p">(</span><span class="n">data</span><span class="p">)))</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">features</span>
</code></pre></div></div>

<h3 id="frequency-domain-features">Frequency-domain Features</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">compute_psd</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">fs</span><span class="p">):</span>
    <span class="s">"""Compute power spectral density."""</span>
    <span class="n">freqs</span><span class="p">,</span> <span class="n">psd</span> <span class="o">=</span> <span class="n">signal</span><span class="p">.</span><span class="n">welch</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">fs</span><span class="o">=</span><span class="n">fs</span><span class="p">,</span> 
                            <span class="n">nperseg</span><span class="o">=</span><span class="mi">256</span><span class="p">,</span>
                            <span class="n">scaling</span><span class="o">=</span><span class="s">'density'</span><span class="p">)</span>
    
    <span class="c1"># Extract frequency bands
</span>    <span class="n">bands</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s">'delta'</span><span class="p">:</span> <span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span>
        <span class="s">'theta'</span><span class="p">:</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span>
        <span class="s">'alpha'</span><span class="p">:</span> <span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">),</span>
        <span class="s">'beta'</span><span class="p">:</span> <span class="p">(</span><span class="mi">13</span><span class="p">,</span> <span class="mi">30</span><span class="p">),</span>
        <span class="s">'gamma'</span><span class="p">:</span> <span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="mi">45</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="n">power</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">band</span><span class="p">,</span> <span class="p">(</span><span class="n">fmin</span><span class="p">,</span> <span class="n">fmax</span><span class="p">)</span> <span class="ow">in</span> <span class="n">bands</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
        <span class="n">idx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">logical_and</span><span class="p">(</span><span class="n">freqs</span> <span class="o">&gt;=</span> <span class="n">fmin</span><span class="p">,</span> <span class="n">freqs</span> <span class="o">&lt;=</span> <span class="n">fmax</span><span class="p">)</span>
        <span class="n">power</span><span class="p">[</span><span class="n">band</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">psd</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span>
    
    <span class="k">return</span> <span class="n">freqs</span><span class="p">,</span> <span class="n">psd</span><span class="p">,</span> <span class="n">power</span>
</code></pre></div></div>

<h2 id="data-visualization">Data Visualization</h2>

<h3 id="time-series-plotting">Time Series Plotting</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">plot_neural_signals</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">channels</span><span class="p">,</span> <span class="n">fs</span><span class="p">):</span>
    <span class="s">"""Plot multiple channels of neural data."""</span>
    <span class="n">time</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">))</span> <span class="o">/</span> <span class="n">fs</span>
    
    <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">ch</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">channels</span><span class="p">):</span>
        <span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="n">ch</span><span class="p">)</span>
    
    <span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Time (s)'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Channel'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Neural Signals'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="spectral-analysis-visualization">Spectral Analysis Visualization</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">plot_spectrum</span><span class="p">(</span><span class="n">freqs</span><span class="p">,</span> <span class="n">psd</span><span class="p">,</span> <span class="n">power</span><span class="p">):</span>
    <span class="s">"""Plot power spectrum and band powers."""</span>
    <span class="n">fig</span><span class="p">,</span> <span class="p">(</span><span class="n">ax1</span><span class="p">,</span> <span class="n">ax2</span><span class="p">)</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
    
    <span class="c1"># Plot PSD
</span>    <span class="n">ax1</span><span class="p">.</span><span class="n">semilogy</span><span class="p">(</span><span class="n">freqs</span><span class="p">,</span> <span class="n">psd</span><span class="p">)</span>
    <span class="n">ax1</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'Frequency (Hz)'</span><span class="p">)</span>
    <span class="n">ax1</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'Power Spectral Density'</span><span class="p">)</span>
    <span class="n">ax1</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
    
    <span class="c1"># Plot band powers
</span>    <span class="n">bands</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">power</span><span class="p">.</span><span class="n">keys</span><span class="p">())</span>
    <span class="n">values</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">power</span><span class="p">.</span><span class="n">values</span><span class="p">())</span>
    <span class="n">ax2</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">bands</span><span class="p">,</span> <span class="n">values</span><span class="p">)</span>
    <span class="n">ax2</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'Average Power'</span><span class="p">)</span>
    <span class="n">ax2</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">'Frequency Band Powers'</span><span class="p">)</span>
    
    <span class="n">plt</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="example-analysis-pipeline">Example Analysis Pipeline</h2>

<p>Here’s a complete example of analyzing neural data:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">analyze_neural_data</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
    <span class="c1"># Load data
</span>    <span class="n">raw</span> <span class="o">=</span> <span class="n">load_neural_data</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>
    
    <span class="c1"># Preprocess
</span>    <span class="n">raw</span> <span class="o">=</span> <span class="n">preprocess_data</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span>
    
    <span class="c1"># Extract data and info
</span>    <span class="n">data</span> <span class="o">=</span> <span class="n">raw</span><span class="p">.</span><span class="n">get_data</span><span class="p">()</span>
    <span class="n">fs</span> <span class="o">=</span> <span class="n">raw</span><span class="p">.</span><span class="n">info</span><span class="p">[</span><span class="s">'sfreq'</span><span class="p">]</span>
    <span class="n">channels</span> <span class="o">=</span> <span class="n">raw</span><span class="p">.</span><span class="n">ch_names</span>
    
    <span class="c1"># Extract features
</span>    <span class="n">features</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">ch</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
        <span class="n">time_features</span> <span class="o">=</span> <span class="n">extract_time_features</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">ch</span><span class="p">])</span>
        <span class="n">freqs</span><span class="p">,</span> <span class="n">psd</span><span class="p">,</span> <span class="n">power</span> <span class="o">=</span> <span class="n">compute_psd</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">ch</span><span class="p">],</span> <span class="n">fs</span><span class="p">)</span>
        
        <span class="n">ch_features</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">'channel'</span><span class="p">:</span> <span class="n">channels</span><span class="p">[</span><span class="n">ch</span><span class="p">],</span>
            <span class="o">**</span><span class="n">time_features</span><span class="p">,</span>
            <span class="o">**</span><span class="n">power</span>
        <span class="p">}</span>
        <span class="n">features</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">ch_features</span><span class="p">)</span>
    
    <span class="c1"># Convert to DataFrame
</span>    <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">features</span><span class="p">)</span>
    
    <span class="c1"># Visualize
</span>    <span class="n">plot_neural_signals</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">channels</span><span class="p">,</span> <span class="n">fs</span><span class="p">)</span>
    <span class="n">plot_spectrum</span><span class="p">(</span><span class="n">freqs</span><span class="p">,</span> <span class="n">psd</span><span class="p">,</span> <span class="n">power</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">df</span>
</code></pre></div></div>

<h2 id="best-practices">Best Practices</h2>

<ol>
  <li><strong>Data Organization</strong>
    <ul>
      <li>Use consistent file naming</li>
      <li>Maintain clear directory structure</li>
      <li>Document preprocessing steps</li>
    </ul>
  </li>
  <li><strong>Code Quality</strong>
    <ul>
      <li>Write modular functions</li>
      <li>Add docstrings and comments</li>
      <li>Use version control</li>
    </ul>
  </li>
  <li><strong>Analysis Pipeline</strong>
    <ul>
      <li>Automate repetitive tasks</li>
      <li>Save intermediate results</li>
      <li>Validate results at each step</li>
    </ul>
  </li>
</ol>

<h2 id="common-pitfalls">Common Pitfalls</h2>

<ol>
  <li><strong>Data Quality Issues</strong>
    <ul>
      <li>Check for missing values</li>
      <li>Identify outliers</li>
      <li>Validate channel locations</li>
    </ul>
  </li>
  <li><strong>Processing Artifacts</strong>
    <ul>
      <li>Filter edge effects</li>
      <li>Temporal discontinuities</li>
      <li>Baseline corrections</li>
    </ul>
  </li>
  <li><strong>Statistical Considerations</strong>
    <ul>
      <li>Multiple comparisons</li>
      <li>Independence assumptions</li>
      <li>Effect size calculations</li>
    </ul>
  </li>
</ol>

<h2 id="conclusion">Conclusion</h2>

<p>This tutorial covered the basics of neural data analysis using Python. For more advanced topics, check out the MNE-Python documentation and other neuroscience analysis packages.</p>

<h2 id="references">References</h2>

<ol>
  <li>Gramfort, A. et al. (2013). “MEG and EEG data analysis with MNE-Python”</li>
  <li>Cohen, M. X. (2014). “Analyzing Neural Time Series Data”</li>
  <li>Kriegeskorte, N. &amp; Kreiman, G. (2011). “Visual Population Codes”</li>
</ol>

<h2 id="additional-resources">Additional Resources</h2>

<ul>
  <li><a href="https://mne.tools/stable/index.html">MNE-Python Documentation</a></li>
  <li><a href="https://neurodatascience.github.io/">Neural Data Analysis Tutorials</a></li>
  <li><a href="https://openneuro.org/">Sample Datasets</a></li>
</ul>]]></content><author><name>jimjing</name></author><category term="blog" /><category term="data analysis" /><category term="python" /><category term="neuroscience" /><category term="tutorial" /><summary type="html"><![CDATA[A step-by-step guide to processing and analyzing neural data using Python]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://junlinjing.github.io/jjing-neuro/assets/images/blog/neural-data-python.jpg" /><media:content medium="image" url="https://junlinjing.github.io/jjing-neuro/assets/images/blog/neural-data-python.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Building Real-time EEG Signal Processing Pipeline</title><link href="https://junlinjing.github.io/jjing-neuro/blog/2023/09/real-time-eeg" rel="alternate" type="text/html" title="Building Real-time EEG Signal Processing Pipeline" /><published>2023-09-15T00:00:00+02:00</published><updated>2023-09-15T00:00:00+02:00</updated><id>https://junlinjing.github.io/jjing-neuro/blog/2023/09/real-time-eeg</id><content type="html" xml:base="https://junlinjing.github.io/jjing-neuro/blog/2023/09/real-time-eeg"><![CDATA[<h1 id="building-real-time-eeg-signal-processing-pipeline">Building Real-time EEG Signal Processing Pipeline</h1>

<p>Real-time EEG signal processing is crucial for brain-computer interfaces and neurofeedback applications. This tutorial shows how to build an efficient real-time processing pipeline using Python.</p>

<h2 id="system-architecture">System Architecture</h2>

<p>A real-time EEG processing system typically consists of:</p>
<ol>
  <li>Data acquisition</li>
  <li>Signal preprocessing</li>
  <li>Feature extraction</li>
  <li>Classification/Analysis</li>
  <li>Feedback generation</li>
</ol>

<h3 id="basic-structure">Basic Structure</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">RealTimeEEG</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">device</span><span class="p">,</span> <span class="n">sampling_rate</span><span class="p">,</span> <span class="n">channels</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">device</span> <span class="o">=</span> <span class="n">device</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">fs</span> <span class="o">=</span> <span class="n">sampling_rate</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">channels</span> <span class="o">=</span> <span class="n">channels</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">buffer_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">fs</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>  <span class="c1"># 2-second buffer
</span>        <span class="bp">self</span><span class="p">.</span><span class="nb">buffer</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="nb">len</span><span class="p">(</span><span class="n">channels</span><span class="p">),</span> <span class="bp">self</span><span class="p">.</span><span class="n">buffer_size</span><span class="p">))</span>
        
    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">setup_filters</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">setup_features</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">setup_classifier</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="data-acquisition">Data Acquisition</h2>

<h3 id="setting-up-lsl-stream">Setting up LSL Stream</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pylsl</span> <span class="kn">import</span> <span class="n">StreamInlet</span><span class="p">,</span> <span class="n">resolve_stream</span>

<span class="k">def</span> <span class="nf">setup_eeg_stream</span><span class="p">():</span>
    <span class="s">"""Setup LSL stream for EEG data."""</span>
    <span class="n">streams</span> <span class="o">=</span> <span class="n">resolve_stream</span><span class="p">(</span><span class="s">'type'</span><span class="p">,</span> <span class="s">'EEG'</span><span class="p">)</span>
    <span class="n">inlet</span> <span class="o">=</span> <span class="n">StreamInlet</span><span class="p">(</span><span class="n">streams</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="k">return</span> <span class="n">inlet</span>

<span class="k">def</span> <span class="nf">acquire_data</span><span class="p">(</span><span class="n">inlet</span><span class="p">,</span> <span class="n">chunk_size</span><span class="p">):</span>
    <span class="s">"""Acquire data chunks from LSL stream."""</span>
    <span class="n">chunk</span><span class="p">,</span> <span class="n">timestamps</span> <span class="o">=</span> <span class="n">inlet</span><span class="p">.</span><span class="n">pull_chunk</span><span class="p">(</span>
        <span class="n">max_samples</span><span class="o">=</span><span class="n">chunk_size</span><span class="p">,</span>
        <span class="n">timeout</span><span class="o">=</span><span class="mf">1.0</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">chunk</span><span class="p">),</span> <span class="n">timestamps</span>
</code></pre></div></div>

<h2 id="real-time-preprocessing">Real-time Preprocessing</h2>

<h3 id="filtering">Filtering</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">scipy.signal</span> <span class="kn">import</span> <span class="n">butter</span><span class="p">,</span> <span class="n">sosfilt</span>

<span class="k">class</span> <span class="nc">RealTimeFilter</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">fs</span><span class="p">,</span> <span class="n">f_low</span><span class="p">,</span> <span class="n">f_high</span><span class="p">,</span> <span class="n">order</span><span class="o">=</span><span class="mi">4</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">fs</span> <span class="o">=</span> <span class="n">fs</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">f_low</span> <span class="o">=</span> <span class="n">f_low</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">f_high</span> <span class="o">=</span> <span class="n">f_high</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">order</span> <span class="o">=</span> <span class="n">order</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">sos</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_design_filter</span><span class="p">()</span>
        
    <span class="k">def</span> <span class="nf">_design_filter</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">nyq</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">fs</span> <span class="o">/</span> <span class="mi">2</span>
        <span class="n">sos</span> <span class="o">=</span> <span class="n">butter</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">order</span><span class="p">,</span> 
                    <span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">f_low</span><span class="o">/</span><span class="n">nyq</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">f_high</span><span class="o">/</span><span class="n">nyq</span><span class="p">],</span>
                    <span class="n">btype</span><span class="o">=</span><span class="s">'bandpass'</span><span class="p">,</span>
                    <span class="n">output</span><span class="o">=</span><span class="s">'sos'</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">sos</span>
    
    <span class="k">def</span> <span class="nf">apply</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">sosfilt</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">sos</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">axis</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="artifact-removal">Artifact Removal</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ArtifactRemover</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">threshold</span><span class="o">=</span><span class="mi">100</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">threshold</span> <span class="o">=</span> <span class="n">threshold</span>
        
    <span class="k">def</span> <span class="nf">remove_artifacts</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="s">"""Simple threshold-based artifact removal."""</span>
        <span class="n">mask</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">&gt;</span> <span class="bp">self</span><span class="p">.</span><span class="n">threshold</span>
        <span class="n">data</span><span class="p">[</span><span class="n">mask</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">nan</span>
        <span class="c1"># Interpolate NaN values
</span>        <span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">).</span><span class="n">interpolate</span><span class="p">(</span><span class="n">method</span><span class="o">=</span><span class="s">'linear'</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">data</span><span class="p">.</span><span class="n">values</span>
</code></pre></div></div>

<h2 id="feature-extraction">Feature Extraction</h2>

<h3 id="real-time-features">Real-time Features</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">RealTimeFeatures</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">fs</span><span class="p">,</span> <span class="n">window_size</span><span class="o">=</span><span class="mf">1.0</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">fs</span> <span class="o">=</span> <span class="n">fs</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">window_size</span> <span class="o">=</span> <span class="n">window_size</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">window_samples</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">fs</span> <span class="o">*</span> <span class="n">window_size</span><span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">compute_features</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="s">"""Compute features in real-time."""</span>
        <span class="n">features</span> <span class="o">=</span> <span class="p">{}</span>
        
        <span class="c1"># Time domain features
</span>        <span class="n">features</span><span class="p">[</span><span class="s">'rms'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">square</span><span class="p">(</span><span class="n">data</span><span class="p">)))</span>
        <span class="n">features</span><span class="p">[</span><span class="s">'var'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">var</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        
        <span class="c1"># Frequency domain features
</span>        <span class="n">freqs</span><span class="p">,</span> <span class="n">psd</span> <span class="o">=</span> <span class="n">signal</span><span class="p">.</span><span class="n">welch</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> 
                                <span class="n">fs</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">fs</span><span class="p">,</span>
                                <span class="n">nperseg</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">window_samples</span><span class="p">,</span>
                                <span class="n">noverlap</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">window_samples</span><span class="o">//</span><span class="mi">2</span><span class="p">)</span>
        
        <span class="c1"># Band powers
</span>        <span class="n">bands</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">'delta'</span><span class="p">:</span> <span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span>
            <span class="s">'theta'</span><span class="p">:</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span>
            <span class="s">'alpha'</span><span class="p">:</span> <span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">),</span>
            <span class="s">'beta'</span><span class="p">:</span> <span class="p">(</span><span class="mi">13</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
        <span class="p">}</span>
        
        <span class="k">for</span> <span class="n">band</span><span class="p">,</span> <span class="p">(</span><span class="n">fmin</span><span class="p">,</span> <span class="n">fmax</span><span class="p">)</span> <span class="ow">in</span> <span class="n">bands</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
            <span class="n">idx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">logical_and</span><span class="p">(</span><span class="n">freqs</span> <span class="o">&gt;=</span> <span class="n">fmin</span><span class="p">,</span> <span class="n">freqs</span> <span class="o">&lt;=</span> <span class="n">fmax</span><span class="p">)</span>
            <span class="n">features</span><span class="p">[</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">band</span><span class="si">}</span><span class="s">_power'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">psd</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span>
            
        <span class="k">return</span> <span class="n">features</span>
</code></pre></div></div>

<h2 id="real-time-processing-pipeline">Real-time Processing Pipeline</h2>

<h3 id="main-processing-loop">Main Processing Loop</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">EEGProcessor</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">fs</span><span class="o">=</span><span class="mi">250</span><span class="p">,</span> <span class="n">channels</span><span class="o">=</span><span class="p">[</span><span class="s">'Fp1'</span><span class="p">,</span> <span class="s">'Fp2'</span><span class="p">,</span> <span class="s">'C3'</span><span class="p">,</span> <span class="s">'C4'</span><span class="p">]):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">fs</span> <span class="o">=</span> <span class="n">fs</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">channels</span> <span class="o">=</span> <span class="n">channels</span>
        <span class="bp">self</span><span class="p">.</span><span class="nb">filter</span> <span class="o">=</span> <span class="n">RealTimeFilter</span><span class="p">(</span><span class="n">fs</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">40</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">artifact_remover</span> <span class="o">=</span> <span class="n">ArtifactRemover</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">feature_extractor</span> <span class="o">=</span> <span class="n">RealTimeFeatures</span><span class="p">(</span><span class="n">fs</span><span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">process_chunk</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="s">"""Process a chunk of EEG data in real-time."""</span>
        <span class="c1"># Filter
</span>        <span class="n">filtered</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="nb">filter</span><span class="p">.</span><span class="nb">apply</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        
        <span class="c1"># Remove artifacts
</span>        <span class="n">clean</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">artifact_remover</span><span class="p">.</span><span class="n">remove_artifacts</span><span class="p">(</span><span class="n">filtered</span><span class="p">)</span>
        
        <span class="c1"># Extract features
</span>        <span class="n">features</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">ch</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">channels</span><span class="p">):</span>
            <span class="n">ch_features</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">feature_extractor</span><span class="p">.</span><span class="n">compute_features</span><span class="p">(</span>
                <span class="n">clean</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="p">:]</span>
            <span class="p">)</span>
            <span class="n">features</span><span class="p">[</span><span class="n">ch</span><span class="p">]</span> <span class="o">=</span> <span class="n">ch_features</span>
            
        <span class="k">return</span> <span class="n">features</span>
</code></pre></div></div>

<h2 id="visualization">Visualization</h2>

<h3 id="real-time-plot">Real-time Plot</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="nn">matplotlib.animation</span> <span class="kn">import</span> <span class="n">FuncAnimation</span>

<span class="k">class</span> <span class="nc">RealTimePlot</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">fs</span><span class="p">,</span> <span class="n">channels</span><span class="p">,</span> <span class="n">buffer_size</span><span class="o">=</span><span class="mi">1000</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">fs</span> <span class="o">=</span> <span class="n">fs</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">channels</span> <span class="o">=</span> <span class="n">channels</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">buffer_size</span> <span class="o">=</span> <span class="n">buffer_size</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">setup_plot</span><span class="p">()</span>
        
    <span class="k">def</span> <span class="nf">setup_plot</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">fig</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">lines</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">ch</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">channels</span><span class="p">:</span>
            <span class="n">line</span><span class="p">,</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">([],</span> <span class="p">[],</span> <span class="n">label</span><span class="o">=</span><span class="n">ch</span><span class="p">)</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">lines</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">ax</span><span class="p">.</span><span class="n">set_ylim</span><span class="p">(</span><span class="o">-</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">ax</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>
        
    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">frame</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">lines</span><span class="p">):</span>
            <span class="n">line</span><span class="p">.</span><span class="n">set_data</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">])),</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">lines</span>
</code></pre></div></div>

<h2 id="complete-system">Complete System</h2>

<p>Here’s how to put everything together:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">run_eeg_system</span><span class="p">():</span>
    <span class="c1"># Initialize components
</span>    <span class="n">fs</span> <span class="o">=</span> <span class="mi">250</span>
    <span class="n">channels</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Fp1'</span><span class="p">,</span> <span class="s">'Fp2'</span><span class="p">,</span> <span class="s">'C3'</span><span class="p">,</span> <span class="s">'C4'</span><span class="p">]</span>
    <span class="n">processor</span> <span class="o">=</span> <span class="n">EEGProcessor</span><span class="p">(</span><span class="n">fs</span><span class="p">,</span> <span class="n">channels</span><span class="p">)</span>
    <span class="n">inlet</span> <span class="o">=</span> <span class="n">setup_eeg_stream</span><span class="p">()</span>
    <span class="n">plotter</span> <span class="o">=</span> <span class="n">RealTimePlot</span><span class="p">(</span><span class="n">fs</span><span class="p">,</span> <span class="n">channels</span><span class="p">)</span>
    
    <span class="c1"># Main loop
</span>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="c1"># Get data
</span>        <span class="n">data</span><span class="p">,</span> <span class="n">timestamps</span> <span class="o">=</span> <span class="n">acquire_data</span><span class="p">(</span><span class="n">inlet</span><span class="p">,</span> <span class="n">chunk_size</span><span class="o">=</span><span class="n">fs</span><span class="o">//</span><span class="mi">10</span><span class="p">)</span>
        
        <span class="c1"># Process
</span>        <span class="n">features</span> <span class="o">=</span> <span class="n">processor</span><span class="p">.</span><span class="n">process_chunk</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        
        <span class="c1"># Update visualization
</span>        <span class="n">plotter</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
        
        <span class="c1"># Optional: Save or stream features
</span>        <span class="n">save_features</span><span class="p">(</span><span class="n">features</span><span class="p">)</span>
        
        <span class="c1"># Check for exit condition
</span>        <span class="k">if</span> <span class="n">check_exit_condition</span><span class="p">():</span>
            <span class="k">break</span>
</code></pre></div></div>

<h2 id="performance-optimization">Performance Optimization</h2>

<ol>
  <li><strong>Buffer Management</strong>
    <ul>
      <li>Use circular buffers</li>
      <li>Optimize memory allocation</li>
      <li>Minimize copying</li>
    </ul>
  </li>
  <li><strong>Computational Efficiency</strong>
    <ul>
      <li>Vectorize operations</li>
      <li>Use parallel processing</li>
      <li>Profile and optimize bottlenecks</li>
    </ul>
  </li>
  <li><strong>Latency Reduction</strong>
    <ul>
      <li>Minimize buffer sizes</li>
      <li>Optimize filter designs</li>
      <li>Use efficient data structures</li>
    </ul>
  </li>
</ol>

<h2 id="best-practices">Best Practices</h2>

<ol>
  <li><strong>System Design</strong>
    <ul>
      <li>Modular architecture</li>
      <li>Error handling</li>
      <li>Data validation</li>
    </ul>
  </li>
  <li><strong>Real-time Considerations</strong>
    <ul>
      <li>Timing accuracy</li>
      <li>Buffer overruns</li>
      <li>Resource management</li>
    </ul>
  </li>
  <li><strong>Quality Control</strong>
    <ul>
      <li>Signal quality metrics</li>
      <li>Performance monitoring</li>
      <li>System diagnostics</li>
    </ul>
  </li>
</ol>

<h2 id="conclusion">Conclusion</h2>

<p>Building a real-time EEG processing pipeline requires careful consideration of various factors including data acquisition, processing efficiency, and system reliability. This guide provides a foundation for developing such systems.</p>

<h2 id="references">References</h2>

<ol>
  <li>Brunner, C. et al. (2015). “BCI Software Platforms”</li>
  <li>Delorme, A. &amp; Makeig, S. (2004). “EEGLAB”</li>
  <li>Renard, Y. et al. (2010). “OpenViBE”</li>
</ol>

<h2 id="resources">Resources</h2>

<ul>
  <li><a href="https://labstreaminglayer.readthedocs.io/">LSL Documentation</a></li>
  <li><a href="https://github.com/yourusername/real-time-eeg">Real-time EEG Examples</a></li>
  <li><a href="https://real-time-eeg.readthedocs.io/">Performance Optimization Guide</a></li>
</ul>]]></content><author><name>jimjing</name></author><category term="blog" /><category term="Tutorial" /><category term="Signal Processing" /><category term="EEG" /><category term="Python" /><category term="Signal Processing" /><category term="Tutorial" /><summary type="html"><![CDATA[Detailed guide on building real-time EEG signal processing systems using Python, covering data acquisition, filtering, and feature extraction.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://junlinjing.github.io/jjing-neuro/assets/images/blog/real-time-eeg.jpg" /><media:content medium="image" url="https://junlinjing.github.io/jjing-neuro/assets/images/blog/real-time-eeg.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>