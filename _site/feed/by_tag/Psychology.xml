<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://junlinjing.github.io/jjing-neuro/feed/by_tag/Psychology.xml" rel="self" type="application/atom+xml" /><link href="https://junlinjing.github.io/jjing-neuro/" rel="alternate" type="text/html" /><updated>2025-05-10T00:38:20+02:00</updated><id>https://junlinjing.github.io/jjing-neuro/feed/by_tag/Psychology.xml</id><title type="html">Jim Jing</title><subtitle>A personal academic website focusing on neuroscience research and artificial intelligence</subtitle><entry><title type="html">Cognitive Modeling: From Theory to Practice</title><link href="https://junlinjing.github.io/jjing-neuro/blog/cognitive-modeling" rel="alternate" type="text/html" title="Cognitive Modeling: From Theory to Practice" /><published>2023-12-20T00:00:00+01:00</published><updated>2023-12-20T00:00:00+01:00</updated><id>https://junlinjing.github.io/jjing-neuro/blog/cognitive-modeling</id><content type="html" xml:base="https://junlinjing.github.io/jjing-neuro/blog/cognitive-modeling"><![CDATA[<h1 id="cognitive-modeling-from-theory-to-practice">Cognitive Modeling: From Theory to Practice</h1>

<p>Cognitive modeling is a powerful approach to understanding human cognition by creating computational models that simulate cognitive processes.</p>

<h2 id="introduction-to-cognitive-modeling">Introduction to Cognitive Modeling</h2>

<p>Cognitive models aim to explain and predict human behavior by implementing theoretical frameworks in computational form. These models help bridge the gap between cognitive theory and empirical data.</p>

<h2 id="basic-modeling-approaches">Basic Modeling Approaches</h2>

<h3 id="1-production-systems">1. Production Systems</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ProductionSystem</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">working_memory</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">production_rules</span> <span class="o">=</span> <span class="p">[]</span>
        
    <span class="k">def</span> <span class="nf">add_rule</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">condition</span><span class="p">,</span> <span class="n">action</span><span class="p">):</span>
        <span class="s">"""Add a production rule"""</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">production_rules</span><span class="p">.</span><span class="n">append</span><span class="p">({</span>
            <span class="s">'condition'</span><span class="p">:</span> <span class="n">condition</span><span class="p">,</span>
            <span class="s">'action'</span><span class="p">:</span> <span class="n">action</span>
        <span class="p">})</span>
        
    <span class="k">def</span> <span class="nf">match_rules</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"""Find matching rules based on working memory"""</span>
        <span class="n">matches</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">rule</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">production_rules</span><span class="p">:</span>
            <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">evaluate_condition</span><span class="p">(</span><span class="n">rule</span><span class="p">[</span><span class="s">'condition'</span><span class="p">]):</span>
                <span class="n">matches</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">rule</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">matches</span>
    
    <span class="k">def</span> <span class="nf">evaluate_condition</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">condition</span><span class="p">):</span>
        <span class="s">"""Evaluate if a condition matches working memory"""</span>
        <span class="k">return</span> <span class="nb">all</span><span class="p">(</span>
            <span class="n">key</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">working_memory</span> <span class="ow">and</span> 
            <span class="bp">self</span><span class="p">.</span><span class="n">working_memory</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">==</span> <span class="n">value</span>
            <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">condition</span><span class="p">.</span><span class="n">items</span><span class="p">()</span>
        <span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">execute_action</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">action</span><span class="p">):</span>
        <span class="s">"""Execute the action of a production rule"""</span>
        <span class="k">for</span> <span class="n">operation</span><span class="p">,</span> <span class="n">params</span> <span class="ow">in</span> <span class="n">action</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">operation</span> <span class="o">==</span> <span class="s">'add'</span><span class="p">:</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">working_memory</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
            <span class="k">elif</span> <span class="n">operation</span> <span class="o">==</span> <span class="s">'remove'</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">params</span><span class="p">:</span>
                    <span class="bp">self</span><span class="p">.</span><span class="n">working_memory</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="2-neural-networks-for-cognitive-modeling">2. Neural Networks for Cognitive Modeling</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">torch</span>
<span class="kn">import</span> <span class="nn">torch.nn</span> <span class="k">as</span> <span class="n">nn</span>

<span class="k">class</span> <span class="nc">CognitiveNetwork</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">input_size</span><span class="p">,</span> <span class="n">hidden_size</span><span class="p">,</span> <span class="n">output_size</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">CognitiveNetwork</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">__init__</span><span class="p">()</span>
        
        <span class="bp">self</span><span class="p">.</span><span class="n">encoder</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="n">input_size</span><span class="p">,</span> <span class="n">hidden_size</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.3</span><span class="p">)</span>
        <span class="p">)</span>
        
        <span class="bp">self</span><span class="p">.</span><span class="n">memory</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">LSTM</span><span class="p">(</span>
            <span class="n">hidden_size</span><span class="p">,</span>
            <span class="n">hidden_size</span><span class="p">,</span>
            <span class="n">num_layers</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
            <span class="n">batch_first</span><span class="o">=</span><span class="bp">True</span>
        <span class="p">)</span>
        
        <span class="bp">self</span><span class="p">.</span><span class="n">decoder</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="n">hidden_size</span><span class="p">,</span> <span class="n">hidden_size</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="n">hidden_size</span><span class="p">,</span> <span class="n">output_size</span><span class="p">)</span>
        <span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">hidden</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="c1"># Encode input
</span>        <span class="n">encoded</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">encoder</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        
        <span class="c1"># Process through memory
</span>        <span class="k">if</span> <span class="n">hidden</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">memory_out</span><span class="p">,</span> <span class="n">hidden</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">memory</span><span class="p">(</span><span class="n">encoded</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">memory_out</span><span class="p">,</span> <span class="n">hidden</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">memory</span><span class="p">(</span><span class="n">encoded</span><span class="p">,</span> <span class="n">hidden</span><span class="p">)</span>
            
        <span class="c1"># Decode output
</span>        <span class="n">output</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">decoder</span><span class="p">(</span><span class="n">memory_out</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">output</span><span class="p">,</span> <span class="n">hidden</span>
</code></pre></div></div>

<h2 id="decision-making-models">Decision Making Models</h2>

<h3 id="drift-diffusion-model">Drift Diffusion Model</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="k">def</span> <span class="nf">drift_diffusion_model</span><span class="p">(</span><span class="n">drift_rate</span><span class="p">,</span> <span class="n">threshold</span><span class="p">,</span> <span class="n">noise_std</span><span class="p">,</span> <span class="n">max_steps</span><span class="p">):</span>
    <span class="s">"""Simulate decision making using drift diffusion"""</span>
    <span class="n">evidence</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">step</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_steps</span><span class="p">):</span>
        <span class="c1"># Add evidence and noise
</span>        <span class="n">evidence</span> <span class="o">+=</span> <span class="n">drift_rate</span> <span class="o">+</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">noise_std</span><span class="p">)</span>
        
        <span class="c1"># Check if threshold is reached
</span>        <span class="k">if</span> <span class="nb">abs</span><span class="p">(</span><span class="n">evidence</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">threshold</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span>
                <span class="s">'decision'</span><span class="p">:</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">evidence</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span><span class="p">,</span>
                <span class="s">'reaction_time'</span><span class="p">:</span> <span class="n">step</span><span class="p">,</span>
                <span class="s">'final_evidence'</span><span class="p">:</span> <span class="n">evidence</span>
            <span class="p">}</span>
    
    <span class="c1"># No decision reached
</span>    <span class="k">return</span> <span class="p">{</span>
        <span class="s">'decision'</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
        <span class="s">'reaction_time'</span><span class="p">:</span> <span class="n">max_steps</span><span class="p">,</span>
        <span class="s">'final_evidence'</span><span class="p">:</span> <span class="n">evidence</span>
    <span class="p">}</span>
</code></pre></div></div>

<h2 id="learning-and-memory-models">Learning and Memory Models</h2>

<h3 id="working-memory-model">Working Memory Model</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">WorkingMemoryModel</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">capacity</span><span class="o">=</span><span class="mi">4</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">capacity</span> <span class="o">=</span> <span class="n">capacity</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">items</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">activation</span> <span class="o">=</span> <span class="p">{}</span>
        
    <span class="k">def</span> <span class="nf">add_item</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="mf">1.0</span><span class="p">):</span>
        <span class="s">"""Add item to working memory"""</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">items</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="bp">self</span><span class="p">.</span><span class="n">capacity</span><span class="p">:</span>
            <span class="c1"># Remove least active item
</span>            <span class="n">min_item</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">activation</span><span class="p">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">min_item</span><span class="p">)</span>
            <span class="k">del</span> <span class="bp">self</span><span class="p">.</span><span class="n">activation</span><span class="p">[</span><span class="n">min_item</span><span class="p">]</span>
            
        <span class="bp">self</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">activation</span><span class="p">[</span><span class="n">item</span><span class="p">]</span> <span class="o">=</span> <span class="n">activation</span>
        
    <span class="k">def</span> <span class="nf">decay_activation</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">decay_rate</span><span class="o">=</span><span class="mf">0.1</span><span class="p">):</span>
        <span class="s">"""Apply activation decay"""</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">items</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">activation</span><span class="p">[</span><span class="n">item</span><span class="p">]</span> <span class="o">*=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">decay_rate</span><span class="p">)</span>
            
    <span class="k">def</span> <span class="nf">retrieve_item</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
        <span class="s">"""Attempt to retrieve item from memory"""</span>
        <span class="k">if</span> <span class="n">item</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">items</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">activation</span><span class="p">[</span><span class="n">item</span><span class="p">]</span>
        <span class="k">return</span> <span class="mi">0</span>
</code></pre></div></div>

<h2 id="model-evaluation">Model Evaluation</h2>

<h3 id="parameter-fitting">Parameter Fitting</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fit_model_parameters</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">param_ranges</span><span class="p">,</span> <span class="n">n_iterations</span><span class="o">=</span><span class="mi">1000</span><span class="p">):</span>
    <span class="s">"""Fit model parameters to empirical data"""</span>
    <span class="n">best_params</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">best_fit</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s">'inf'</span><span class="p">)</span>
    
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n_iterations</span><span class="p">):</span>
        <span class="c1"># Sample parameters
</span>        <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
            <span class="n">param</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">uniform</span><span class="p">(</span><span class="n">range_</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">range_</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
            <span class="k">for</span> <span class="n">param</span><span class="p">,</span> <span class="n">range_</span> <span class="ow">in</span> <span class="n">param_ranges</span><span class="p">.</span><span class="n">items</span><span class="p">()</span>
        <span class="p">}</span>
        
        <span class="c1"># Run model
</span>        <span class="n">predictions</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">simulate</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
        
        <span class="c1"># Calculate fit
</span>        <span class="n">fit</span> <span class="o">=</span> <span class="n">calculate_fit</span><span class="p">(</span><span class="n">predictions</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
        
        <span class="c1"># Update best parameters
</span>        <span class="k">if</span> <span class="n">fit</span> <span class="o">&lt;</span> <span class="n">best_fit</span><span class="p">:</span>
            <span class="n">best_fit</span> <span class="o">=</span> <span class="n">fit</span>
            <span class="n">best_params</span> <span class="o">=</span> <span class="n">params</span>
            
    <span class="k">return</span> <span class="n">best_params</span><span class="p">,</span> <span class="n">best_fit</span>

<span class="k">def</span> <span class="nf">calculate_fit</span><span class="p">(</span><span class="n">predictions</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="s">"""Calculate goodness of fit between model predictions and data"""</span>
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">((</span><span class="n">predictions</span> <span class="o">-</span> <span class="n">data</span><span class="p">)</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="applications">Applications</h2>

<ol>
  <li><strong>Learning and Memory</strong>
    <ul>
      <li>Skill acquisition</li>
      <li>Knowledge representation</li>
      <li>Memory retrieval</li>
    </ul>
  </li>
  <li><strong>Decision Making</strong>
    <ul>
      <li>Choice behavior</li>
      <li>Response times</li>
      <li>Risk assessment</li>
    </ul>
  </li>
  <li><strong>Language Processing</strong>
    <ul>
      <li>Sentence comprehension</li>
      <li>Word recognition</li>
      <li>Language production</li>
    </ul>
  </li>
</ol>

<h2 id="best-practices">Best Practices</h2>

<ol>
  <li><strong>Model Development</strong>
    <ul>
      <li>Start simple</li>
      <li>Incremental complexity</li>
      <li>Clear assumptions</li>
    </ul>
  </li>
  <li><strong>Model Validation</strong>
    <ul>
      <li>Multiple datasets</li>
      <li>Cross-validation</li>
      <li>Parameter recovery</li>
    </ul>
  </li>
  <li><strong>Model Comparison</strong>
    <ul>
      <li>Quantitative metrics</li>
      <li>Qualitative assessment</li>
      <li>Theoretical implications</li>
    </ul>
  </li>
</ol>

<h2 id="future-directions">Future Directions</h2>

<ol>
  <li><strong>Integration with Neuroscience</strong>
    <ul>
      <li>Neural constraints</li>
      <li>Brain-behavior mapping</li>
      <li>Multi-level modeling</li>
    </ul>
  </li>
  <li><strong>Advanced Methods</strong>
    <ul>
      <li>Bayesian approaches</li>
      <li>Deep learning integration</li>
      <li>Real-time modeling</li>
    </ul>
  </li>
  <li><strong>Applications</strong>
    <ul>
      <li>Educational technology</li>
      <li>Clinical assessment</li>
      <li>Human-AI interaction</li>
    </ul>
  </li>
</ol>

<h2 id="references">References</h2>

<ol>
  <li>Anderson, J. R. (2009). “How Can the Human Mind Occur in the Physical Universe?”</li>
  <li>Sun, R. (2008). “The Cambridge Handbook of Computational Psychology”</li>
  <li>Busemeyer, J. R., &amp; Diederich, A. (2010). “Cognitive Modeling”</li>
</ol>]]></content><author><name>jimjing</name></author><category term="blog" /><category term="Cognitive Modeling" /><category term="Neural Networks" /><category term="Machine Learning" /><category term="Psychology" /><summary type="html"><![CDATA[Introduction to basic concepts, common methods, and practical applications of cognitive modeling, helping readers understand how to formalize cognitive processes.]]></summary></entry></feed>