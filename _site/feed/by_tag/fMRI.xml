<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/jjing-neuro/feed/by_tag/fMRI.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/jjing-neuro/" rel="alternate" type="text/html" /><updated>2025-05-17T11:31:03+02:00</updated><id>http://localhost:4000/jjing-neuro/feed/by_tag/fMRI.xml</id><title type="html">Jim Jing</title><subtitle>A personal academic website focusing on neuroscience research and artificial intelligence</subtitle><entry><title type="html">A Comprehensive Guide to fMRI Data Preprocessing</title><link href="http://localhost:4000/jjing-neuro/blog/fmri-preprocessing-guide/" rel="alternate" type="text/html" title="A Comprehensive Guide to fMRI Data Preprocessing" /><published>2025-05-17T00:00:00+02:00</published><updated>2025-05-17T00:00:00+02:00</updated><id>http://localhost:4000/jjing-neuro/blog/fmri-preprocessing-guide</id><content type="html" xml:base="http://localhost:4000/jjing-neuro/blog/fmri-preprocessing-guide/"><![CDATA[<h1 id="a-comprehensive-guide-to-fmri-data-preprocessing">A Comprehensive Guide to fMRI Data Preprocessing</h1>

<p>Preprocessing is a critical step in functional MRI analysis that aims to remove unwanted sources of variation and prepare the data for statistical analysis. This tutorial covers the essential preprocessing steps for fMRI data, with practical examples using popular neuroimaging software packages.</p>

<h2 id="why-preprocessing-matters">Why Preprocessing Matters</h2>

<p>Raw fMRI data contains various artifacts and noise sources that can obscure the neural signals of interest:</p>

<ul>
  <li>Head motion during scanning</li>
  <li>Physiological noise (e.g., respiration, cardiac cycles)</li>
  <li>Scanner-related drift</li>
  <li>Timing differences between slice acquisitions</li>
  <li>Anatomical differences between subjects</li>
</ul>

<p>Effective preprocessing minimizes these confounds, enhancing our ability to detect true neural activity and make valid inferences.</p>

<h2 id="required-tools">Required Tools</h2>

<p>For this tutorial, we’ll use:</p>
<ul>
  <li><strong>FSL</strong> (FMRIB Software Library)</li>
  <li><strong>SPM</strong> (Statistical Parametric Mapping)</li>
  <li><strong>Python</strong> with the following libraries:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">nipype</code> (for workflow creation)</li>
      <li><code class="language-plaintext highlighter-rouge">nilearn</code> (for visualization)</li>
      <li><code class="language-plaintext highlighter-rouge">matplotlib</code> (for plotting)</li>
    </ul>
  </li>
</ul>

<h2 id="step-1-dicom-to-nifti-conversion">Step 1: DICOM to NIfTI Conversion</h2>

<p>fMRI data is typically acquired in DICOM format but analyzed in NIfTI format. Here’s how to convert:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">from</span> <span class="nn">nipype.interfaces.dcm2nii</span> <span class="kn">import</span> <span class="n">Dcm2niix</span>

<span class="n">converter</span> <span class="o">=</span> <span class="n">Dcm2niix</span><span class="p">()</span>
<span class="n">converter</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">source_dir</span> <span class="o">=</span> <span class="s">'path/to/dicom_dir'</span>
<span class="n">converter</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">output_dir</span> <span class="o">=</span> <span class="s">'path/to/output_dir'</span>
<span class="n">converter</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">compress</span> <span class="o">=</span> <span class="s">'y'</span>
<span class="n">converter</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="step-2-removing-initial-volumes">Step 2: Removing Initial Volumes</h2>

<p>The first few volumes of an fMRI run are often discarded to allow for T1 equilibration effects:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">nilearn</span> <span class="kn">import</span> <span class="n">image</span>
<span class="n">fmri_img</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">load_img</span><span class="p">(</span><span class="s">'func.nii.gz'</span><span class="p">)</span>
<span class="n">n_vols_to_remove</span> <span class="o">=</span> <span class="mi">4</span>
<span class="n">trimmed_img</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">index_img</span><span class="p">(</span><span class="n">fmri_img</span><span class="p">,</span> <span class="nb">slice</span><span class="p">(</span><span class="n">n_vols_to_remove</span><span class="p">,</span> <span class="bp">None</span><span class="p">))</span>
<span class="n">trimmed_img</span><span class="p">.</span><span class="n">to_filename</span><span class="p">(</span><span class="s">'func_trimmed.nii.gz'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="step-3-slice-timing-correction">Step 3: Slice Timing Correction</h2>

<p>Because fMRI volumes are acquired one slice at a time, different slices are actually acquired at different time points:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">nipype.interfaces</span> <span class="kn">import</span> <span class="n">spm</span>
<span class="n">slice_timing</span> <span class="o">=</span> <span class="n">spm</span><span class="p">.</span><span class="n">SliceTiming</span><span class="p">()</span>
<span class="n">slice_timing</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">in_files</span> <span class="o">=</span> <span class="s">'func_trimmed.nii.gz'</span>
<span class="n">slice_timing</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">num_slices</span> <span class="o">=</span> <span class="mi">36</span>
<span class="n">slice_timing</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">time_repetition</span> <span class="o">=</span> <span class="mf">2.0</span>
<span class="n">slice_timing</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">time_acquisition</span> <span class="o">=</span> <span class="mf">2.0</span> <span class="o">-</span> <span class="p">(</span><span class="mf">2.0</span><span class="o">/</span><span class="mi">36</span><span class="p">)</span>
<span class="n">slice_timing</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">slice_order</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="o">+</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>  <span class="c1"># Interleaved acquisition
</span><span class="n">slice_timing</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">ref_slice</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">slice_timing</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="step-4-motion-correction">Step 4: Motion Correction</h2>

<p>Subject motion during scanning is one of the biggest sources of noise in fMRI:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">nipype.interfaces</span> <span class="kn">import</span> <span class="n">fsl</span>
<span class="n">mcflirt</span> <span class="o">=</span> <span class="n">fsl</span><span class="p">.</span><span class="n">MCFLIRT</span><span class="p">()</span>
<span class="n">mcflirt</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">in_file</span> <span class="o">=</span> <span class="s">'slice_timing_corrected.nii.gz'</span>
<span class="n">mcflirt</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">cost</span> <span class="o">=</span> <span class="s">'mutualinfo'</span>
<span class="n">mcflirt</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">ref_vol</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">mcflirt</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">save_plots</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">mcflirt</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>
</code></pre></div></div>

<p>Visualizing motion parameters:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">motion_params</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">loadtxt</span><span class="p">(</span><span class="s">'motion_parameters.par'</span><span class="p">)</span>
<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">plot</span><span class="p">(</span><span class="n">motion_params</span><span class="p">[:,</span> <span class="p">:</span><span class="mi">3</span><span class="p">])</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'Translation (mm)'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">plot</span><span class="p">(</span><span class="n">motion_params</span><span class="p">[:,</span> <span class="mi">3</span><span class="p">:])</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'Rotation (rad)'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'Volume'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">savefig</span><span class="p">(</span><span class="s">'motion_parameters.png'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="step-5-spatial-normalization">Step 5: Spatial Normalization</h2>

<p>To compare brain activity across subjects, individual brains must be transformed to a standard space:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># First, extract brain from structural image
</span><span class="n">bet</span> <span class="o">=</span> <span class="n">fsl</span><span class="p">.</span><span class="n">BET</span><span class="p">()</span>
<span class="n">bet</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">in_file</span> <span class="o">=</span> <span class="s">'structural.nii.gz'</span>
<span class="n">bet</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">out_file</span> <span class="o">=</span> <span class="s">'structural_brain.nii.gz'</span>
<span class="n">bet</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">frac</span> <span class="o">=</span> <span class="mf">0.5</span>
<span class="n">bet</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>

<span class="c1"># Register functional to structural
</span><span class="n">flirt</span> <span class="o">=</span> <span class="n">fsl</span><span class="p">.</span><span class="n">FLIRT</span><span class="p">()</span>
<span class="n">flirt</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">in_file</span> <span class="o">=</span> <span class="s">'motion_corrected.nii.gz'</span>
<span class="n">flirt</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">reference</span> <span class="o">=</span> <span class="s">'structural_brain.nii.gz'</span>
<span class="n">flirt</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">out_file</span> <span class="o">=</span> <span class="s">'func2struct.nii.gz'</span>
<span class="n">flirt</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">out_matrix_file</span> <span class="o">=</span> <span class="s">'func2struct.mat'</span>
<span class="n">flirt</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>

<span class="c1"># Register structural to standard space (MNI)
</span><span class="n">flirt</span> <span class="o">=</span> <span class="n">fsl</span><span class="p">.</span><span class="n">FLIRT</span><span class="p">()</span>
<span class="n">flirt</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">in_file</span> <span class="o">=</span> <span class="s">'structural_brain.nii.gz'</span>
<span class="n">flirt</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">reference</span> <span class="o">=</span> <span class="s">'MNI152_T1_2mm_brain.nii.gz'</span>
<span class="n">flirt</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">out_file</span> <span class="o">=</span> <span class="s">'struct2mni.nii.gz'</span>
<span class="n">flirt</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">out_matrix_file</span> <span class="o">=</span> <span class="s">'struct2mni.mat'</span>
<span class="n">flirt</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>

<span class="c1"># Apply transformations to functional data
</span><span class="n">concat_xfm</span> <span class="o">=</span> <span class="n">fsl</span><span class="p">.</span><span class="n">ConvertXFM</span><span class="p">()</span>
<span class="n">concat_xfm</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">in_file</span> <span class="o">=</span> <span class="s">'func2struct.mat'</span>
<span class="n">concat_xfm</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">in_file2</span> <span class="o">=</span> <span class="s">'struct2mni.mat'</span>
<span class="n">concat_xfm</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">concat_xfm</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">concat_xfm</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">out_file</span> <span class="o">=</span> <span class="s">'func2mni.mat'</span>
<span class="n">concat_xfm</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>

<span class="n">apply_xfm</span> <span class="o">=</span> <span class="n">fsl</span><span class="p">.</span><span class="n">ApplyXFM</span><span class="p">()</span>
<span class="n">apply_xfm</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">in_file</span> <span class="o">=</span> <span class="s">'motion_corrected.nii.gz'</span>
<span class="n">apply_xfm</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">reference</span> <span class="o">=</span> <span class="s">'MNI152_T1_2mm_brain.nii.gz'</span>
<span class="n">apply_xfm</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">in_matrix_file</span> <span class="o">=</span> <span class="s">'func2mni.mat'</span>
<span class="n">apply_xfm</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">out_file</span> <span class="o">=</span> <span class="s">'func_mni.nii.gz'</span>
<span class="n">apply_xfm</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="step-6-spatial-smoothing">Step 6: Spatial Smoothing</h2>

<p>Smoothing increases signal-to-noise ratio and accommodates anatomical variability:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">smooth</span> <span class="o">=</span> <span class="n">fsl</span><span class="p">.</span><span class="n">Smooth</span><span class="p">()</span>
<span class="n">smooth</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">in_file</span> <span class="o">=</span> <span class="s">'func_mni.nii.gz'</span>
<span class="n">smooth</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">fwhm</span> <span class="o">=</span> <span class="mf">6.0</span>
<span class="n">smooth</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="step-7-temporal-filtering">Step 7: Temporal Filtering</h2>

<p>Remove low-frequency drifts and high-frequency noise:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">filt</span> <span class="o">=</span> <span class="n">fsl</span><span class="p">.</span><span class="n">TemporalFilter</span><span class="p">()</span>
<span class="n">filt</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">in_file</span> <span class="o">=</span> <span class="s">'smoothed_func.nii.gz'</span>
<span class="n">filt</span><span class="p">.</span><span class="n">inputs</span><span class="p">.</span><span class="n">highpass_sigma</span> <span class="o">=</span> <span class="mi">50</span>  <span class="c1"># In seconds for 100s cutoff
</span><span class="n">filt</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="step-8-intensity-normalization">Step 8: Intensity Normalization</h2>

<p>Scale voxel intensities to enable meaningful comparisons:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">nilearn</span> <span class="kn">import</span> <span class="n">image</span>
<span class="n">img</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">load_img</span><span class="p">(</span><span class="s">'filtered_func.nii.gz'</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">img</span><span class="p">.</span><span class="n">get_fdata</span><span class="p">()</span>
<span class="n">mean</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">data</span> <span class="o">/</span> <span class="n">mean</span><span class="p">[:,</span> <span class="p">:,</span> <span class="p">:,</span> <span class="n">np</span><span class="p">.</span><span class="n">newaxis</span><span class="p">]</span> <span class="o">*</span> <span class="mi">100</span>
<span class="n">norm_img</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">new_img_like</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
<span class="n">norm_img</span><span class="p">.</span><span class="n">to_filename</span><span class="p">(</span><span class="s">'normalized_func.nii.gz'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="step-9-quality-control">Step 9: Quality Control</h2>

<p>Always check your preprocessing results for anomalies:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">nilearn</span> <span class="kn">import</span> <span class="n">plotting</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="c1"># Create a report of mean, std, and tSNR images
</span><span class="n">img</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">load_img</span><span class="p">(</span><span class="s">'normalized_func.nii.gz'</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">img</span><span class="p">.</span><span class="n">get_fdata</span><span class="p">()</span>
<span class="n">mean_img</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">new_img_like</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">data</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">3</span><span class="p">))</span>
<span class="n">std_img</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">new_img_like</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">data</span><span class="p">.</span><span class="n">std</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">3</span><span class="p">))</span>
<span class="n">tsnr_img</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">new_img_like</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">data</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span> <span class="o">/</span> <span class="n">data</span><span class="p">.</span><span class="n">std</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">3</span><span class="p">))</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">15</span><span class="p">))</span>
<span class="n">plotting</span><span class="p">.</span><span class="n">plot_epi</span><span class="p">(</span><span class="n">mean_img</span><span class="p">,</span> <span class="n">axes</span><span class="o">=</span><span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">title</span><span class="o">=</span><span class="s">'Mean Image'</span><span class="p">)</span>
<span class="n">plotting</span><span class="p">.</span><span class="n">plot_epi</span><span class="p">(</span><span class="n">std_img</span><span class="p">,</span> <span class="n">axes</span><span class="o">=</span><span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">title</span><span class="o">=</span><span class="s">'Standard Deviation'</span><span class="p">)</span>
<span class="n">plotting</span><span class="p">.</span><span class="n">plot_epi</span><span class="p">(</span><span class="n">tsnr_img</span><span class="p">,</span> <span class="n">axes</span><span class="o">=</span><span class="n">axes</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">title</span><span class="o">=</span><span class="s">'tSNR'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">savefig</span><span class="p">(</span><span class="s">'quality_control.png'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="common-preprocessing-workflows">Common Preprocessing Workflows</h2>

<p>Different research questions may require different preprocessing steps. Here are some common workflows:</p>

<ol>
  <li><strong>Task-based fMRI</strong>:
    <ul>
      <li>Slice timing correction</li>
      <li>Motion correction</li>
      <li>Spatial normalization</li>
      <li>Spatial smoothing (5-8mm FWHM)</li>
      <li>Temporal filtering (high-pass, &gt;0.01Hz)</li>
    </ul>
  </li>
  <li><strong>Resting-state fMRI</strong>:
    <ul>
      <li>Motion correction</li>
      <li>Regress out nuisance variables (CSF, WM signals, motion parameters)</li>
      <li>Spatial normalization</li>
      <li>Spatial smoothing (4-6mm FWHM)</li>
      <li>Bandpass filtering (0.01-0.08Hz)</li>
    </ul>
  </li>
  <li><strong>Multi-echo fMRI</strong>:
    <ul>
      <li>Combine echoes using optimal combination or ICA-based denoising</li>
      <li>Motion correction</li>
      <li>Spatial normalization</li>
      <li>Minimal or no spatial smoothing</li>
    </ul>
  </li>
</ol>

<h2 id="conclusion">Conclusion</h2>

<p>Proper preprocessing is essential for reliable fMRI analysis. The choices made during preprocessing can significantly impact your results, so it’s crucial to understand each step and make informed decisions based on your specific research question.</p>

<p>In future tutorials, we’ll cover statistical analysis methods for extracting meaningful patterns from your preprocessed fMRI data.</p>

<h2 id="references">References</h2>

<ol>
  <li>Poldrack, R. A., Mumford, J. A., &amp; Nichols, T. E. (2011). Handbook of functional MRI data analysis. Cambridge University Press.</li>
  <li>Jenkinson, M., Beckmann, C. F., Behrens, T. E., Woolrich, M. W., &amp; Smith, S. M. (2012). FSL. Neuroimage, 62(2), 782-790.</li>
  <li>Esteban, O., Markiewicz, C. J., Blair, R. W., et al. (2019). fMRIPrep: a robust preprocessing pipeline for functional MRI. Nature Methods, 16(1), 111-116.</li>
</ol>]]></content><author><name>Jim Jing</name></author><category term="tutorials" /><category term="fMRI" /><category term="preprocessing" /><category term="neuroimaging" /><category term="tutorial" /><summary type="html"><![CDATA[A step-by-step tutorial on preprocessing functional MRI data, covering motion correction, slice timing, spatial normalization, and more.]]></summary></entry></feed>