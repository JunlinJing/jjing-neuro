<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://junlinjing.github.io/jjing-neuro/feed/by_tag/EEG.xml" rel="self" type="application/atom+xml" /><link href="https://junlinjing.github.io/jjing-neuro/" rel="alternate" type="text/html" /><updated>2025-05-08T23:40:51+02:00</updated><id>https://junlinjing.github.io/jjing-neuro/feed/by_tag/EEG.xml</id><title type="html">Jim Jing</title><subtitle>A personal academic website focusing on neuroscience research and artificial intelligence</subtitle><entry><title type="html">Introduction to EEG Analysis with Python</title><link href="https://junlinjing.github.io/jjing-neuro/2024/03/introduction-to-eeg-analysis" rel="alternate" type="text/html" title="Introduction to EEG Analysis with Python" /><published>2024-03-20T00:00:00+01:00</published><updated>2024-03-20T00:00:00+01:00</updated><id>https://junlinjing.github.io/jjing-neuro/2024/03/introduction-to-eeg-analysis</id><content type="html" xml:base="https://junlinjing.github.io/jjing-neuro/2024/03/introduction-to-eeg-analysis"><![CDATA[<h1 id="introduction-to-eeg-analysis-with-python">Introduction to EEG Analysis with Python</h1>

<p>Electroencephalography (EEG) is a powerful tool for studying brain activity. In this tutorial, we’ll explore how to analyze EEG data using Python and the popular MNE library.</p>

<h2 id="setting-up-your-environment">Setting Up Your Environment</h2>

<p>First, let’s set up our Python environment with the necessary packages:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">mne</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="c1"># For data visualization
</span><span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
</code></pre></div></div>

<h2 id="loading-and-preprocessing-eeg-data">Loading and Preprocessing EEG Data</h2>

<p>Here’s a basic example of loading and preprocessing EEG data:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Load example data
</span><span class="n">sample_data_folder</span> <span class="o">=</span> <span class="n">mne</span><span class="p">.</span><span class="n">datasets</span><span class="p">.</span><span class="n">sample</span><span class="p">.</span><span class="n">data_path</span><span class="p">()</span>
<span class="n">raw_fname</span> <span class="o">=</span> <span class="n">sample_data_folder</span> <span class="o">+</span> <span class="s">'/MEG/sample/sample_audvis_raw.fif'</span>
<span class="n">raw</span> <span class="o">=</span> <span class="n">mne</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="n">read_raw_fif</span><span class="p">(</span><span class="n">raw_fname</span><span class="p">,</span> <span class="n">preload</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># Basic preprocessing
</span><span class="n">raw</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">40</span><span class="p">)</span>  <span class="c1"># Band-pass filter from 1-40 Hz
</span><span class="n">raw</span><span class="p">.</span><span class="n">notch_filter</span><span class="p">(</span><span class="mi">60</span><span class="p">)</span>  <span class="c1"># Remove power line noise
</span></code></pre></div></div>

<h2 id="analyzing-eeg-data">Analyzing EEG Data</h2>

<p>Let’s look at some basic analysis techniques:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Create epochs
</span><span class="n">events</span> <span class="o">=</span> <span class="n">mne</span><span class="p">.</span><span class="n">find_events</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span>
<span class="n">epochs</span> <span class="o">=</span> <span class="n">mne</span><span class="p">.</span><span class="n">Epochs</span><span class="p">(</span><span class="n">raw</span><span class="p">,</span> <span class="n">events</span><span class="p">,</span> <span class="n">event_id</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">tmin</span><span class="o">=-</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">tmax</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>

<span class="c1"># Calculate and plot evoked response
</span><span class="n">evoked</span> <span class="o">=</span> <span class="n">epochs</span><span class="p">.</span><span class="n">average</span><span class="p">()</span>
<span class="n">evoked</span><span class="p">.</span><span class="n">plot</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="time-frequency-analysis">Time-Frequency Analysis</h2>

<p>Here’s how to perform time-frequency analysis:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">frequencies</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">power</span> <span class="o">=</span> <span class="n">mne</span><span class="p">.</span><span class="n">time_frequency</span><span class="p">.</span><span class="n">tfr_morlet</span><span class="p">(</span><span class="n">epochs</span><span class="p">,</span> <span class="n">frequencies</span><span class="p">,</span> 
                                    <span class="n">n_cycles</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">return_itc</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">power</span><span class="p">.</span><span class="n">plot</span><span class="p">([</span><span class="mi">0</span><span class="p">])</span>
</code></pre></div></div>

<h2 id="eeg-band-analysis">EEG Band Analysis</h2>

<p>A crucial part of EEG analysis is examining different frequency bands:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">analyze_frequency_bands</span><span class="p">(</span><span class="n">raw</span><span class="p">,</span> <span class="n">picks</span><span class="o">=</span><span class="p">[</span><span class="s">'Fz'</span><span class="p">,</span> <span class="s">'Cz'</span><span class="p">,</span> <span class="s">'Pz'</span><span class="p">]):</span>
    <span class="s">"""Analyze standard EEG frequency bands"""</span>
    <span class="c1"># Define frequency bands
</span>    <span class="n">bands</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s">'Delta'</span><span class="p">:</span> <span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span>
        <span class="s">'Theta'</span><span class="p">:</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span>
        <span class="s">'Alpha'</span><span class="p">:</span> <span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">),</span>
        <span class="s">'Beta'</span><span class="p">:</span> <span class="p">(</span><span class="mi">13</span><span class="p">,</span> <span class="mi">30</span><span class="p">),</span>
        <span class="s">'Gamma'</span><span class="p">:</span> <span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="mi">45</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1"># Calculate power spectral density
</span>    <span class="n">psds</span><span class="p">,</span> <span class="n">freqs</span> <span class="o">=</span> <span class="n">mne</span><span class="p">.</span><span class="n">time_frequency</span><span class="p">.</span><span class="n">psd_welch</span><span class="p">(</span><span class="n">raw</span><span class="p">,</span> 
                                              <span class="n">fmin</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span>
                                              <span class="n">fmax</span><span class="o">=</span><span class="mi">45</span><span class="p">,</span>
                                              <span class="n">picks</span><span class="o">=</span><span class="n">picks</span><span class="p">)</span>
    
    <span class="c1"># Calculate band power
</span>    <span class="n">band_powers</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">band</span><span class="p">,</span> <span class="p">(</span><span class="n">fmin</span><span class="p">,</span> <span class="n">fmax</span><span class="p">)</span> <span class="ow">in</span> <span class="n">bands</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
        <span class="n">freq_mask</span> <span class="o">=</span> <span class="p">(</span><span class="n">freqs</span> <span class="o">&gt;=</span> <span class="n">fmin</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">freqs</span> <span class="o">&lt;=</span> <span class="n">fmax</span><span class="p">)</span>
        <span class="n">band_powers</span><span class="p">[</span><span class="n">band</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">psds</span><span class="p">[:,</span> <span class="n">freq_mask</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">band_powers</span>

<span class="c1"># Example visualization
</span><span class="k">def</span> <span class="nf">plot_band_powers</span><span class="p">(</span><span class="n">band_powers</span><span class="p">,</span> <span class="n">channel_names</span><span class="p">):</span>
    <span class="s">"""Plot power in different frequency bands"""</span>
    <span class="n">bands</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">band_powers</span><span class="p">.</span><span class="n">keys</span><span class="p">())</span>
    <span class="n">channels</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">channel_names</span><span class="p">)</span>
    
    <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">bands</span><span class="p">))</span>
    <span class="n">width</span> <span class="o">=</span> <span class="mf">0.8</span> <span class="o">/</span> <span class="n">channels</span>
    
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">channel</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">channel_names</span><span class="p">):</span>
        <span class="n">powers</span> <span class="o">=</span> <span class="p">[</span><span class="n">band_powers</span><span class="p">[</span><span class="n">band</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">band</span> <span class="ow">in</span> <span class="n">bands</span><span class="p">]</span>
        <span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="n">width</span><span class="p">,</span> <span class="n">powers</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="n">channel</span><span class="p">)</span>
    
    <span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Frequency Bands'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Power (µV²/Hz)'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'EEG Band Powers'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">xticks</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">width</span> <span class="o">*</span> <span class="p">(</span><span class="n">channels</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">bands</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="data-quality-assessment">Data Quality Assessment</h2>

<p>Before detailed analysis, it’s important to assess data quality:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">check_data_quality</span><span class="p">(</span><span class="n">raw</span><span class="p">):</span>
    <span class="s">"""Basic data quality checks"""</span>
    <span class="c1"># Check for flat signals
</span>    <span class="n">flat_channels</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">ch_idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">raw</span><span class="p">.</span><span class="n">ch_names</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">np</span><span class="p">.</span><span class="n">std</span><span class="p">(</span><span class="n">raw</span><span class="p">.</span><span class="n">_data</span><span class="p">[</span><span class="n">ch_idx</span><span class="p">])</span> <span class="o">&lt;</span> <span class="mf">1e-6</span><span class="p">:</span>
            <span class="n">flat_channels</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">raw</span><span class="p">.</span><span class="n">ch_names</span><span class="p">[</span><span class="n">ch_idx</span><span class="p">])</span>
    
    <span class="c1"># Check for noisy channels
</span>    <span class="n">noisy_channels</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">zscore_thresh</span> <span class="o">=</span> <span class="mf">4.0</span>
    <span class="k">for</span> <span class="n">ch_idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">raw</span><span class="p">.</span><span class="n">ch_names</span><span class="p">)):</span>
        <span class="n">z_scores</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">stats</span><span class="p">.</span><span class="n">zscore</span><span class="p">(</span><span class="n">raw</span><span class="p">.</span><span class="n">_data</span><span class="p">[</span><span class="n">ch_idx</span><span class="p">]))</span>
        <span class="k">if</span> <span class="n">np</span><span class="p">.</span><span class="nb">any</span><span class="p">(</span><span class="n">z_scores</span> <span class="o">&gt;</span> <span class="n">zscore_thresh</span><span class="p">):</span>
            <span class="n">noisy_channels</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">raw</span><span class="p">.</span><span class="n">ch_names</span><span class="p">[</span><span class="n">ch_idx</span><span class="p">])</span>
    
    <span class="k">return</span> <span class="p">{</span>
        <span class="s">'flat_channels'</span><span class="p">:</span> <span class="n">flat_channels</span><span class="p">,</span>
        <span class="s">'noisy_channels'</span><span class="p">:</span> <span class="n">noisy_channels</span><span class="p">,</span>
        <span class="s">'total_channels'</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">raw</span><span class="p">.</span><span class="n">ch_names</span><span class="p">),</span>
        <span class="s">'duration'</span><span class="p">:</span> <span class="n">raw</span><span class="p">.</span><span class="n">times</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span>
        <span class="s">'sampling_rate'</span><span class="p">:</span> <span class="n">raw</span><span class="p">.</span><span class="n">info</span><span class="p">[</span><span class="s">'sfreq'</span><span class="p">]</span>
    <span class="p">}</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>This introduction covers the basics of EEG analysis with Python. In future posts, we’ll explore more advanced topics like source localization and connectivity analysis.</p>

<h2 id="references">References</h2>

<ol>
  <li>Gramfort, A., et al. (2013). MEG and EEG data analysis with MNE-Python. Frontiers in Neuroscience.</li>
  <li>Cohen, M. X. (2014). Analyzing Neural Time Series Data: Theory and Practice.</li>
</ol>]]></content><author><name></name></author><category term="blog" /><category term="EEG" /><category term="Python" /><category term="Neuroscience" /><summary type="html"><![CDATA[A comprehensive guide to getting started with EEG data analysis using Python and MNE library]]></summary></entry><entry><title type="html">Advanced EEG Data Analysis with Python: From Preprocessing to Machine Learning</title><link href="https://junlinjing.github.io/jjing-neuro/2024/02/eeg-python-tutorial" rel="alternate" type="text/html" title="Advanced EEG Data Analysis with Python: From Preprocessing to Machine Learning" /><published>2024-02-20T10:00:00+01:00</published><updated>2024-02-20T10:00:00+01:00</updated><id>https://junlinjing.github.io/jjing-neuro/2024/02/eeg-python-tutorial</id><content type="html" xml:base="https://junlinjing.github.io/jjing-neuro/2024/02/eeg-python-tutorial"><![CDATA[<h1 id="advanced-eeg-data-analysis-with-python-from-preprocessing-to-machine-learning">Advanced EEG Data Analysis with Python: From Preprocessing to Machine Learning</h1>

<p>Electroencephalography (EEG) data analysis is a crucial skill in modern neuroscience research. This comprehensive tutorial will guide you through advanced techniques for EEG data processing, analysis, and machine learning applications using Python.</p>

<h2 id="prerequisites">Prerequisites</h2>

<ul>
  <li>Basic understanding of Python programming</li>
  <li>Familiarity with signal processing concepts</li>
  <li>Basic knowledge of neuroscience and EEG</li>
</ul>

<h2 id="environment-setup">Environment Setup</h2>

<p>First, create a clean Python environment and install the required packages:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create and activate a new conda environment</span>
conda create <span class="nt">-n</span> eeg_analysis <span class="nv">python</span><span class="o">=</span>3.9
conda activate eeg_analysis

<span class="c"># Install required packages</span>
pip <span class="nb">install </span><span class="nv">mne</span><span class="o">==</span>1.5.1 <span class="nv">numpy</span><span class="o">==</span>1.24.3 <span class="nv">scipy</span><span class="o">==</span>1.11.3 
pip <span class="nb">install </span><span class="nv">matplotlib</span><span class="o">==</span>3.8.0 <span class="nv">pandas</span><span class="o">==</span>2.1.1 <span class="nv">seaborn</span><span class="o">==</span>0.13.0
pip <span class="nb">install </span>scikit-learn<span class="o">==</span>1.3.1 <span class="nv">antropy</span><span class="o">==</span>0.1.6
</code></pre></div></div>

<h2 id="data-acquisition-and-initial-processing">Data Acquisition and Initial Processing</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">mne</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
<span class="kn">from</span> <span class="nn">scipy</span> <span class="kn">import</span> <span class="n">signal</span>
<span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
<span class="kn">import</span> <span class="nn">antropy</span> <span class="k">as</span> <span class="n">ant</span>

<span class="c1"># Set random seed for reproducibility
</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">load_and_prepare_data</span><span class="p">(</span><span class="n">raw_file</span><span class="p">):</span>
    <span class="s">"""
    Load and prepare EEG data with proper documentation
    
    Parameters:
    -----------
    raw_file : str
        Path to the raw EEG data file
        
    Returns:
    --------
    raw : mne.io.Raw
        Loaded and preprocessed EEG data
    """</span>
    <span class="n">raw</span> <span class="o">=</span> <span class="n">mne</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="n">read_raw_fif</span><span class="p">(</span><span class="n">raw_file</span><span class="p">,</span> <span class="n">preload</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">raw</span><span class="p">.</span><span class="n">pick_types</span><span class="p">(</span><span class="n">meg</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">eeg</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">eog</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">raw</span>

<span class="c1"># Example usage
</span><span class="n">raw</span> <span class="o">=</span> <span class="n">load_and_prepare_data</span><span class="p">(</span><span class="s">'sample_audvis_raw.fif'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="advanced-preprocessing-pipeline">Advanced Preprocessing Pipeline</h2>

<h3 id="1-noise-reduction-and-filtering">1. Noise Reduction and Filtering</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">preprocess_eeg</span><span class="p">(</span><span class="n">raw</span><span class="p">,</span> <span class="n">l_freq</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">h_freq</span><span class="o">=</span><span class="mi">40</span><span class="p">,</span> <span class="n">notch_freq</span><span class="o">=</span><span class="mi">50</span><span class="p">):</span>
    <span class="s">"""
    Comprehensive EEG preprocessing pipeline
    
    Parameters:
    -----------
    raw : mne.io.Raw
        Raw EEG data
    l_freq : float
        Lower frequency bound for bandpass filter
    h_freq : float
        Upper frequency bound for bandpass filter
    notch_freq : float
        Frequency for notch filter (usually power line frequency)
    
    Returns:
    --------
    raw : mne.io.Raw
        Preprocessed EEG data
    """</span>
    <span class="c1"># Apply notch filter for power line interference
</span>    <span class="n">raw</span><span class="p">.</span><span class="n">notch_filter</span><span class="p">(</span><span class="n">freqs</span><span class="o">=</span><span class="n">notch_freq</span><span class="p">)</span>
    
    <span class="c1"># Apply bandpass filter
</span>    <span class="n">raw</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">l_freq</span><span class="o">=</span><span class="n">l_freq</span><span class="p">,</span> <span class="n">h_freq</span><span class="o">=</span><span class="n">h_freq</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">raw</span>
</code></pre></div></div>

<h3 id="2-advanced-artifact-removal">2. Advanced Artifact Removal</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">remove_artifacts</span><span class="p">(</span><span class="n">raw</span><span class="p">,</span> <span class="n">n_components</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">):</span>
    <span class="s">"""
    Advanced artifact removal using ICA and automated component selection
    """</span>
    <span class="c1"># Prepare ICA
</span>    <span class="n">ica</span> <span class="o">=</span> <span class="n">mne</span><span class="p">.</span><span class="n">preprocessing</span><span class="p">.</span><span class="n">ICA</span><span class="p">(</span>
        <span class="n">n_components</span><span class="o">=</span><span class="n">n_components</span><span class="p">,</span>
        <span class="n">random_state</span><span class="o">=</span><span class="n">random_state</span><span class="p">,</span>
        <span class="n">method</span><span class="o">=</span><span class="s">'fastica'</span>
    <span class="p">)</span>
    
    <span class="c1"># Fit ICA
</span>    <span class="n">ica</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span>
    
    <span class="c1"># Automatically detect eye blink components
</span>    <span class="n">eog_indices</span><span class="p">,</span> <span class="n">eog_scores</span> <span class="o">=</span> <span class="n">ica</span><span class="p">.</span><span class="n">find_bads_eog</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span>
    
    <span class="c1"># Detect and remove additional artifact components
</span>    <span class="n">ica</span><span class="p">.</span><span class="n">exclude</span> <span class="o">=</span> <span class="n">eog_indices</span>
    
    <span class="c1"># Apply ICA
</span>    <span class="n">raw_clean</span> <span class="o">=</span> <span class="n">raw</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
    <span class="n">ica</span><span class="p">.</span><span class="nb">apply</span><span class="p">(</span><span class="n">raw_clean</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">raw_clean</span><span class="p">,</span> <span class="n">ica</span>
</code></pre></div></div>

<h2 id="feature-engineering">Feature Engineering</h2>

<h3 id="1-advanced-time-frequency-analysis">1. Advanced Time-Frequency Analysis</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">extract_advanced_features</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">fs</span><span class="p">,</span> <span class="n">bands</span><span class="p">):</span>
    <span class="s">"""
    Extract comprehensive EEG features including:
    - Band powers
    - Spectral entropy
    - Hjorth parameters
    - Sample entropy
    """</span>
    <span class="n">features</span> <span class="o">=</span> <span class="p">{}</span>
    
    <span class="c1"># Compute band powers
</span>    <span class="k">for</span> <span class="n">band_name</span><span class="p">,</span> <span class="p">(</span><span class="n">fmin</span><span class="p">,</span> <span class="n">fmax</span><span class="p">)</span> <span class="ow">in</span> <span class="n">bands</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
        <span class="n">freqs</span><span class="p">,</span> <span class="n">psd</span> <span class="o">=</span> <span class="n">signal</span><span class="p">.</span><span class="n">welch</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">fs</span><span class="p">,</span> <span class="n">nperseg</span><span class="o">=</span><span class="n">fs</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>
        <span class="n">idx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">logical_and</span><span class="p">(</span><span class="n">freqs</span> <span class="o">&gt;=</span> <span class="n">fmin</span><span class="p">,</span> <span class="n">freqs</span> <span class="o">&lt;=</span> <span class="n">fmax</span><span class="p">)</span>
        <span class="n">features</span><span class="p">[</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">band_name</span><span class="si">}</span><span class="s">_power'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">psd</span><span class="p">[:,</span> <span class="n">idx</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    
    <span class="c1"># Compute spectral entropy
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
        <span class="n">features</span><span class="p">[</span><span class="sa">f</span><span class="s">'spectral_entropy_ch</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">ant</span><span class="p">.</span><span class="n">spectral_entropy</span><span class="p">(</span>
            <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">fs</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="s">'welch'</span>
        <span class="p">)</span>
    
    <span class="c1"># Compute Hjorth parameters
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
        <span class="n">activity</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">var</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="n">mobility</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">var</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">diff</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span> <span class="o">/</span> <span class="n">activity</span><span class="p">)</span>
        <span class="n">complexity</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span>
            <span class="n">np</span><span class="p">.</span><span class="n">var</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">diff</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">diff</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">])))</span> <span class="o">*</span> <span class="n">activity</span> <span class="o">/</span>
            <span class="n">np</span><span class="p">.</span><span class="n">var</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">diff</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>
        <span class="p">)</span>
        <span class="n">features</span><span class="p">[</span><span class="sa">f</span><span class="s">'hjorth_activity_ch</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">activity</span>
        <span class="n">features</span><span class="p">[</span><span class="sa">f</span><span class="s">'hjorth_mobility_ch</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">mobility</span>
        <span class="n">features</span><span class="p">[</span><span class="sa">f</span><span class="s">'hjorth_complexity_ch</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">complexity</span>
    
    <span class="k">return</span> <span class="n">features</span>
</code></pre></div></div>

<h3 id="2-connectivity-analysis">2. Connectivity Analysis</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">compute_connectivity</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">sfreq</span><span class="p">,</span> <span class="n">fmin</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">fmax</span><span class="o">=</span><span class="mi">13</span><span class="p">):</span>
    <span class="s">"""
    Compute advanced connectivity metrics
    """</span>
    <span class="kn">from</span> <span class="nn">mne.connectivity</span> <span class="kn">import</span> <span class="n">spectral_connectivity</span>
    
    <span class="c1"># Compute WPLI connectivity
</span>    <span class="n">con</span> <span class="o">=</span> <span class="n">spectral_connectivity</span><span class="p">(</span>
        <span class="n">data</span><span class="p">,</span>
        <span class="n">method</span><span class="o">=</span><span class="s">'wpli'</span><span class="p">,</span>
        <span class="n">mode</span><span class="o">=</span><span class="s">'multitaper'</span><span class="p">,</span>
        <span class="n">sfreq</span><span class="o">=</span><span class="n">sfreq</span><span class="p">,</span>
        <span class="n">fmin</span><span class="o">=</span><span class="n">fmin</span><span class="p">,</span>
        <span class="n">fmax</span><span class="o">=</span><span class="n">fmax</span><span class="p">,</span>
        <span class="n">faverage</span><span class="o">=</span><span class="bp">True</span>
    <span class="p">)</span>
    
    <span class="c1"># Compute additional connectivity metrics
</span>    <span class="n">con_pli</span> <span class="o">=</span> <span class="n">spectral_connectivity</span><span class="p">(</span>
        <span class="n">data</span><span class="p">,</span>
        <span class="n">method</span><span class="o">=</span><span class="s">'pli'</span><span class="p">,</span>
        <span class="n">mode</span><span class="o">=</span><span class="s">'multitaper'</span><span class="p">,</span>
        <span class="n">sfreq</span><span class="o">=</span><span class="n">sfreq</span><span class="p">,</span>
        <span class="n">fmin</span><span class="o">=</span><span class="n">fmin</span><span class="p">,</span>
        <span class="n">fmax</span><span class="o">=</span><span class="n">fmax</span><span class="p">,</span>
        <span class="n">faverage</span><span class="o">=</span><span class="bp">True</span>
    <span class="p">)</span>
    
    <span class="k">return</span> <span class="n">con</span><span class="p">,</span> <span class="n">con_pli</span>
</code></pre></div></div>

<h2 id="advanced-visualization">Advanced Visualization</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create_advanced_visualization</span><span class="p">(</span><span class="n">raw</span><span class="p">,</span> <span class="n">features</span><span class="p">,</span> <span class="n">bands</span><span class="p">):</span>
    <span class="s">"""
    Create comprehensive EEG visualizations
    """</span>
    <span class="c1"># Create figure with subplots
</span>    <span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>
    
    <span class="c1"># Plot 1: Time series
</span>    <span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">221</span><span class="p">)</span>
    <span class="n">raw</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">duration</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">n_channels</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">)</span>
    
    <span class="c1"># Plot 2: Topographic map
</span>    <span class="n">ax2</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">222</span><span class="p">)</span>
    <span class="n">mne</span><span class="p">.</span><span class="n">viz</span><span class="p">.</span><span class="n">plot_topomap</span><span class="p">(</span><span class="n">features</span><span class="p">[</span><span class="s">'alpha_power'</span><span class="p">],</span> <span class="n">raw</span><span class="p">.</span><span class="n">info</span><span class="p">,</span> <span class="n">axes</span><span class="o">=</span><span class="n">ax2</span><span class="p">)</span>
    
    <span class="c1"># Plot 3: Connectivity matrix
</span>    <span class="n">ax3</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">223</span><span class="p">)</span>
    <span class="n">sns</span><span class="p">.</span><span class="n">heatmap</span><span class="p">(</span><span class="n">features</span><span class="p">[</span><span class="s">'connectivity'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax3</span><span class="p">)</span>
    
    <span class="c1"># Plot 4: Band powers
</span>    <span class="n">ax4</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">224</span><span class="p">)</span>
    <span class="n">plot_band_powers</span><span class="p">(</span><span class="n">features</span><span class="p">,</span> <span class="n">bands</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax4</span><span class="p">)</span>
    
    <span class="n">plt</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">fig</span>
</code></pre></div></div>

<h2 id="machine-learning-pipeline">Machine Learning Pipeline</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sklearn.pipeline</span> <span class="kn">import</span> <span class="n">Pipeline</span>
<span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
<span class="kn">from</span> <span class="nn">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">RandomForestClassifier</span>
<span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">cross_val_score</span>

<span class="k">def</span> <span class="nf">create_ml_pipeline</span><span class="p">(</span><span class="n">features</span><span class="p">,</span> <span class="n">labels</span><span class="p">):</span>
    <span class="s">"""
    Create and evaluate a machine learning pipeline for EEG classification
    """</span>
    <span class="c1"># Create pipeline
</span>    <span class="n">pipeline</span> <span class="o">=</span> <span class="n">Pipeline</span><span class="p">([</span>
        <span class="p">(</span><span class="s">'scaler'</span><span class="p">,</span> <span class="n">StandardScaler</span><span class="p">()),</span>
        <span class="p">(</span><span class="s">'classifier'</span><span class="p">,</span> <span class="n">RandomForestClassifier</span><span class="p">(</span>
            <span class="n">n_estimators</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span>
            <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">,</span>
            <span class="n">class_weight</span><span class="o">=</span><span class="s">'balanced'</span>
        <span class="p">))</span>
    <span class="p">])</span>
    
    <span class="c1"># Perform cross-validation
</span>    <span class="n">scores</span> <span class="o">=</span> <span class="n">cross_val_score</span><span class="p">(</span>
        <span class="n">pipeline</span><span class="p">,</span>
        <span class="n">features</span><span class="p">,</span>
        <span class="n">labels</span><span class="p">,</span>
        <span class="n">cv</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>
        <span class="n">scoring</span><span class="o">=</span><span class="s">'balanced_accuracy'</span>
    <span class="p">)</span>
    
    <span class="k">return</span> <span class="n">pipeline</span><span class="p">,</span> <span class="n">scores</span>
</code></pre></div></div>

<h2 id="example-application-motor-imagery-classification">Example Application: Motor Imagery Classification</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">motor_imagery_analysis</span><span class="p">():</span>
    <span class="s">"""
    Complete example of motor imagery classification
    """</span>
    <span class="c1"># Load motor imagery data
</span>    <span class="n">raw</span> <span class="o">=</span> <span class="n">mne</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="n">read_raw_fif</span><span class="p">(</span><span class="s">'motor_imagery_data.fif'</span><span class="p">,</span> <span class="n">preload</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    
    <span class="c1"># Preprocess data
</span>    <span class="n">raw_clean</span> <span class="o">=</span> <span class="n">preprocess_eeg</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span>
    
    <span class="c1"># Extract features
</span>    <span class="n">features</span> <span class="o">=</span> <span class="n">extract_advanced_features</span><span class="p">(</span><span class="n">raw_clean</span><span class="p">.</span><span class="n">get_data</span><span class="p">(),</span> <span class="n">raw</span><span class="p">.</span><span class="n">info</span><span class="p">[</span><span class="s">'sfreq'</span><span class="p">])</span>
    
    <span class="c1"># Create and evaluate ML pipeline
</span>    <span class="n">pipeline</span><span class="p">,</span> <span class="n">scores</span> <span class="o">=</span> <span class="n">create_ml_pipeline</span><span class="p">(</span><span class="n">features</span><span class="p">,</span> <span class="n">labels</span><span class="p">)</span>
    
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Cross-validation scores: </span><span class="si">{</span><span class="n">scores</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span><span class="si">:</span><span class="p">.</span><span class="mi">3</span><span class="n">f</span><span class="si">}</span><span class="s"> (+/- </span><span class="si">{</span><span class="n">scores</span><span class="p">.</span><span class="n">std</span><span class="p">()</span><span class="o">*</span><span class="mi">2</span><span class="si">:</span><span class="p">.</span><span class="mi">3</span><span class="n">f</span><span class="si">}</span><span class="s">)"</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">pipeline</span><span class="p">,</span> <span class="n">scores</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>This advanced tutorial has covered:</p>
<ol>
  <li>Professional-grade preprocessing techniques</li>
  <li>Advanced feature extraction methods</li>
  <li>Comprehensive visualization approaches</li>
  <li>Robust machine learning pipeline development</li>
  <li>Real-world application example</li>
</ol>

<p>The complete implementation, including additional examples and datasets, is available in our <a href="https://github.com/research-lab/advanced-eeg-analysis">GitHub repository</a>.</p>

<h2 id="references">References</h2>

<ol>
  <li>Gramfort, A., et al. (2023). “MNE-Python: State-of-the-art MEG/EEG analysis in Python”</li>
  <li>Cohen, M. X. (2022). “A deep dive into neural time series analysis”</li>
  <li>Makeig, S., et al. (2021). “Advanced methods in EEG/MEG analysis”</li>
  <li>Lotte, F., et al. (2023). “A review of classification algorithms for EEG-based brain-computer interfaces”</li>
</ol>]]></content><author><name>researcher</name></author><category term="blog" /><category term="python" /><category term="neuroscience" /><category term="EEG" /><category term="tutorial" /><category term="machine learning" /><category term="signal processing" /><summary type="html"><![CDATA[A comprehensive guide to analyzing EEG data using Python, covering advanced preprocessing techniques, feature extraction, and machine learning applications]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://junlinjing.github.io/jjing-neuro/assets/images/blog/2024/eeg-python-tutorial.jpg" /><media:content medium="image" url="https://junlinjing.github.io/jjing-neuro/assets/images/blog/2024/eeg-python-tutorial.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Applications of Deep Learning in EEG Signal Processing</title><link href="https://junlinjing.github.io/jjing-neuro/2024/01/deep-learning-eeg" rel="alternate" type="text/html" title="Applications of Deep Learning in EEG Signal Processing" /><published>2024-01-15T00:00:00+01:00</published><updated>2024-01-15T00:00:00+01:00</updated><id>https://junlinjing.github.io/jjing-neuro/2024/01/deep-learning-eeg</id><content type="html" xml:base="https://junlinjing.github.io/jjing-neuro/2024/01/deep-learning-eeg"><![CDATA[<h1 id="applications-of-deep-learning-in-eeg-signal-processing">Applications of Deep Learning in EEG Signal Processing</h1>

<p>Deep learning has revolutionized how we process and analyze EEG signals. This article explores various deep learning approaches for EEG analysis.</p>

<h2 id="introduction-to-deep-learning-for-eeg">Introduction to Deep Learning for EEG</h2>

<p>Deep learning models can automatically learn hierarchical features from raw EEG data, often outperforming traditional methods that rely on hand-crafted features.</p>

<h2 id="convolutional-neural-networks-for-eeg">Convolutional Neural Networks for EEG</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">torch</span>
<span class="kn">import</span> <span class="nn">torch.nn</span> <span class="k">as</span> <span class="n">nn</span>

<span class="k">class</span> <span class="nc">EEGConvNet</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n_channels</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span> <span class="n">n_classes</span><span class="o">=</span><span class="mi">4</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">EEGConvNet</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">__init__</span><span class="p">()</span>
        
        <span class="c1"># Temporal convolution
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">temporal_conv</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">64</span><span class="p">),</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">BatchNorm2d</span><span class="p">(</span><span class="mi">16</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)</span>
        <span class="p">)</span>
        
        <span class="c1"># Spatial convolution
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">spatial_conv</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="p">(</span><span class="n">n_channels</span><span class="p">,</span> <span class="mi">1</span><span class="p">)),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">BatchNorm2d</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)</span>
        <span class="p">)</span>
        
        <span class="c1"># Classification head
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">classifier</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">AdaptiveAvgPool2d</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">120</span><span class="p">)),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Flatten</span><span class="p">(),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">32</span> <span class="o">*</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">64</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.5</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="n">n_classes</span><span class="p">)</span>
        <span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="c1"># x shape: (batch, 1, channels, time)
</span>        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">temporal_conv</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">spatial_conv</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">classifier</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="recurrent-neural-networks-for-eeg">Recurrent Neural Networks for EEG</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">EEGlstm</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">input_size</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span> <span class="n">hidden_size</span><span class="o">=</span><span class="mi">64</span><span class="p">,</span> <span class="n">num_layers</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">n_classes</span><span class="o">=</span><span class="mi">4</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">EEGlstm</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">__init__</span><span class="p">()</span>
        
        <span class="bp">self</span><span class="p">.</span><span class="n">lstm</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">LSTM</span><span class="p">(</span>
            <span class="n">input_size</span><span class="o">=</span><span class="n">input_size</span><span class="p">,</span>
            <span class="n">hidden_size</span><span class="o">=</span><span class="n">hidden_size</span><span class="p">,</span>
            <span class="n">num_layers</span><span class="o">=</span><span class="n">num_layers</span><span class="p">,</span>
            <span class="n">batch_first</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
            <span class="n">dropout</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span>
            <span class="n">bidirectional</span><span class="o">=</span><span class="bp">True</span>
        <span class="p">)</span>
        
        <span class="bp">self</span><span class="p">.</span><span class="n">classifier</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="n">hidden_size</span> <span class="o">*</span> <span class="mi">2</span><span class="p">,</span> <span class="n">hidden_size</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.5</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="n">hidden_size</span><span class="p">,</span> <span class="n">n_classes</span><span class="p">)</span>
        <span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="c1"># x shape: (batch, time, channels)
</span>        <span class="n">lstm_out</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">lstm</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="c1"># Use last time step output
</span>        <span class="n">last_hidden</span> <span class="o">=</span> <span class="n">lstm_out</span><span class="p">[:,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">:]</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">classifier</span><span class="p">(</span><span class="n">last_hidden</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="transformer-models-for-eeg">Transformer Models for EEG</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">EEGTransformer</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n_channels</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span> <span class="n">n_timepoints</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span> <span class="n">n_classes</span><span class="o">=</span><span class="mi">4</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">EEGTransformer</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">__init__</span><span class="p">()</span>
        
        <span class="c1"># Positional encoding
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">pos_encoder</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Parameter</span><span class="p">(</span>
            <span class="n">torch</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n_timepoints</span><span class="p">,</span> <span class="n">n_channels</span><span class="p">)</span>
        <span class="p">)</span>
        
        <span class="c1"># Transformer encoder
</span>        <span class="n">encoder_layer</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">TransformerEncoderLayer</span><span class="p">(</span>
            <span class="n">d_model</span><span class="o">=</span><span class="n">n_channels</span><span class="p">,</span>
            <span class="n">nhead</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span>
            <span class="n">dim_feedforward</span><span class="o">=</span><span class="mi">128</span><span class="p">,</span>
            <span class="n">dropout</span><span class="o">=</span><span class="mf">0.1</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">transformer</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">TransformerEncoder</span><span class="p">(</span>
            <span class="n">encoder_layer</span><span class="p">,</span>
            <span class="n">num_layers</span><span class="o">=</span><span class="mi">4</span>
        <span class="p">)</span>
        
        <span class="c1"># Classification head
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">classifier</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="n">n_channels</span> <span class="o">*</span> <span class="n">n_timepoints</span><span class="p">,</span> <span class="mi">256</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.5</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">256</span><span class="p">,</span> <span class="n">n_classes</span><span class="p">)</span>
        <span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="c1"># Add positional encoding
</span>        <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="bp">self</span><span class="p">.</span><span class="n">pos_encoder</span>
        <span class="c1"># Transform
</span>        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">transformer</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="c1"># Classify
</span>        <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">classifier</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="data-preprocessing-for-deep-learning">Data Preprocessing for Deep Learning</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">preprocess_eeg</span><span class="p">(</span><span class="n">raw_eeg</span><span class="p">,</span> <span class="n">sfreq</span><span class="o">=</span><span class="mi">250</span><span class="p">):</span>
    <span class="s">"""Preprocess EEG data for deep learning"""</span>
    <span class="c1"># Bandpass filter
</span>    <span class="n">filtered</span> <span class="o">=</span> <span class="n">mne</span><span class="p">.</span><span class="nb">filter</span><span class="p">.</span><span class="n">filter_data</span><span class="p">(</span>
        <span class="n">raw_eeg</span><span class="p">,</span>
        <span class="n">sfreq</span><span class="o">=</span><span class="n">sfreq</span><span class="p">,</span>
        <span class="n">l_freq</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
        <span class="n">h_freq</span><span class="o">=</span><span class="mi">40</span>
    <span class="p">)</span>
    
    <span class="c1"># Normalize
</span>    <span class="n">normalized</span> <span class="o">=</span> <span class="p">(</span><span class="n">filtered</span> <span class="o">-</span> <span class="n">filtered</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">keepdims</span><span class="o">=</span><span class="bp">True</span><span class="p">))</span> <span class="o">/</span> \
                 <span class="n">filtered</span><span class="p">.</span><span class="n">std</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">keepdims</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    
    <span class="c1"># Segment into epochs
</span>    <span class="n">epochs</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">window_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">sfreq</span><span class="p">)</span>  <span class="c1"># 2-second windows
</span>    <span class="n">stride</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mf">0.5</span> <span class="o">*</span> <span class="n">sfreq</span><span class="p">)</span>     <span class="c1"># 0.5-second stride
</span>    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">normalized</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">window_size</span><span class="p">,</span> <span class="n">stride</span><span class="p">):</span>
        <span class="n">epochs</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalized</span><span class="p">[:,</span> <span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="n">window_size</span><span class="p">])</span>
    
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">epochs</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="training-pipeline">Training Pipeline</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">train_eeg_model</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">train_loader</span><span class="p">,</span> <span class="n">val_loader</span><span class="p">,</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">100</span><span class="p">):</span>
    <span class="s">"""Train deep learning model on EEG data"""</span>
    <span class="n">criterion</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">CrossEntropyLoss</span><span class="p">()</span>
    <span class="n">optimizer</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">optim</span><span class="p">.</span><span class="n">Adam</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="n">parameters</span><span class="p">(),</span> <span class="n">lr</span><span class="o">=</span><span class="mf">0.001</span><span class="p">)</span>
    <span class="n">scheduler</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">optim</span><span class="p">.</span><span class="n">lr_scheduler</span><span class="p">.</span><span class="n">ReduceLROnPlateau</span><span class="p">(</span>
        <span class="n">optimizer</span><span class="p">,</span>
        <span class="n">mode</span><span class="o">=</span><span class="s">'min'</span><span class="p">,</span>
        <span class="n">factor</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span>
        <span class="n">patience</span><span class="o">=</span><span class="mi">5</span>
    <span class="p">)</span>
    
    <span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">epochs</span><span class="p">):</span>
        <span class="c1"># Training
</span>        <span class="n">model</span><span class="p">.</span><span class="n">train</span><span class="p">()</span>
        <span class="n">train_loss</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">data</span><span class="p">,</span> <span class="n">labels</span> <span class="ow">in</span> <span class="n">train_loader</span><span class="p">:</span>
            <span class="n">optimizer</span><span class="p">.</span><span class="n">zero_grad</span><span class="p">()</span>
            <span class="n">outputs</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="n">loss</span> <span class="o">=</span> <span class="n">criterion</span><span class="p">(</span><span class="n">outputs</span><span class="p">,</span> <span class="n">labels</span><span class="p">)</span>
            <span class="n">loss</span><span class="p">.</span><span class="n">backward</span><span class="p">()</span>
            <span class="n">optimizer</span><span class="p">.</span><span class="n">step</span><span class="p">()</span>
            <span class="n">train_loss</span> <span class="o">+=</span> <span class="n">loss</span><span class="p">.</span><span class="n">item</span><span class="p">()</span>
            
        <span class="c1"># Validation
</span>        <span class="n">model</span><span class="p">.</span><span class="nb">eval</span><span class="p">()</span>
        <span class="n">val_loss</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">correct</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">with</span> <span class="n">torch</span><span class="p">.</span><span class="n">no_grad</span><span class="p">():</span>
            <span class="k">for</span> <span class="n">data</span><span class="p">,</span> <span class="n">labels</span> <span class="ow">in</span> <span class="n">val_loader</span><span class="p">:</span>
                <span class="n">outputs</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
                <span class="n">loss</span> <span class="o">=</span> <span class="n">criterion</span><span class="p">(</span><span class="n">outputs</span><span class="p">,</span> <span class="n">labels</span><span class="p">)</span>
                <span class="n">val_loss</span> <span class="o">+=</span> <span class="n">loss</span><span class="p">.</span><span class="n">item</span><span class="p">()</span>
                <span class="n">_</span><span class="p">,</span> <span class="n">predicted</span> <span class="o">=</span> <span class="n">outputs</span><span class="p">.</span><span class="nb">max</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
                <span class="n">total</span> <span class="o">+=</span> <span class="n">labels</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
                <span class="n">correct</span> <span class="o">+=</span> <span class="n">predicted</span><span class="p">.</span><span class="n">eq</span><span class="p">(</span><span class="n">labels</span><span class="p">).</span><span class="nb">sum</span><span class="p">().</span><span class="n">item</span><span class="p">()</span>
                
        <span class="c1"># Update learning rate
</span>        <span class="n">scheduler</span><span class="p">.</span><span class="n">step</span><span class="p">(</span><span class="n">val_loss</span><span class="p">)</span>
        
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Epoch </span><span class="si">{</span><span class="n">epoch</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">epochs</span><span class="si">}</span><span class="s">:'</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Train Loss: </span><span class="si">{</span><span class="n">train_loss</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">train_loader</span><span class="p">)</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Val Loss: </span><span class="si">{</span><span class="n">val_loss</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">val_loader</span><span class="p">)</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Val Accuracy: </span><span class="si">{</span><span class="mf">100.</span><span class="o">*</span><span class="n">correct</span><span class="o">/</span><span class="n">total</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s">%'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="best-practices">Best Practices</h2>

<ol>
  <li><strong>Data Augmentation</strong>
    <ul>
      <li>Time shifting</li>
      <li>Adding noise</li>
      <li>Channel dropout</li>
      <li>Frequency warping</li>
    </ul>
  </li>
  <li><strong>Model Selection</strong>
    <ul>
      <li>CNNs for spatial-temporal patterns</li>
      <li>RNNs for sequential dependencies</li>
      <li>Transformers for long-range dependencies</li>
    </ul>
  </li>
  <li><strong>Training Tips</strong>
    <ul>
      <li>Use appropriate batch size</li>
      <li>Apply learning rate scheduling</li>
      <li>Implement early stopping</li>
      <li>Use proper validation strategy</li>
    </ul>
  </li>
</ol>

<h2 id="future-directions">Future Directions</h2>

<ol>
  <li><strong>Self-supervised Learning</strong>
    <ul>
      <li>Contrastive learning</li>
      <li>Masked signal modeling</li>
      <li>Signal reconstruction</li>
    </ul>
  </li>
  <li><strong>Transfer Learning</strong>
    <ul>
      <li>Cross-subject adaptation</li>
      <li>Cross-dataset generalization</li>
      <li>Domain adaptation</li>
    </ul>
  </li>
  <li><strong>Interpretability</strong>
    <ul>
      <li>Attention visualization</li>
      <li>Layer-wise relevance propagation</li>
      <li>Saliency mapping</li>
    </ul>
  </li>
</ol>

<h2 id="references">References</h2>

<ol>
  <li>Craik, A., et al. (2019). “Deep learning for electroencephalogram (EEG) classification tasks: a review.”</li>
  <li>Roy, Y., et al. (2019). “Deep learning-based electroencephalography analysis: a systematic review.”</li>
  <li>Zhang, X., et al. (2021). “Deep learning for EEG-based brain-computer interfaces: A review.”</li>
</ol>]]></content><author><name>jimjing</name></author><category term="Deep Learning" /><category term="EEG" /><category term="Neural Networks" /><category term="Signal Processing" /><summary type="html"><![CDATA[Exploring how to use deep learning models to process and analyze EEG signal data, including signal preprocessing, feature extraction, and classification methods.]]></summary></entry><entry><title type="html">Building Real-time EEG Signal Processing Pipeline</title><link href="https://junlinjing.github.io/jjing-neuro/2023/09/real-time-eeg" rel="alternate" type="text/html" title="Building Real-time EEG Signal Processing Pipeline" /><published>2023-09-15T00:00:00+02:00</published><updated>2023-09-15T00:00:00+02:00</updated><id>https://junlinjing.github.io/jjing-neuro/2023/09/real-time-eeg</id><content type="html" xml:base="https://junlinjing.github.io/jjing-neuro/2023/09/real-time-eeg"><![CDATA[<h1 id="building-real-time-eeg-signal-processing-pipeline">Building Real-time EEG Signal Processing Pipeline</h1>

<p>Real-time EEG signal processing is crucial for brain-computer interfaces and neurofeedback applications. This tutorial shows how to build an efficient real-time processing pipeline using Python.</p>

<h2 id="system-architecture">System Architecture</h2>

<p>A real-time EEG processing system typically consists of:</p>
<ol>
  <li>Data acquisition</li>
  <li>Signal preprocessing</li>
  <li>Feature extraction</li>
  <li>Classification/Analysis</li>
  <li>Feedback generation</li>
</ol>

<h3 id="basic-structure">Basic Structure</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">RealTimeEEG</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">device</span><span class="p">,</span> <span class="n">sampling_rate</span><span class="p">,</span> <span class="n">channels</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">device</span> <span class="o">=</span> <span class="n">device</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">fs</span> <span class="o">=</span> <span class="n">sampling_rate</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">channels</span> <span class="o">=</span> <span class="n">channels</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">buffer_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">fs</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>  <span class="c1"># 2-second buffer
</span>        <span class="bp">self</span><span class="p">.</span><span class="nb">buffer</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="nb">len</span><span class="p">(</span><span class="n">channels</span><span class="p">),</span> <span class="bp">self</span><span class="p">.</span><span class="n">buffer_size</span><span class="p">))</span>
        
    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">setup_filters</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">setup_features</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">setup_classifier</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="data-acquisition">Data Acquisition</h2>

<h3 id="setting-up-lsl-stream">Setting up LSL Stream</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pylsl</span> <span class="kn">import</span> <span class="n">StreamInlet</span><span class="p">,</span> <span class="n">resolve_stream</span>

<span class="k">def</span> <span class="nf">setup_eeg_stream</span><span class="p">():</span>
    <span class="s">"""Setup LSL stream for EEG data."""</span>
    <span class="n">streams</span> <span class="o">=</span> <span class="n">resolve_stream</span><span class="p">(</span><span class="s">'type'</span><span class="p">,</span> <span class="s">'EEG'</span><span class="p">)</span>
    <span class="n">inlet</span> <span class="o">=</span> <span class="n">StreamInlet</span><span class="p">(</span><span class="n">streams</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="k">return</span> <span class="n">inlet</span>

<span class="k">def</span> <span class="nf">acquire_data</span><span class="p">(</span><span class="n">inlet</span><span class="p">,</span> <span class="n">chunk_size</span><span class="p">):</span>
    <span class="s">"""Acquire data chunks from LSL stream."""</span>
    <span class="n">chunk</span><span class="p">,</span> <span class="n">timestamps</span> <span class="o">=</span> <span class="n">inlet</span><span class="p">.</span><span class="n">pull_chunk</span><span class="p">(</span>
        <span class="n">max_samples</span><span class="o">=</span><span class="n">chunk_size</span><span class="p">,</span>
        <span class="n">timeout</span><span class="o">=</span><span class="mf">1.0</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">chunk</span><span class="p">),</span> <span class="n">timestamps</span>
</code></pre></div></div>

<h2 id="real-time-preprocessing">Real-time Preprocessing</h2>

<h3 id="filtering">Filtering</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">scipy.signal</span> <span class="kn">import</span> <span class="n">butter</span><span class="p">,</span> <span class="n">sosfilt</span>

<span class="k">class</span> <span class="nc">RealTimeFilter</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">fs</span><span class="p">,</span> <span class="n">f_low</span><span class="p">,</span> <span class="n">f_high</span><span class="p">,</span> <span class="n">order</span><span class="o">=</span><span class="mi">4</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">fs</span> <span class="o">=</span> <span class="n">fs</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">f_low</span> <span class="o">=</span> <span class="n">f_low</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">f_high</span> <span class="o">=</span> <span class="n">f_high</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">order</span> <span class="o">=</span> <span class="n">order</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">sos</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_design_filter</span><span class="p">()</span>
        
    <span class="k">def</span> <span class="nf">_design_filter</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">nyq</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">fs</span> <span class="o">/</span> <span class="mi">2</span>
        <span class="n">sos</span> <span class="o">=</span> <span class="n">butter</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">order</span><span class="p">,</span> 
                    <span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">f_low</span><span class="o">/</span><span class="n">nyq</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">f_high</span><span class="o">/</span><span class="n">nyq</span><span class="p">],</span>
                    <span class="n">btype</span><span class="o">=</span><span class="s">'bandpass'</span><span class="p">,</span>
                    <span class="n">output</span><span class="o">=</span><span class="s">'sos'</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">sos</span>
    
    <span class="k">def</span> <span class="nf">apply</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">sosfilt</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">sos</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">axis</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="artifact-removal">Artifact Removal</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ArtifactRemover</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">threshold</span><span class="o">=</span><span class="mi">100</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">threshold</span> <span class="o">=</span> <span class="n">threshold</span>
        
    <span class="k">def</span> <span class="nf">remove_artifacts</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="s">"""Simple threshold-based artifact removal."""</span>
        <span class="n">mask</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">&gt;</span> <span class="bp">self</span><span class="p">.</span><span class="n">threshold</span>
        <span class="n">data</span><span class="p">[</span><span class="n">mask</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">nan</span>
        <span class="c1"># Interpolate NaN values
</span>        <span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">).</span><span class="n">interpolate</span><span class="p">(</span><span class="n">method</span><span class="o">=</span><span class="s">'linear'</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">data</span><span class="p">.</span><span class="n">values</span>
</code></pre></div></div>

<h2 id="feature-extraction">Feature Extraction</h2>

<h3 id="real-time-features">Real-time Features</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">RealTimeFeatures</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">fs</span><span class="p">,</span> <span class="n">window_size</span><span class="o">=</span><span class="mf">1.0</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">fs</span> <span class="o">=</span> <span class="n">fs</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">window_size</span> <span class="o">=</span> <span class="n">window_size</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">window_samples</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">fs</span> <span class="o">*</span> <span class="n">window_size</span><span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">compute_features</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="s">"""Compute features in real-time."""</span>
        <span class="n">features</span> <span class="o">=</span> <span class="p">{}</span>
        
        <span class="c1"># Time domain features
</span>        <span class="n">features</span><span class="p">[</span><span class="s">'rms'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">square</span><span class="p">(</span><span class="n">data</span><span class="p">)))</span>
        <span class="n">features</span><span class="p">[</span><span class="s">'var'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">var</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        
        <span class="c1"># Frequency domain features
</span>        <span class="n">freqs</span><span class="p">,</span> <span class="n">psd</span> <span class="o">=</span> <span class="n">signal</span><span class="p">.</span><span class="n">welch</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> 
                                <span class="n">fs</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">fs</span><span class="p">,</span>
                                <span class="n">nperseg</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">window_samples</span><span class="p">,</span>
                                <span class="n">noverlap</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">window_samples</span><span class="o">//</span><span class="mi">2</span><span class="p">)</span>
        
        <span class="c1"># Band powers
</span>        <span class="n">bands</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">'delta'</span><span class="p">:</span> <span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span>
            <span class="s">'theta'</span><span class="p">:</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span>
            <span class="s">'alpha'</span><span class="p">:</span> <span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">),</span>
            <span class="s">'beta'</span><span class="p">:</span> <span class="p">(</span><span class="mi">13</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
        <span class="p">}</span>
        
        <span class="k">for</span> <span class="n">band</span><span class="p">,</span> <span class="p">(</span><span class="n">fmin</span><span class="p">,</span> <span class="n">fmax</span><span class="p">)</span> <span class="ow">in</span> <span class="n">bands</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
            <span class="n">idx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">logical_and</span><span class="p">(</span><span class="n">freqs</span> <span class="o">&gt;=</span> <span class="n">fmin</span><span class="p">,</span> <span class="n">freqs</span> <span class="o">&lt;=</span> <span class="n">fmax</span><span class="p">)</span>
            <span class="n">features</span><span class="p">[</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">band</span><span class="si">}</span><span class="s">_power'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">psd</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span>
            
        <span class="k">return</span> <span class="n">features</span>
</code></pre></div></div>

<h2 id="real-time-processing-pipeline">Real-time Processing Pipeline</h2>

<h3 id="main-processing-loop">Main Processing Loop</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">EEGProcessor</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">fs</span><span class="o">=</span><span class="mi">250</span><span class="p">,</span> <span class="n">channels</span><span class="o">=</span><span class="p">[</span><span class="s">'Fp1'</span><span class="p">,</span> <span class="s">'Fp2'</span><span class="p">,</span> <span class="s">'C3'</span><span class="p">,</span> <span class="s">'C4'</span><span class="p">]):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">fs</span> <span class="o">=</span> <span class="n">fs</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">channels</span> <span class="o">=</span> <span class="n">channels</span>
        <span class="bp">self</span><span class="p">.</span><span class="nb">filter</span> <span class="o">=</span> <span class="n">RealTimeFilter</span><span class="p">(</span><span class="n">fs</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">40</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">artifact_remover</span> <span class="o">=</span> <span class="n">ArtifactRemover</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">feature_extractor</span> <span class="o">=</span> <span class="n">RealTimeFeatures</span><span class="p">(</span><span class="n">fs</span><span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">process_chunk</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="s">"""Process a chunk of EEG data in real-time."""</span>
        <span class="c1"># Filter
</span>        <span class="n">filtered</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="nb">filter</span><span class="p">.</span><span class="nb">apply</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        
        <span class="c1"># Remove artifacts
</span>        <span class="n">clean</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">artifact_remover</span><span class="p">.</span><span class="n">remove_artifacts</span><span class="p">(</span><span class="n">filtered</span><span class="p">)</span>
        
        <span class="c1"># Extract features
</span>        <span class="n">features</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">ch</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">channels</span><span class="p">):</span>
            <span class="n">ch_features</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">feature_extractor</span><span class="p">.</span><span class="n">compute_features</span><span class="p">(</span>
                <span class="n">clean</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="p">:]</span>
            <span class="p">)</span>
            <span class="n">features</span><span class="p">[</span><span class="n">ch</span><span class="p">]</span> <span class="o">=</span> <span class="n">ch_features</span>
            
        <span class="k">return</span> <span class="n">features</span>
</code></pre></div></div>

<h2 id="visualization">Visualization</h2>

<h3 id="real-time-plot">Real-time Plot</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="nn">matplotlib.animation</span> <span class="kn">import</span> <span class="n">FuncAnimation</span>

<span class="k">class</span> <span class="nc">RealTimePlot</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">fs</span><span class="p">,</span> <span class="n">channels</span><span class="p">,</span> <span class="n">buffer_size</span><span class="o">=</span><span class="mi">1000</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">fs</span> <span class="o">=</span> <span class="n">fs</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">channels</span> <span class="o">=</span> <span class="n">channels</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">buffer_size</span> <span class="o">=</span> <span class="n">buffer_size</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">setup_plot</span><span class="p">()</span>
        
    <span class="k">def</span> <span class="nf">setup_plot</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">fig</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">lines</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">ch</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">channels</span><span class="p">:</span>
            <span class="n">line</span><span class="p">,</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">([],</span> <span class="p">[],</span> <span class="n">label</span><span class="o">=</span><span class="n">ch</span><span class="p">)</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">lines</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">ax</span><span class="p">.</span><span class="n">set_ylim</span><span class="p">(</span><span class="o">-</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">ax</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>
        
    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">frame</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">lines</span><span class="p">):</span>
            <span class="n">line</span><span class="p">.</span><span class="n">set_data</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">])),</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">lines</span>
</code></pre></div></div>

<h2 id="complete-system">Complete System</h2>

<p>Here’s how to put everything together:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">run_eeg_system</span><span class="p">():</span>
    <span class="c1"># Initialize components
</span>    <span class="n">fs</span> <span class="o">=</span> <span class="mi">250</span>
    <span class="n">channels</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Fp1'</span><span class="p">,</span> <span class="s">'Fp2'</span><span class="p">,</span> <span class="s">'C3'</span><span class="p">,</span> <span class="s">'C4'</span><span class="p">]</span>
    <span class="n">processor</span> <span class="o">=</span> <span class="n">EEGProcessor</span><span class="p">(</span><span class="n">fs</span><span class="p">,</span> <span class="n">channels</span><span class="p">)</span>
    <span class="n">inlet</span> <span class="o">=</span> <span class="n">setup_eeg_stream</span><span class="p">()</span>
    <span class="n">plotter</span> <span class="o">=</span> <span class="n">RealTimePlot</span><span class="p">(</span><span class="n">fs</span><span class="p">,</span> <span class="n">channels</span><span class="p">)</span>
    
    <span class="c1"># Main loop
</span>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="c1"># Get data
</span>        <span class="n">data</span><span class="p">,</span> <span class="n">timestamps</span> <span class="o">=</span> <span class="n">acquire_data</span><span class="p">(</span><span class="n">inlet</span><span class="p">,</span> <span class="n">chunk_size</span><span class="o">=</span><span class="n">fs</span><span class="o">//</span><span class="mi">10</span><span class="p">)</span>
        
        <span class="c1"># Process
</span>        <span class="n">features</span> <span class="o">=</span> <span class="n">processor</span><span class="p">.</span><span class="n">process_chunk</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        
        <span class="c1"># Update visualization
</span>        <span class="n">plotter</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
        
        <span class="c1"># Optional: Save or stream features
</span>        <span class="n">save_features</span><span class="p">(</span><span class="n">features</span><span class="p">)</span>
        
        <span class="c1"># Check for exit condition
</span>        <span class="k">if</span> <span class="n">check_exit_condition</span><span class="p">():</span>
            <span class="k">break</span>
</code></pre></div></div>

<h2 id="performance-optimization">Performance Optimization</h2>

<ol>
  <li><strong>Buffer Management</strong>
    <ul>
      <li>Use circular buffers</li>
      <li>Optimize memory allocation</li>
      <li>Minimize copying</li>
    </ul>
  </li>
  <li><strong>Computational Efficiency</strong>
    <ul>
      <li>Vectorize operations</li>
      <li>Use parallel processing</li>
      <li>Profile and optimize bottlenecks</li>
    </ul>
  </li>
  <li><strong>Latency Reduction</strong>
    <ul>
      <li>Minimize buffer sizes</li>
      <li>Optimize filter designs</li>
      <li>Use efficient data structures</li>
    </ul>
  </li>
</ol>

<h2 id="best-practices">Best Practices</h2>

<ol>
  <li><strong>System Design</strong>
    <ul>
      <li>Modular architecture</li>
      <li>Error handling</li>
      <li>Data validation</li>
    </ul>
  </li>
  <li><strong>Real-time Considerations</strong>
    <ul>
      <li>Timing accuracy</li>
      <li>Buffer overruns</li>
      <li>Resource management</li>
    </ul>
  </li>
  <li><strong>Quality Control</strong>
    <ul>
      <li>Signal quality metrics</li>
      <li>Performance monitoring</li>
      <li>System diagnostics</li>
    </ul>
  </li>
</ol>

<h2 id="conclusion">Conclusion</h2>

<p>Building a real-time EEG processing pipeline requires careful consideration of various factors including data acquisition, processing efficiency, and system reliability. This guide provides a foundation for developing such systems.</p>

<h2 id="references">References</h2>

<ol>
  <li>Brunner, C. et al. (2015). “BCI Software Platforms”</li>
  <li>Delorme, A. &amp; Makeig, S. (2004). “EEGLAB”</li>
  <li>Renard, Y. et al. (2010). “OpenViBE”</li>
</ol>

<h2 id="resources">Resources</h2>

<ul>
  <li><a href="https://labstreaminglayer.readthedocs.io/">LSL Documentation</a></li>
  <li><a href="https://github.com/yourusername/real-time-eeg">Real-time EEG Examples</a></li>
  <li><a href="https://real-time-eeg.readthedocs.io/">Performance Optimization Guide</a></li>
</ul>]]></content><author><name>jimjing</name></author><category term="Tutorial" /><category term="Signal Processing" /><category term="EEG" /><category term="Python" /><category term="Signal Processing" /><category term="Tutorial" /><summary type="html"><![CDATA[Detailed guide on building real-time EEG signal processing systems using Python, covering data acquisition, filtering, and feature extraction.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://junlinjing.github.io/jjing-neuro/assets/images/blog/real-time-eeg.jpg" /><media:content medium="image" url="https://junlinjing.github.io/jjing-neuro/assets/images/blog/real-time-eeg.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>