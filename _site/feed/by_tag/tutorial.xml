<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://junlinjing.github.io/jjing-neuro/feed/by_tag/tutorial.xml" rel="self" type="application/atom+xml" /><link href="https://junlinjing.github.io/jjing-neuro/" rel="alternate" type="text/html" /><updated>2025-05-16T18:17:56+02:00</updated><id>https://junlinjing.github.io/jjing-neuro/feed/by_tag/tutorial.xml</id><title type="html">Jim Jing</title><subtitle>A personal academic website focusing on neuroscience research and artificial intelligence</subtitle><entry><title type="html">Advanced EEG Data Analysis with Python: From Preprocessing to Machine Learning</title><link href="https://junlinjing.github.io/jjing-neuro/blog/eeg-python-tutorial" rel="alternate" type="text/html" title="Advanced EEG Data Analysis with Python: From Preprocessing to Machine Learning" /><published>2024-02-20T10:00:00+01:00</published><updated>2024-02-20T10:00:00+01:00</updated><id>https://junlinjing.github.io/jjing-neuro/blog/eeg-python-tutorial</id><content type="html" xml:base="https://junlinjing.github.io/jjing-neuro/blog/eeg-python-tutorial"><![CDATA[<h1 id="advanced-eeg-data-analysis-with-python-from-preprocessing-to-machine-learning">Advanced EEG Data Analysis with Python: From Preprocessing to Machine Learning</h1>

<p>Electroencephalography (EEG) data analysis is a crucial skill in modern neuroscience research. This comprehensive tutorial will guide you through advanced techniques for EEG data processing, analysis, and machine learning applications using Python.</p>

<h2 id="prerequisites">Prerequisites</h2>

<ul>
  <li>Basic understanding of Python programming</li>
  <li>Familiarity with signal processing concepts</li>
  <li>Basic knowledge of neuroscience and EEG</li>
</ul>

<h2 id="environment-setup">Environment Setup</h2>

<p>First, create a clean Python environment and install the required packages:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create and activate a new conda environment</span>
conda create <span class="nt">-n</span> eeg_analysis <span class="nv">python</span><span class="o">=</span>3.9
conda activate eeg_analysis

<span class="c"># Install required packages</span>
pip <span class="nb">install </span><span class="nv">mne</span><span class="o">==</span>1.5.1 <span class="nv">numpy</span><span class="o">==</span>1.24.3 <span class="nv">scipy</span><span class="o">==</span>1.11.3 
pip <span class="nb">install </span><span class="nv">matplotlib</span><span class="o">==</span>3.8.0 <span class="nv">pandas</span><span class="o">==</span>2.1.1 <span class="nv">seaborn</span><span class="o">==</span>0.13.0
pip <span class="nb">install </span>scikit-learn<span class="o">==</span>1.3.1 <span class="nv">antropy</span><span class="o">==</span>0.1.6
</code></pre></div></div>

<h2 id="data-acquisition-and-initial-processing">Data Acquisition and Initial Processing</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">mne</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
<span class="kn">from</span> <span class="nn">scipy</span> <span class="kn">import</span> <span class="n">signal</span>
<span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
<span class="kn">import</span> <span class="nn">antropy</span> <span class="k">as</span> <span class="n">ant</span>

<span class="c1"># Set random seed for reproducibility
</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">load_and_prepare_data</span><span class="p">(</span><span class="n">raw_file</span><span class="p">):</span>
    <span class="s">"""
    Load and prepare EEG data with proper documentation
    
    Parameters:
    -----------
    raw_file : str
        Path to the raw EEG data file
        
    Returns:
    --------
    raw : mne.io.Raw
        Loaded and preprocessed EEG data
    """</span>
    <span class="n">raw</span> <span class="o">=</span> <span class="n">mne</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="n">read_raw_fif</span><span class="p">(</span><span class="n">raw_file</span><span class="p">,</span> <span class="n">preload</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">raw</span><span class="p">.</span><span class="n">pick_types</span><span class="p">(</span><span class="n">meg</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">eeg</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">eog</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">raw</span>

<span class="c1"># Example usage
</span><span class="n">raw</span> <span class="o">=</span> <span class="n">load_and_prepare_data</span><span class="p">(</span><span class="s">'sample_audvis_raw.fif'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="advanced-preprocessing-pipeline">Advanced Preprocessing Pipeline</h2>

<h3 id="1-noise-reduction-and-filtering">1. Noise Reduction and Filtering</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">preprocess_eeg</span><span class="p">(</span><span class="n">raw</span><span class="p">,</span> <span class="n">l_freq</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">h_freq</span><span class="o">=</span><span class="mi">40</span><span class="p">,</span> <span class="n">notch_freq</span><span class="o">=</span><span class="mi">50</span><span class="p">):</span>
    <span class="s">"""
    Comprehensive EEG preprocessing pipeline
    
    Parameters:
    -----------
    raw : mne.io.Raw
        Raw EEG data
    l_freq : float
        Lower frequency bound for bandpass filter
    h_freq : float
        Upper frequency bound for bandpass filter
    notch_freq : float
        Frequency for notch filter (usually power line frequency)
    
    Returns:
    --------
    raw : mne.io.Raw
        Preprocessed EEG data
    """</span>
    <span class="c1"># Apply notch filter for power line interference
</span>    <span class="n">raw</span><span class="p">.</span><span class="n">notch_filter</span><span class="p">(</span><span class="n">freqs</span><span class="o">=</span><span class="n">notch_freq</span><span class="p">)</span>
    
    <span class="c1"># Apply bandpass filter
</span>    <span class="n">raw</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">l_freq</span><span class="o">=</span><span class="n">l_freq</span><span class="p">,</span> <span class="n">h_freq</span><span class="o">=</span><span class="n">h_freq</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">raw</span>
</code></pre></div></div>

<h3 id="2-advanced-artifact-removal">2. Advanced Artifact Removal</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">remove_artifacts</span><span class="p">(</span><span class="n">raw</span><span class="p">,</span> <span class="n">n_components</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">):</span>
    <span class="s">"""
    Advanced artifact removal using ICA and automated component selection
    """</span>
    <span class="c1"># Prepare ICA
</span>    <span class="n">ica</span> <span class="o">=</span> <span class="n">mne</span><span class="p">.</span><span class="n">preprocessing</span><span class="p">.</span><span class="n">ICA</span><span class="p">(</span>
        <span class="n">n_components</span><span class="o">=</span><span class="n">n_components</span><span class="p">,</span>
        <span class="n">random_state</span><span class="o">=</span><span class="n">random_state</span><span class="p">,</span>
        <span class="n">method</span><span class="o">=</span><span class="s">'fastica'</span>
    <span class="p">)</span>
    
    <span class="c1"># Fit ICA
</span>    <span class="n">ica</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span>
    
    <span class="c1"># Automatically detect eye blink components
</span>    <span class="n">eog_indices</span><span class="p">,</span> <span class="n">eog_scores</span> <span class="o">=</span> <span class="n">ica</span><span class="p">.</span><span class="n">find_bads_eog</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span>
    
    <span class="c1"># Detect and remove additional artifact components
</span>    <span class="n">ica</span><span class="p">.</span><span class="n">exclude</span> <span class="o">=</span> <span class="n">eog_indices</span>
    
    <span class="c1"># Apply ICA
</span>    <span class="n">raw_clean</span> <span class="o">=</span> <span class="n">raw</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
    <span class="n">ica</span><span class="p">.</span><span class="nb">apply</span><span class="p">(</span><span class="n">raw_clean</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">raw_clean</span><span class="p">,</span> <span class="n">ica</span>
</code></pre></div></div>

<h2 id="feature-engineering">Feature Engineering</h2>

<h3 id="1-advanced-time-frequency-analysis">1. Advanced Time-Frequency Analysis</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">extract_advanced_features</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">fs</span><span class="p">,</span> <span class="n">bands</span><span class="p">):</span>
    <span class="s">"""
    Extract comprehensive EEG features including:
    - Band powers
    - Spectral entropy
    - Hjorth parameters
    - Sample entropy
    """</span>
    <span class="n">features</span> <span class="o">=</span> <span class="p">{}</span>
    
    <span class="c1"># Compute band powers
</span>    <span class="k">for</span> <span class="n">band_name</span><span class="p">,</span> <span class="p">(</span><span class="n">fmin</span><span class="p">,</span> <span class="n">fmax</span><span class="p">)</span> <span class="ow">in</span> <span class="n">bands</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
        <span class="n">freqs</span><span class="p">,</span> <span class="n">psd</span> <span class="o">=</span> <span class="n">signal</span><span class="p">.</span><span class="n">welch</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">fs</span><span class="p">,</span> <span class="n">nperseg</span><span class="o">=</span><span class="n">fs</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>
        <span class="n">idx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">logical_and</span><span class="p">(</span><span class="n">freqs</span> <span class="o">&gt;=</span> <span class="n">fmin</span><span class="p">,</span> <span class="n">freqs</span> <span class="o">&lt;=</span> <span class="n">fmax</span><span class="p">)</span>
        <span class="n">features</span><span class="p">[</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">band_name</span><span class="si">}</span><span class="s">_power'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">psd</span><span class="p">[:,</span> <span class="n">idx</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    
    <span class="c1"># Compute spectral entropy
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
        <span class="n">features</span><span class="p">[</span><span class="sa">f</span><span class="s">'spectral_entropy_ch</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">ant</span><span class="p">.</span><span class="n">spectral_entropy</span><span class="p">(</span>
            <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">fs</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="s">'welch'</span>
        <span class="p">)</span>
    
    <span class="c1"># Compute Hjorth parameters
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
        <span class="n">activity</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">var</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="n">mobility</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">var</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">diff</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span> <span class="o">/</span> <span class="n">activity</span><span class="p">)</span>
        <span class="n">complexity</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span>
            <span class="n">np</span><span class="p">.</span><span class="n">var</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">diff</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">diff</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">])))</span> <span class="o">*</span> <span class="n">activity</span> <span class="o">/</span>
            <span class="n">np</span><span class="p">.</span><span class="n">var</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">diff</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>
        <span class="p">)</span>
        <span class="n">features</span><span class="p">[</span><span class="sa">f</span><span class="s">'hjorth_activity_ch</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">activity</span>
        <span class="n">features</span><span class="p">[</span><span class="sa">f</span><span class="s">'hjorth_mobility_ch</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">mobility</span>
        <span class="n">features</span><span class="p">[</span><span class="sa">f</span><span class="s">'hjorth_complexity_ch</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">complexity</span>
    
    <span class="k">return</span> <span class="n">features</span>
</code></pre></div></div>

<h3 id="2-connectivity-analysis">2. Connectivity Analysis</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">compute_connectivity</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">sfreq</span><span class="p">,</span> <span class="n">fmin</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">fmax</span><span class="o">=</span><span class="mi">13</span><span class="p">):</span>
    <span class="s">"""
    Compute advanced connectivity metrics
    """</span>
    <span class="kn">from</span> <span class="nn">mne.connectivity</span> <span class="kn">import</span> <span class="n">spectral_connectivity</span>
    
    <span class="c1"># Compute WPLI connectivity
</span>    <span class="n">con</span> <span class="o">=</span> <span class="n">spectral_connectivity</span><span class="p">(</span>
        <span class="n">data</span><span class="p">,</span>
        <span class="n">method</span><span class="o">=</span><span class="s">'wpli'</span><span class="p">,</span>
        <span class="n">mode</span><span class="o">=</span><span class="s">'multitaper'</span><span class="p">,</span>
        <span class="n">sfreq</span><span class="o">=</span><span class="n">sfreq</span><span class="p">,</span>
        <span class="n">fmin</span><span class="o">=</span><span class="n">fmin</span><span class="p">,</span>
        <span class="n">fmax</span><span class="o">=</span><span class="n">fmax</span><span class="p">,</span>
        <span class="n">faverage</span><span class="o">=</span><span class="bp">True</span>
    <span class="p">)</span>
    
    <span class="c1"># Compute additional connectivity metrics
</span>    <span class="n">con_pli</span> <span class="o">=</span> <span class="n">spectral_connectivity</span><span class="p">(</span>
        <span class="n">data</span><span class="p">,</span>
        <span class="n">method</span><span class="o">=</span><span class="s">'pli'</span><span class="p">,</span>
        <span class="n">mode</span><span class="o">=</span><span class="s">'multitaper'</span><span class="p">,</span>
        <span class="n">sfreq</span><span class="o">=</span><span class="n">sfreq</span><span class="p">,</span>
        <span class="n">fmin</span><span class="o">=</span><span class="n">fmin</span><span class="p">,</span>
        <span class="n">fmax</span><span class="o">=</span><span class="n">fmax</span><span class="p">,</span>
        <span class="n">faverage</span><span class="o">=</span><span class="bp">True</span>
    <span class="p">)</span>
    
    <span class="k">return</span> <span class="n">con</span><span class="p">,</span> <span class="n">con_pli</span>
</code></pre></div></div>

<h2 id="advanced-visualization">Advanced Visualization</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create_advanced_visualization</span><span class="p">(</span><span class="n">raw</span><span class="p">,</span> <span class="n">features</span><span class="p">,</span> <span class="n">bands</span><span class="p">):</span>
    <span class="s">"""
    Create comprehensive EEG visualizations
    """</span>
    <span class="c1"># Create figure with subplots
</span>    <span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>
    
    <span class="c1"># Plot 1: Time series
</span>    <span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">221</span><span class="p">)</span>
    <span class="n">raw</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">duration</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">n_channels</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">)</span>
    
    <span class="c1"># Plot 2: Topographic map
</span>    <span class="n">ax2</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">222</span><span class="p">)</span>
    <span class="n">mne</span><span class="p">.</span><span class="n">viz</span><span class="p">.</span><span class="n">plot_topomap</span><span class="p">(</span><span class="n">features</span><span class="p">[</span><span class="s">'alpha_power'</span><span class="p">],</span> <span class="n">raw</span><span class="p">.</span><span class="n">info</span><span class="p">,</span> <span class="n">axes</span><span class="o">=</span><span class="n">ax2</span><span class="p">)</span>
    
    <span class="c1"># Plot 3: Connectivity matrix
</span>    <span class="n">ax3</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">223</span><span class="p">)</span>
    <span class="n">sns</span><span class="p">.</span><span class="n">heatmap</span><span class="p">(</span><span class="n">features</span><span class="p">[</span><span class="s">'connectivity'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax3</span><span class="p">)</span>
    
    <span class="c1"># Plot 4: Band powers
</span>    <span class="n">ax4</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">224</span><span class="p">)</span>
    <span class="n">plot_band_powers</span><span class="p">(</span><span class="n">features</span><span class="p">,</span> <span class="n">bands</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax4</span><span class="p">)</span>
    
    <span class="n">plt</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">fig</span>
</code></pre></div></div>

<h2 id="machine-learning-pipeline">Machine Learning Pipeline</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sklearn.pipeline</span> <span class="kn">import</span> <span class="n">Pipeline</span>
<span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
<span class="kn">from</span> <span class="nn">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">RandomForestClassifier</span>
<span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">cross_val_score</span>

<span class="k">def</span> <span class="nf">create_ml_pipeline</span><span class="p">(</span><span class="n">features</span><span class="p">,</span> <span class="n">labels</span><span class="p">):</span>
    <span class="s">"""
    Create and evaluate a machine learning pipeline for EEG classification
    """</span>
    <span class="c1"># Create pipeline
</span>    <span class="n">pipeline</span> <span class="o">=</span> <span class="n">Pipeline</span><span class="p">([</span>
        <span class="p">(</span><span class="s">'scaler'</span><span class="p">,</span> <span class="n">StandardScaler</span><span class="p">()),</span>
        <span class="p">(</span><span class="s">'classifier'</span><span class="p">,</span> <span class="n">RandomForestClassifier</span><span class="p">(</span>
            <span class="n">n_estimators</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span>
            <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">,</span>
            <span class="n">class_weight</span><span class="o">=</span><span class="s">'balanced'</span>
        <span class="p">))</span>
    <span class="p">])</span>
    
    <span class="c1"># Perform cross-validation
</span>    <span class="n">scores</span> <span class="o">=</span> <span class="n">cross_val_score</span><span class="p">(</span>
        <span class="n">pipeline</span><span class="p">,</span>
        <span class="n">features</span><span class="p">,</span>
        <span class="n">labels</span><span class="p">,</span>
        <span class="n">cv</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>
        <span class="n">scoring</span><span class="o">=</span><span class="s">'balanced_accuracy'</span>
    <span class="p">)</span>
    
    <span class="k">return</span> <span class="n">pipeline</span><span class="p">,</span> <span class="n">scores</span>
</code></pre></div></div>

<h2 id="example-application-motor-imagery-classification">Example Application: Motor Imagery Classification</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">motor_imagery_analysis</span><span class="p">():</span>
    <span class="s">"""
    Complete example of motor imagery classification
    """</span>
    <span class="c1"># Load motor imagery data
</span>    <span class="n">raw</span> <span class="o">=</span> <span class="n">mne</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="n">read_raw_fif</span><span class="p">(</span><span class="s">'motor_imagery_data.fif'</span><span class="p">,</span> <span class="n">preload</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    
    <span class="c1"># Preprocess data
</span>    <span class="n">raw_clean</span> <span class="o">=</span> <span class="n">preprocess_eeg</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span>
    
    <span class="c1"># Extract features
</span>    <span class="n">features</span> <span class="o">=</span> <span class="n">extract_advanced_features</span><span class="p">(</span><span class="n">raw_clean</span><span class="p">.</span><span class="n">get_data</span><span class="p">(),</span> <span class="n">raw</span><span class="p">.</span><span class="n">info</span><span class="p">[</span><span class="s">'sfreq'</span><span class="p">])</span>
    
    <span class="c1"># Create and evaluate ML pipeline
</span>    <span class="n">pipeline</span><span class="p">,</span> <span class="n">scores</span> <span class="o">=</span> <span class="n">create_ml_pipeline</span><span class="p">(</span><span class="n">features</span><span class="p">,</span> <span class="n">labels</span><span class="p">)</span>
    
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Cross-validation scores: </span><span class="si">{</span><span class="n">scores</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span><span class="si">:</span><span class="p">.</span><span class="mi">3</span><span class="n">f</span><span class="si">}</span><span class="s"> (+/- </span><span class="si">{</span><span class="n">scores</span><span class="p">.</span><span class="n">std</span><span class="p">()</span><span class="o">*</span><span class="mi">2</span><span class="si">:</span><span class="p">.</span><span class="mi">3</span><span class="n">f</span><span class="si">}</span><span class="s">)"</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">pipeline</span><span class="p">,</span> <span class="n">scores</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>This advanced tutorial has covered:</p>
<ol>
  <li>Professional-grade preprocessing techniques</li>
  <li>Advanced feature extraction methods</li>
  <li>Comprehensive visualization approaches</li>
  <li>Robust machine learning pipeline development</li>
  <li>Real-world application example</li>
</ol>

<p>The complete implementation, including additional examples and datasets, is available in our <a href="https://github.com/research-lab/advanced-eeg-analysis">GitHub repository</a>.</p>

<h2 id="references">References</h2>

<ol>
  <li>Gramfort, A., et al. (2023). “MNE-Python: State-of-the-art MEG/EEG analysis in Python”</li>
  <li>Cohen, M. X. (2022). “A deep dive into neural time series analysis”</li>
  <li>Makeig, S., et al. (2021). “Advanced methods in EEG/MEG analysis”</li>
  <li>Lotte, F., et al. (2023). “A review of classification algorithms for EEG-based brain-computer interfaces”</li>
</ol>]]></content><author><name>researcher</name></author><category term="blog" /><category term="python" /><category term="neuroscience" /><category term="EEG" /><category term="tutorial" /><category term="machine learning" /><category term="signal processing" /><summary type="html"><![CDATA[A comprehensive guide to analyzing EEG data using Python, covering advanced preprocessing techniques, feature extraction, and machine learning applications]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://junlinjing.github.io/jjing-neuro/assets/images/blog/2024/eeg-python-tutorial.jpg" /><media:content medium="image" url="https://junlinjing.github.io/jjing-neuro/assets/images/blog/2024/eeg-python-tutorial.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Introduction to Neural Data Analysis with Python</title><link href="https://junlinjing.github.io/jjing-neuro/blog/neural-data-python" rel="alternate" type="text/html" title="Introduction to Neural Data Analysis with Python" /><published>2023-10-25T10:00:00+02:00</published><updated>2023-10-25T10:00:00+02:00</updated><id>https://junlinjing.github.io/jjing-neuro/blog/neural-data-python</id><content type="html" xml:base="https://junlinjing.github.io/jjing-neuro/blog/neural-data-python"><![CDATA[<h1 id="introduction-to-neural-data-analysis-with-python">Introduction to Neural Data Analysis with Python</h1>

<p>Neural data analysis is a crucial skill in modern neuroscience research. This tutorial provides a comprehensive introduction to analyzing neural data using Python, focusing on practical examples and common analysis techniques.</p>

<h2 id="setting-up-your-environment">Setting Up Your Environment</h2>

<p>First, let’s set up a Python environment with the necessary packages:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Required packages
</span><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">mne</span>
<span class="kn">import</span> <span class="nn">scipy.signal</span> <span class="k">as</span> <span class="n">signal</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="n">sns</span>

<span class="c1"># Set plotting style
</span><span class="n">plt</span><span class="p">.</span><span class="n">style</span><span class="p">.</span><span class="n">use</span><span class="p">(</span><span class="s">'seaborn'</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="n">set_context</span><span class="p">(</span><span class="s">"paper"</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="loading-and-preprocessing-data">Loading and Preprocessing Data</h2>

<h3 id="reading-neural-data">Reading Neural Data</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">load_neural_data</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
    <span class="s">"""Load neural data from various formats."""</span>
    <span class="k">if</span> <span class="n">file_path</span><span class="p">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">'.edf'</span><span class="p">):</span>
        <span class="n">raw</span> <span class="o">=</span> <span class="n">mne</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="n">read_raw_edf</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="n">preload</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">file_path</span><span class="p">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">'.fif'</span><span class="p">):</span>
        <span class="n">raw</span> <span class="o">=</span> <span class="n">mne</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="n">read_raw_fif</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="n">preload</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">"Unsupported file format"</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">raw</span>

<span class="c1"># Example usage
</span><span class="n">raw_data</span> <span class="o">=</span> <span class="n">load_neural_data</span><span class="p">(</span><span class="s">'sample_data.edf'</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="basic-preprocessing">Basic Preprocessing</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">preprocess_data</span><span class="p">(</span><span class="n">raw</span><span class="p">):</span>
    <span class="s">"""Basic preprocessing pipeline."""</span>
    <span class="c1"># Filter data
</span>    <span class="n">raw</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">l_freq</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">h_freq</span><span class="o">=</span><span class="mi">40</span><span class="p">)</span>
    
    <span class="c1"># Remove power line noise
</span>    <span class="n">raw</span><span class="p">.</span><span class="n">notch_filter</span><span class="p">(</span><span class="n">freqs</span><span class="o">=</span><span class="p">[</span><span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">])</span>
    
    <span class="c1"># Detect and remove bad channels
</span>    <span class="n">raw</span><span class="p">.</span><span class="n">interpolate_bads</span><span class="p">()</span>
    
    <span class="k">return</span> <span class="n">raw</span>
</code></pre></div></div>

<h2 id="feature-extraction">Feature Extraction</h2>

<h3 id="time-domain-features">Time-domain Features</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">extract_time_features</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="s">"""Extract common time-domain features."""</span>
    <span class="n">features</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s">'mean'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">data</span><span class="p">),</span>
        <span class="s">'std'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">std</span><span class="p">(</span><span class="n">data</span><span class="p">),</span>
        <span class="s">'max'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="nb">max</span><span class="p">(</span><span class="n">data</span><span class="p">),</span>
        <span class="s">'min'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="nb">min</span><span class="p">(</span><span class="n">data</span><span class="p">),</span>
        <span class="s">'rms'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">square</span><span class="p">(</span><span class="n">data</span><span class="p">)))</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">features</span>
</code></pre></div></div>

<h3 id="frequency-domain-features">Frequency-domain Features</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">compute_psd</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">fs</span><span class="p">):</span>
    <span class="s">"""Compute power spectral density."""</span>
    <span class="n">freqs</span><span class="p">,</span> <span class="n">psd</span> <span class="o">=</span> <span class="n">signal</span><span class="p">.</span><span class="n">welch</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">fs</span><span class="o">=</span><span class="n">fs</span><span class="p">,</span> 
                            <span class="n">nperseg</span><span class="o">=</span><span class="mi">256</span><span class="p">,</span>
                            <span class="n">scaling</span><span class="o">=</span><span class="s">'density'</span><span class="p">)</span>
    
    <span class="c1"># Extract frequency bands
</span>    <span class="n">bands</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s">'delta'</span><span class="p">:</span> <span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span>
        <span class="s">'theta'</span><span class="p">:</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span>
        <span class="s">'alpha'</span><span class="p">:</span> <span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">),</span>
        <span class="s">'beta'</span><span class="p">:</span> <span class="p">(</span><span class="mi">13</span><span class="p">,</span> <span class="mi">30</span><span class="p">),</span>
        <span class="s">'gamma'</span><span class="p">:</span> <span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="mi">45</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="n">power</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">band</span><span class="p">,</span> <span class="p">(</span><span class="n">fmin</span><span class="p">,</span> <span class="n">fmax</span><span class="p">)</span> <span class="ow">in</span> <span class="n">bands</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
        <span class="n">idx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">logical_and</span><span class="p">(</span><span class="n">freqs</span> <span class="o">&gt;=</span> <span class="n">fmin</span><span class="p">,</span> <span class="n">freqs</span> <span class="o">&lt;=</span> <span class="n">fmax</span><span class="p">)</span>
        <span class="n">power</span><span class="p">[</span><span class="n">band</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">psd</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span>
    
    <span class="k">return</span> <span class="n">freqs</span><span class="p">,</span> <span class="n">psd</span><span class="p">,</span> <span class="n">power</span>
</code></pre></div></div>

<h2 id="data-visualization">Data Visualization</h2>

<h3 id="time-series-plotting">Time Series Plotting</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">plot_neural_signals</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">channels</span><span class="p">,</span> <span class="n">fs</span><span class="p">):</span>
    <span class="s">"""Plot multiple channels of neural data."""</span>
    <span class="n">time</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">))</span> <span class="o">/</span> <span class="n">fs</span>
    
    <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">ch</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">channels</span><span class="p">):</span>
        <span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="n">ch</span><span class="p">)</span>
    
    <span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Time (s)'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Channel'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Neural Signals'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="spectral-analysis-visualization">Spectral Analysis Visualization</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">plot_spectrum</span><span class="p">(</span><span class="n">freqs</span><span class="p">,</span> <span class="n">psd</span><span class="p">,</span> <span class="n">power</span><span class="p">):</span>
    <span class="s">"""Plot power spectrum and band powers."""</span>
    <span class="n">fig</span><span class="p">,</span> <span class="p">(</span><span class="n">ax1</span><span class="p">,</span> <span class="n">ax2</span><span class="p">)</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
    
    <span class="c1"># Plot PSD
</span>    <span class="n">ax1</span><span class="p">.</span><span class="n">semilogy</span><span class="p">(</span><span class="n">freqs</span><span class="p">,</span> <span class="n">psd</span><span class="p">)</span>
    <span class="n">ax1</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'Frequency (Hz)'</span><span class="p">)</span>
    <span class="n">ax1</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'Power Spectral Density'</span><span class="p">)</span>
    <span class="n">ax1</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
    
    <span class="c1"># Plot band powers
</span>    <span class="n">bands</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">power</span><span class="p">.</span><span class="n">keys</span><span class="p">())</span>
    <span class="n">values</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">power</span><span class="p">.</span><span class="n">values</span><span class="p">())</span>
    <span class="n">ax2</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">bands</span><span class="p">,</span> <span class="n">values</span><span class="p">)</span>
    <span class="n">ax2</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'Average Power'</span><span class="p">)</span>
    <span class="n">ax2</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">'Frequency Band Powers'</span><span class="p">)</span>
    
    <span class="n">plt</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="example-analysis-pipeline">Example Analysis Pipeline</h2>

<p>Here’s a complete example of analyzing neural data:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">analyze_neural_data</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
    <span class="c1"># Load data
</span>    <span class="n">raw</span> <span class="o">=</span> <span class="n">load_neural_data</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>
    
    <span class="c1"># Preprocess
</span>    <span class="n">raw</span> <span class="o">=</span> <span class="n">preprocess_data</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span>
    
    <span class="c1"># Extract data and info
</span>    <span class="n">data</span> <span class="o">=</span> <span class="n">raw</span><span class="p">.</span><span class="n">get_data</span><span class="p">()</span>
    <span class="n">fs</span> <span class="o">=</span> <span class="n">raw</span><span class="p">.</span><span class="n">info</span><span class="p">[</span><span class="s">'sfreq'</span><span class="p">]</span>
    <span class="n">channels</span> <span class="o">=</span> <span class="n">raw</span><span class="p">.</span><span class="n">ch_names</span>
    
    <span class="c1"># Extract features
</span>    <span class="n">features</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">ch</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
        <span class="n">time_features</span> <span class="o">=</span> <span class="n">extract_time_features</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">ch</span><span class="p">])</span>
        <span class="n">freqs</span><span class="p">,</span> <span class="n">psd</span><span class="p">,</span> <span class="n">power</span> <span class="o">=</span> <span class="n">compute_psd</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">ch</span><span class="p">],</span> <span class="n">fs</span><span class="p">)</span>
        
        <span class="n">ch_features</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">'channel'</span><span class="p">:</span> <span class="n">channels</span><span class="p">[</span><span class="n">ch</span><span class="p">],</span>
            <span class="o">**</span><span class="n">time_features</span><span class="p">,</span>
            <span class="o">**</span><span class="n">power</span>
        <span class="p">}</span>
        <span class="n">features</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">ch_features</span><span class="p">)</span>
    
    <span class="c1"># Convert to DataFrame
</span>    <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">features</span><span class="p">)</span>
    
    <span class="c1"># Visualize
</span>    <span class="n">plot_neural_signals</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">channels</span><span class="p">,</span> <span class="n">fs</span><span class="p">)</span>
    <span class="n">plot_spectrum</span><span class="p">(</span><span class="n">freqs</span><span class="p">,</span> <span class="n">psd</span><span class="p">,</span> <span class="n">power</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">df</span>
</code></pre></div></div>

<h2 id="best-practices">Best Practices</h2>

<ol>
  <li><strong>Data Organization</strong>
    <ul>
      <li>Use consistent file naming</li>
      <li>Maintain clear directory structure</li>
      <li>Document preprocessing steps</li>
    </ul>
  </li>
  <li><strong>Code Quality</strong>
    <ul>
      <li>Write modular functions</li>
      <li>Add docstrings and comments</li>
      <li>Use version control</li>
    </ul>
  </li>
  <li><strong>Analysis Pipeline</strong>
    <ul>
      <li>Automate repetitive tasks</li>
      <li>Save intermediate results</li>
      <li>Validate results at each step</li>
    </ul>
  </li>
</ol>

<h2 id="common-pitfalls">Common Pitfalls</h2>

<ol>
  <li><strong>Data Quality Issues</strong>
    <ul>
      <li>Check for missing values</li>
      <li>Identify outliers</li>
      <li>Validate channel locations</li>
    </ul>
  </li>
  <li><strong>Processing Artifacts</strong>
    <ul>
      <li>Filter edge effects</li>
      <li>Temporal discontinuities</li>
      <li>Baseline corrections</li>
    </ul>
  </li>
  <li><strong>Statistical Considerations</strong>
    <ul>
      <li>Multiple comparisons</li>
      <li>Independence assumptions</li>
      <li>Effect size calculations</li>
    </ul>
  </li>
</ol>

<h2 id="conclusion">Conclusion</h2>

<p>This tutorial covered the basics of neural data analysis using Python. For more advanced topics, check out the MNE-Python documentation and other neuroscience analysis packages.</p>

<h2 id="references">References</h2>

<ol>
  <li>Gramfort, A. et al. (2013). “MEG and EEG data analysis with MNE-Python”</li>
  <li>Cohen, M. X. (2014). “Analyzing Neural Time Series Data”</li>
  <li>Kriegeskorte, N. &amp; Kreiman, G. (2011). “Visual Population Codes”</li>
</ol>

<h2 id="additional-resources">Additional Resources</h2>

<ul>
  <li><a href="https://mne.tools/stable/index.html">MNE-Python Documentation</a></li>
  <li><a href="https://neurodatascience.github.io/">Neural Data Analysis Tutorials</a></li>
  <li><a href="https://openneuro.org/">Sample Datasets</a></li>
</ul>]]></content><author><name>jimjing</name></author><category term="blog" /><category term="data analysis" /><category term="python" /><category term="neuroscience" /><category term="tutorial" /><summary type="html"><![CDATA[A step-by-step guide to processing and analyzing neural data using Python]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://junlinjing.github.io/jjing-neuro/assets/images/blog/neural-data-python.jpg" /><media:content medium="image" url="https://junlinjing.github.io/jjing-neuro/assets/images/blog/neural-data-python.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>